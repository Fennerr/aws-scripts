{
    "batch_execute_statement": {
        "Statements": {
            "Description": "The list of PartiQL statements representing the batch to run.",
            "Type": "list",
            "Required": true,
            "list variables": {}
        },
        "ReturnConsumedCapacity": {
            "Description": "Determines the level of detail about either provisioned or on-demand throughput consumption that is returned in the response:",
            "Type": "string",
            "Required": false,
            "string variables": {}
        }
    },
    "batch_get_item": {
        "RequestItems": {
            "Description": "A map of one or more table names and, for each table, a map that describes one or more items to retrieve from that table. Each table name can be used only once per BatchGetItem request.\nEach element in the map of items to retrieve consists of the following:\nUse the # character in an expression to dereference an attribute name. For example, consider the following attribute name:\nThe name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see Reserved Words in the Amazon DynamoDB Developer Guide ). To work around this, you could specify the following for ExpressionAttributeNames :\nYou could then use this substitution in an expression, as in this example:\nFor more information about expression attribute names, see Accessing Item Attributes in the Amazon DynamoDB Developer Guide .",
            "Type": "dict",
            "Required": true,
            "dict variables": [
                {},
                {},
                {}
            ]
        },
        "ReturnConsumedCapacity": {
            "Description": "Determines the level of detail about either provisioned or on-demand throughput consumption that is returned in the response:",
            "Type": "string",
            "Required": false,
            "string variables": {}
        }
    },
    "batch_write_item": {
        "RequestItems": {
            "Description": "A map of one or more table names and, for each table, a list of operations to be performed (DeleteRequest or PutRequest ). Each element in the map consists of the following:",
            "Type": "dict",
            "Required": true,
            "dict variables": [
                {},
                {}
            ]
        },
        "ReturnConsumedCapacity": {
            "Description": "Determines the level of detail about either provisioned or on-demand throughput consumption that is returned in the response:",
            "Type": "string",
            "Required": false,
            "string variables": {}
        },
        "ReturnItemCollectionMetrics": {
            "Description": "Determines whether item collection metrics are returned. If set to SIZE , the response includes statistics about item collections, if any, that were modified during the operation are returned in the response. If set to NONE (the default), no statistics are returned.",
            "Type": "string",
            "Required": false
        }
    },
    "create_backup": {
        "TableName": {
            "Description": "The name of the table.",
            "Type": "string",
            "Required": true
        },
        "BackupName": {
            "Description": "Specified name for the backup.",
            "Type": "string",
            "Required": true
        }
    },
    "create_global_table": {
        "GlobalTableName": {
            "Description": "The global table name.",
            "Type": "string",
            "Required": true
        },
        "ReplicationGroup": {
            "Description": "The Regions where the global table needs to be created.",
            "Type": "list",
            "Required": true,
            "list variables": {}
        }
    },
    "create_table": {
        "AttributeDefinitions": {
            "Description": "An array of attributes that describe the key schema for the table and indexes.",
            "Type": "list",
            "Required": true,
            "list variables": {}
        },
        "TableName": {
            "Description": "The name of the table to create.",
            "Type": "string",
            "Required": true
        },
        "KeySchema": {
            "Description": "Specifies the attributes that make up the primary key for a table or an index. The attributes in KeySchema must also be defined in the AttributeDefinitions array. For more information, see Data Model in the Amazon DynamoDB Developer Guide .\nEach KeySchemaElement in the array is composed of:\nFor a simple primary key (partition key), you must provide exactly one element with a KeyType of HASH .\nFor a composite primary key (partition key and sort key), you must provide exactly two elements, in this order: The first element must have a KeyType of HASH, and the second element must have a KeyType of RANGE .\nFor more information, see Working with Tables in the Amazon DynamoDB Developer Guide .",
            "Type": "list",
            "Required": true,
            "list variables": [
                {},
                {}
            ]
        },
        "LocalSecondaryIndexes": {
            "Description": "One or more local secondary indexes (the maximum is 5) to be created on the table. Each index is scoped to a given partition key value. There is a 10 GB size limit per partition key value; otherwise, the size of a local secondary index is unconstrained.\nEach local secondary index in the array includes the following:",
            "Type": "list",
            "Required": false,
            "list variables": [
                {},
                {}
            ]
        },
        "GlobalSecondaryIndexes": {
            "Description": "One or more global secondary indexes (the maximum is 20) to be created on the table. Each global secondary index in the array includes the following:",
            "Type": "list",
            "Required": false,
            "list variables": [
                {},
                {}
            ]
        },
        "BillingMode": {
            "Description": "Controls how you are charged for read and write throughput and how you manage capacity. This setting can be changed later.",
            "Type": "string",
            "Required": false,
            "string variables": {}
        },
        "ProvisionedThroughput": {
            "Description": "Represents the provisioned throughput settings for a specified table or index. The settings can be modified using the UpdateTable operation.\nIf you set BillingMode as PROVISIONED, you must specify this property. If you set BillingMode as PAY_PER_REQUEST, you cannot specify this property.\nFor current minimum and maximum provisioned throughput values, see Service, Account, and Table Quotas in the Amazon DynamoDB Developer Guide .",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "StreamSpecification": {
            "Description": "The settings for DynamoDB Streams on the table. These settings consist of:",
            "Type": "dict",
            "Required": false,
            "dict variables": [
                {},
                {}
            ]
        },
        "SSESpecification": {
            "Description": "Represents the settings used to enable server-side encryption.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "Tags": {
            "Description": "A list of key-value pairs to label the table. For more information, see Tagging for DynamoDB .",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "TableClass": {
            "Description": "The table class of the new table. Valid values are STANDARD and STANDARD_INFREQUENT_ACCESS .",
            "Type": "string",
            "Required": false
        }
    },
    "delete_backup": {
        "BackupArn": {
            "Description": "The ARN associated with the backup.",
            "Type": "string",
            "Required": true
        }
    },
    "delete_item": {
        "Key": {
            "Description": "A map of attribute names to AttributeValue objects, representing the primary key of the item to delete.\nFor the primary key, you must provide all of the attributes. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide values for both the partition key and the sort key.",
            "Type": "dict",
            "Required": true,
            "dict variables": {}
        },
        "Expected": {
            "Description": "This is a legacy parameter. Use ConditionExpression instead. For more information, see Expected in the Amazon DynamoDB Developer Guide .",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "ConditionalOperator": {
            "Description": "This is a legacy parameter. Use ConditionExpression instead. For more information, see ConditionalOperator in the Amazon DynamoDB Developer Guide .",
            "Type": "string",
            "Required": false
        },
        "ReturnValues": {
            "Description": "Use ReturnValues if you want to get the item attributes as they appeared before they were deleted. For DeleteItem, the valid values are:\nThere is no additional cost associated with requesting a return value aside from the small network and processing overhead of receiving a larger response. No read capacity units are consumed.",
            "Type": "string",
            "Required": false,
            "string variables": {}
        },
        "ReturnConsumedCapacity": {
            "Description": "Determines the level of detail about either provisioned or on-demand throughput consumption that is returned in the response:",
            "Type": "string",
            "Required": false,
            "string variables": {}
        },
        "ReturnItemCollectionMetrics": {
            "Description": "Determines whether item collection metrics are returned. If set to SIZE , the response includes statistics about item collections, if any, that were modified during the operation are returned in the response. If set to NONE (the default), no statistics are returned.",
            "Type": "string",
            "Required": false
        },
        "ConditionExpression": {
            "Description": "The condition(s) an attribute(s) must meet. Valid conditions are listed in the DynamoDB Reference Guide.",
            "Type": "condition from boto3.dynamodb.conditions.Attr method",
            "Required": false
        },
        "ExpressionAttributeNames": {
            "Description": "One or more substitution tokens for attribute names in an expression. The following are some use cases for using ExpressionAttributeNames :\nUse the # character in an expression to dereference an attribute name. For example, consider the following attribute name:\nThe name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see Reserved Words in the Amazon DynamoDB Developer Guide ). To work around this, you could specify the following for ExpressionAttributeNames :\nYou could then use this substitution in an expression, as in this example:\nFor more information on expression attribute names, see Specifying Item Attributes in the Amazon DynamoDB Developer Guide .",
            "Type": "dict",
            "Required": false,
            "dict variables": [
                {},
                {},
                {},
                {},
                {}
            ]
        },
        "ExpressionAttributeValues": {
            "Description": "One or more values that can be substituted in an expression.\nUse the : (colon) character in an expression to dereference an attribute value. For example, suppose that you wanted to check whether the value of the ProductStatus attribute was one of the following:\nYou would first need to specify ExpressionAttributeValues as follows:\nYou could then use these values in an expression, such as this:\nFor more information on expression attribute values, see Condition Expressions in the Amazon DynamoDB Developer Guide .",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        }
    },
    "delete_table": {
        "TableName": {
            "Description": "The name of the table to delete.",
            "Type": "string",
            "Required": true
        }
    },
    "describe_backup": {
        "BackupArn": {
            "Description": "The Amazon Resource Name (ARN) associated with the backup.",
            "Type": "string",
            "Required": true
        }
    },
    "describe_continuous_backups": {
        "TableName": {
            "Description": "Name of the table for which the customer wants to check the continuous backups and point in time recovery settings.",
            "Type": "string",
            "Required": true
        }
    },
    "describe_contributor_insights": {
        "TableName": {
            "Description": "The name of the table to describe.",
            "Type": "string",
            "Required": true
        },
        "IndexName": {
            "Description": "The name of the global secondary index to describe, if applicable.",
            "Type": "string",
            "Required": false
        }
    },
    "describe_endpoints": "No parameters defined",
    "describe_export": {
        "ExportArn": {
            "Description": "The Amazon Resource Name (ARN) associated with the export.",
            "Type": "string",
            "Required": true
        }
    },
    "describe_global_table": {
        "GlobalTableName": {
            "Description": "The name of the global table.",
            "Type": "string",
            "Required": true
        }
    },
    "describe_global_table_settings": {
        "GlobalTableName": {
            "Description": "The name of the global table to describe.",
            "Type": "string",
            "Required": true
        }
    },
    "describe_import": {
        "ImportArn": {
            "Description": "The Amazon Resource Name (ARN) associated with the table you're importing to.",
            "Type": "string",
            "Required": true
        }
    },
    "describe_kinesis_streaming_destination": {
        "TableName": {
            "Description": "The name of the table being described.",
            "Type": "string",
            "Required": true
        }
    },
    "describe_limits": "No parameters defined",
    "describe_table": {
        "TableName": {
            "Description": "The name of the table to describe.",
            "Type": "string",
            "Required": true
        }
    },
    "describe_table_replica_auto_scaling": {
        "TableName": {
            "Description": "The name of the table.",
            "Type": "string",
            "Required": true
        }
    },
    "describe_time_to_live": {
        "TableName": {
            "Description": "The name of the table to be described.",
            "Type": "string",
            "Required": true
        }
    },
    "disable_kinesis_streaming_destination": {
        "TableName": {
            "Description": "The name of the DynamoDB table.",
            "Type": "string",
            "Required": true
        },
        "StreamArn": {
            "Description": "The ARN for a Kinesis data stream.",
            "Type": "string",
            "Required": true
        }
    },
    "enable_kinesis_streaming_destination": {
        "TableName": {
            "Description": "The name of the DynamoDB table.",
            "Type": "string",
            "Required": true
        },
        "StreamArn": {
            "Description": "The ARN for a Kinesis data stream.",
            "Type": "string",
            "Required": true
        }
    },
    "execute_statement": {
        "Statement": {
            "Description": "The PartiQL statement representing the operation to run.",
            "Type": "string",
            "Required": true
        },
        "Parameters": {
            "Description": "The parameters for the PartiQL statement, if any.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "ConsistentRead": {
            "Description": "The consistency of a read operation. If set to true , then a strongly consistent read is used; otherwise, an eventually consistent read is used.",
            "Type": "boolean",
            "Required": false
        },
        "NextToken": {
            "Description": "Set this value to get remaining results, if NextToken was returned in the statement response.",
            "Type": "string",
            "Required": false
        },
        "ReturnConsumedCapacity": {
            "Description": "Determines the level of detail about either provisioned or on-demand throughput consumption that is returned in the response:",
            "Type": "string",
            "Required": false,
            "string variables": {}
        },
        "Limit": {
            "Description": "The maximum number of items to evaluate (not necessarily the number of matching items). If DynamoDB processes the number of items up to the limit while processing the results, it stops the operation and returns the matching values up to that point, along with a key in LastEvaluatedKey to apply in a subsequent operation so you can pick up where you left off. Also, if the processed dataset size exceeds 1 MB before DynamoDB reaches this limit, it stops the operation and returns the matching values up to the limit, and a key in LastEvaluatedKey to apply in a subsequent operation to continue the operation.",
            "Type": "integer",
            "Required": false
        }
    },
    "execute_transaction": {
        "TransactStatements": {
            "Description": "The list of PartiQL statements representing the transaction to run.",
            "Type": "list",
            "Required": true,
            "list variables": {}
        },
        "ClientRequestToken": {
            "Description": "Set this value to get remaining results, if NextToken was returned in the statement response.\nThis field is autopopulated if not provided.",
            "Type": "string",
            "Required": false
        },
        "ReturnConsumedCapacity": {
            "Description": "Determines the level of detail about either provisioned or on-demand throughput consumption that is returned in the response. For more information, see TransactGetItems and TransactWriteItems .",
            "Type": "string",
            "Required": false
        }
    },
    "export_table_to_point_in_time": {
        "TableArn": {
            "Description": "The Amazon Resource Name (ARN) associated with the table to export.",
            "Type": "string",
            "Required": true
        },
        "ExportTime": {
            "Description": "Time in the past from which to export table data, counted in seconds from the start of the Unix epoch. The table export will be a snapshot of the table's state at this point in time.",
            "Type": "datetime",
            "Required": false
        },
        "ClientToken": {
            "Description": "Providing a ClientToken makes the call to ExportTableToPointInTimeInput idempotent, meaning that multiple identical calls have the same effect as one single call.\nA client token is valid for 8 hours after the first request that uses it is completed. After 8 hours, any request with the same client token is treated as a new request. Do not resubmit the same request with the same client token for more than 8 hours, or the result might not be idempotent.\nIf you submit a request with the same client token but a change in other parameters within the 8-hour idempotency window, DynamoDB returns an ImportConflictException .\nThis field is autopopulated if not provided.",
            "Type": "string",
            "Required": false
        },
        "S3Bucket": {
            "Description": "The name of the Amazon S3 bucket to export the snapshot to.",
            "Type": "string",
            "Required": true
        },
        "S3BucketOwner": {
            "Description": "The ID of the Amazon Web Services account that owns the bucket the export will be stored in.",
            "Type": "string",
            "Required": false
        },
        "S3Prefix": {
            "Description": "The Amazon S3 bucket prefix to use as the file name and path of the exported snapshot.",
            "Type": "string",
            "Required": false
        },
        "S3SseAlgorithm": {
            "Description": "Type of encryption used on the bucket where export data will be stored. Valid values for S3SseAlgorithm are:",
            "Type": "string",
            "Required": false,
            "string variables": {}
        },
        "S3SseKmsKeyId": {
            "Description": "The ID of the KMS managed key used to encrypt the S3 bucket where export data will be stored (if applicable).",
            "Type": "string",
            "Required": false
        },
        "ExportFormat": {
            "Description": "The format for the exported data. Valid values for ExportFormat are DYNAMODB_JSON or ION .",
            "Type": "string",
            "Required": false
        }
    },
    "get_item": {
        "Key": {
            "Description": "A map of attribute names to AttributeValue objects, representing the primary key of the item to retrieve.\nFor the primary key, you must provide all of the attributes. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide values for both the partition key and the sort key.",
            "Type": "dict",
            "Required": true,
            "dict variables": {}
        },
        "AttributesToGet": {
            "Description": "This is a legacy parameter. Use ProjectionExpression instead. For more information, see AttributesToGet in the Amazon DynamoDB Developer Guide .",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "ConsistentRead": {
            "Description": "Determines the read consistency model: If set to true , then the operation uses strongly consistent reads; otherwise, the operation uses eventually consistent reads.",
            "Type": "boolean",
            "Required": false
        },
        "ReturnConsumedCapacity": {
            "Description": "Determines the level of detail about either provisioned or on-demand throughput consumption that is returned in the response:",
            "Type": "string",
            "Required": false,
            "string variables": {}
        },
        "ProjectionExpression": {
            "Description": "A string that identifies one or more attributes to retrieve from the table. These attributes can include scalars, sets, or elements of a JSON document. The attributes in the expression must be separated by commas.\nIf no attribute names are specified, then all attributes are returned. If any of the requested attributes are not found, they do not appear in the result.\nFor more information, see Specifying Item Attributes in the Amazon DynamoDB Developer Guide .",
            "Type": "string",
            "Required": false
        },
        "ExpressionAttributeNames": {
            "Description": "One or more substitution tokens for attribute names in an expression. The following are some use cases for using ExpressionAttributeNames :\nUse the # character in an expression to dereference an attribute name. For example, consider the following attribute name:\nThe name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see Reserved Words in the Amazon DynamoDB Developer Guide ). To work around this, you could specify the following for ExpressionAttributeNames :\nYou could then use this substitution in an expression, as in this example:\nFor more information on expression attribute names, see Specifying Item Attributes in the Amazon DynamoDB Developer Guide .",
            "Type": "dict",
            "Required": false,
            "dict variables": [
                {},
                {},
                {},
                {},
                {}
            ]
        }
    },
    "import_table": {
        "ClientToken": {
            "Description": "Providing a ClientToken makes the call to ImportTableInput idempotent, meaning that multiple identical calls have the same effect as one single call.\nA client token is valid for 8 hours after the first request that uses it is completed. After 8 hours, any request with the same client token is treated as a new request. Do not resubmit the same request with the same client token for more than 8 hours, or the result might not be idempotent.\nIf you submit a request with the same client token but a change in other parameters within the 8-hour idempotency window, DynamoDB returns an IdempotentParameterMismatch exception.\nThis field is autopopulated if not provided.",
            "Type": "string",
            "Required": false
        },
        "S3BucketSource": {
            "Description": "The S3 bucket that provides the source for the import.",
            "Type": "dict",
            "Required": true,
            "dict variables": {}
        },
        "InputFormat": {
            "Description": "The format of the source data. Valid values for ImportFormat are CSV, DYNAMODB_JSON or ION .",
            "Type": "string",
            "Required": true
        },
        "InputFormatOptions": {
            "Description": "Additional properties that specify how the input is formatted,",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "InputCompressionType": {
            "Description": "Type of compression to be used on the input coming from the imported table.",
            "Type": "string",
            "Required": false
        },
        "TableCreationParameters": {
            "Description": "Parameters for the table to import the data into.",
            "Type": "dict",
            "Required": true,
            "dict variables": {}
        }
    },
    "list_backups": {
        "TableName": {
            "Description": "The backups from the table specified by TableName are listed.",
            "Type": "string",
            "Required": false
        },
        "Limit": {
            "Description": "Maximum number of backups to return at once.",
            "Type": "integer",
            "Required": false
        },
        "TimeRangeLowerBound": {
            "Description": "Only backups created after this time are listed. TimeRangeLowerBound is inclusive.",
            "Type": "datetime",
            "Required": false
        },
        "TimeRangeUpperBound": {
            "Description": "Only backups created before this time are listed. TimeRangeUpperBound is exclusive.",
            "Type": "datetime",
            "Required": false
        },
        "ExclusiveStartBackupArn": {
            "Description": "LastEvaluatedBackupArn is the Amazon Resource Name (ARN) of the backup last evaluated when the current page of results was returned, inclusive of the current page of results. This value may be specified as the ExclusiveStartBackupArn of a new ListBackups operation in order to fetch the next page of results.",
            "Type": "string",
            "Required": false
        },
        "BackupType": {
            "Description": "The backups from the table specified by BackupType are listed.\nWhere BackupType can be:",
            "Type": "string",
            "Required": false,
            "string variables": {}
        }
    },
    "list_contributor_insights": {
        "TableName": {
            "Description": "The name of the table.",
            "Type": "string",
            "Required": false
        },
        "NextToken": {
            "Description": "A token to for the desired page, if there is one.",
            "Type": "string",
            "Required": false
        },
        "MaxResults": {
            "Description": "Maximum number of results to return per page.",
            "Type": "integer",
            "Required": false
        }
    },
    "list_exports": {
        "TableArn": {
            "Description": "The Amazon Resource Name (ARN) associated with the exported table.",
            "Type": "string",
            "Required": false
        },
        "MaxResults": {
            "Description": "Maximum number of results to return per page.",
            "Type": "integer",
            "Required": false
        },
        "NextToken": {
            "Description": "An optional string that, if supplied, must be copied from the output of a previous call to ListExports . When provided in this manner, the API fetches the next page of results.",
            "Type": "string",
            "Required": false
        }
    },
    "list_global_tables": {
        "ExclusiveStartGlobalTableName": {
            "Description": "The first global table name that this operation will evaluate.",
            "Type": "string",
            "Required": false
        },
        "Limit": {
            "Description": "The maximum number of table names to return, if the parameter is not specified DynamoDB defaults to 100.\nIf the number of global tables DynamoDB finds reaches this limit, it stops the operation and returns the table names collected up to that point, with a table name in the LastEvaluatedGlobalTableName to apply in a subsequent operation to the ExclusiveStartGlobalTableName parameter.",
            "Type": "integer",
            "Required": false
        },
        "RegionName": {
            "Description": "Lists the global tables in a specific Region.",
            "Type": "string",
            "Required": false
        }
    },
    "list_imports": {
        "TableArn": {
            "Description": "The Amazon Resource Name (ARN) associated with the table that was imported to.",
            "Type": "string",
            "Required": false
        },
        "PageSize": {
            "Description": "The number of ImportSummary objects returned in a single page.",
            "Type": "integer",
            "Required": false
        },
        "NextToken": {
            "Description": "An optional string that, if supplied, must be copied from the output of a previous call to ListImports . When provided in this manner, the API fetches the next page of results.",
            "Type": "string",
            "Required": false
        }
    },
    "list_tables": {
        "ExclusiveStartTableName": {
            "Description": "The first table name that this operation will evaluate. Use the value that was returned for LastEvaluatedTableName in a previous operation, so that you can obtain the next page of results.",
            "Type": "string",
            "Required": false
        },
        "Limit": {
            "Description": "A maximum number of table names to return. If this parameter is not specified, the limit is 100.",
            "Type": "integer",
            "Required": false
        }
    },
    "list_tags_of_resource": {
        "ResourceArn": {
            "Description": "The Amazon DynamoDB resource with tags to be listed. This value is an Amazon Resource Name (ARN).",
            "Type": "string",
            "Required": true
        },
        "NextToken": {
            "Description": "An optional string that, if supplied, must be copied from the output of a previous call to ListTagOfResource. When provided in this manner, this API fetches the next page of results.",
            "Type": "string",
            "Required": false
        }
    },
    "put_item": {
        "Item": {
            "Description": "A map of attribute name/value pairs, one for each attribute. Only the primary key attributes are required; you can optionally provide other attribute name-value pairs for the item.\nYou must provide all of the attributes for the primary key. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide both values for both the partition key and the sort key.\nIf you specify any attributes that are part of an index key, then the data types for those attributes must match those of the schema in the table's attribute definition.\nEmpty String and Binary attribute values are allowed. Attribute values of type String and Binary must have a length greater than zero if the attribute is used as a key attribute for a table or index.\nFor more information about primary keys, see Primary Key in the Amazon DynamoDB Developer Guide .\nEach element in the Item map is an AttributeValue object.",
            "Type": "dict",
            "Required": true,
            "dict variables": {}
        },
        "Expected": {
            "Description": "This is a legacy parameter. Use ConditionExpression instead. For more information, see Expected in the Amazon DynamoDB Developer Guide .",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "ReturnValues": {
            "Description": "Use ReturnValues if you want to get the item attributes as they appeared before they were updated with the PutItem request. For PutItem, the valid values are:\nThe values returned are strongly consistent.\nThere is no additional cost associated with requesting a return value aside from the small network and processing overhead of receiving a larger response. No read capacity units are consumed.",
            "Type": "string",
            "Required": false,
            "string variables": {}
        },
        "ReturnConsumedCapacity": {
            "Description": "Determines the level of detail about either provisioned or on-demand throughput consumption that is returned in the response:",
            "Type": "string",
            "Required": false,
            "string variables": {}
        },
        "ReturnItemCollectionMetrics": {
            "Description": "Determines whether item collection metrics are returned. If set to SIZE , the response includes statistics about item collections, if any, that were modified during the operation are returned in the response. If set to NONE (the default), no statistics are returned.",
            "Type": "string",
            "Required": false
        },
        "ConditionalOperator": {
            "Description": "This is a legacy parameter. Use ConditionExpression instead. For more information, see ConditionalOperator in the Amazon DynamoDB Developer Guide .",
            "Type": "string",
            "Required": false
        },
        "ConditionExpression": {
            "Description": "The condition(s) an attribute(s) must meet. Valid conditions are listed in the DynamoDB Reference Guide.",
            "Type": "condition from boto3.dynamodb.conditions.Attr method",
            "Required": false
        },
        "ExpressionAttributeNames": {
            "Description": "One or more substitution tokens for attribute names in an expression. The following are some use cases for using ExpressionAttributeNames :\nUse the # character in an expression to dereference an attribute name. For example, consider the following attribute name:\nThe name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see Reserved Words in the Amazon DynamoDB Developer Guide ). To work around this, you could specify the following for ExpressionAttributeNames :\nYou could then use this substitution in an expression, as in this example:\nFor more information on expression attribute names, see Specifying Item Attributes in the Amazon DynamoDB Developer Guide .",
            "Type": "dict",
            "Required": false,
            "dict variables": [
                {},
                {},
                {},
                {},
                {}
            ]
        },
        "ExpressionAttributeValues": {
            "Description": "One or more values that can be substituted in an expression.\nUse the : (colon) character in an expression to dereference an attribute value. For example, suppose that you wanted to check whether the value of the ProductStatus attribute was one of the following:\nYou would first need to specify ExpressionAttributeValues as follows:\nYou could then use these values in an expression, such as this:\nFor more information on expression attribute values, see Condition Expressions in the Amazon DynamoDB Developer Guide .",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        }
    },
    "query": {
        "IndexName": {
            "Description": "The name of an index to query. This index can be any local secondary index or global secondary index on the table. Note that if you use the IndexName parameter, you must also provide TableName.",
            "Type": "string",
            "Required": false
        },
        "Select": {
            "Description": "The attributes to be returned in the result. You can retrieve all item attributes, specific item attributes, the count of matching items, or in the case of an index, some or all of the attributes projected into the index.\nIf neither Select nor ProjectionExpression are specified, DynamoDB defaults to ALL_ATTRIBUTES when accessing a table, and ALL_PROJECTED_ATTRIBUTES when accessing an index. You cannot use both Select and ProjectionExpression together in a single request, unless the value for Select is SPECIFIC_ATTRIBUTES. (This usage is equivalent to specifying ProjectionExpression without any value for Select .)",
            "Type": "string",
            "Required": false,
            "string variables": {}
        },
        "AttributesToGet": {
            "Description": "This is a legacy parameter. Use ProjectionExpression instead. For more information, see AttributesToGet in the Amazon DynamoDB Developer Guide .",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "Limit": {
            "Description": "The maximum number of items to evaluate (not necessarily the number of matching items). If DynamoDB processes the number of items up to the limit while processing the results, it stops the operation and returns the matching values up to that point, and a key in LastEvaluatedKey to apply in a subsequent operation, so that you can pick up where you left off. Also, if the processed dataset size exceeds 1 MB before DynamoDB reaches this limit, it stops the operation and returns the matching values up to the limit, and a key in LastEvaluatedKey to apply in a subsequent operation to continue the operation. For more information, see Query and Scan in the Amazon DynamoDB Developer Guide .",
            "Type": "integer",
            "Required": false
        },
        "ConsistentRead": {
            "Description": "Determines the read consistency model: If set to true, then the operation uses strongly consistent reads; otherwise, the operation uses eventually consistent reads.\nStrongly consistent reads are not supported on global secondary indexes. If you query a global secondary index with ConsistentRead set to true, you will receive a ValidationException .",
            "Type": "boolean",
            "Required": false
        },
        "KeyConditions": {
            "Description": "This is a legacy parameter. Use KeyConditionExpression instead. For more information, see KeyConditions in the Amazon DynamoDB Developer Guide .",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "QueryFilter": {
            "Description": "This is a legacy parameter. Use FilterExpression instead. For more information, see QueryFilter in the Amazon DynamoDB Developer Guide .",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "ConditionalOperator": {
            "Description": "This is a legacy parameter. Use FilterExpression instead. For more information, see ConditionalOperator in the Amazon DynamoDB Developer Guide .",
            "Type": "string",
            "Required": false
        },
        "ScanIndexForward": {
            "Description": "Specifies the order for index traversal: If true (default), the traversal is performed in ascending order; if false, the traversal is performed in descending order.\nItems with the same partition key value are stored in sorted order by sort key. If the sort key data type is Number, the results are stored in numeric order. For type String, the results are stored in order of UTF-8 bytes. For type Binary, DynamoDB treats each byte of the binary data as unsigned.\nIf ScanIndexForward is true, DynamoDB returns the results in the order in which they are stored (by sort key value). This is the default behavior. If ScanIndexForward is false, DynamoDB reads the results in reverse order by sort key value, and then returns the results to the client.",
            "Type": "boolean",
            "Required": false
        },
        "ExclusiveStartKey": {
            "Description": "The primary key of the first item that this operation will evaluate. Use the value that was returned for LastEvaluatedKey in the previous operation.\nThe data type for ExclusiveStartKey must be String, Number, or Binary. No set data types are allowed.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "ReturnConsumedCapacity": {
            "Description": "Determines the level of detail about either provisioned or on-demand throughput consumption that is returned in the response:",
            "Type": "string",
            "Required": false,
            "string variables": {}
        },
        "ProjectionExpression": {
            "Description": "A string that identifies one or more attributes to retrieve from the table. These attributes can include scalars, sets, or elements of a JSON document. The attributes in the expression must be separated by commas.\nIf no attribute names are specified, then all attributes will be returned. If any of the requested attributes are not found, they will not appear in the result.\nFor more information, see Accessing Item Attributes in the Amazon DynamoDB Developer Guide .",
            "Type": "string",
            "Required": false
        },
        "FilterExpression": {
            "Description": "The condition(s) an attribute(s) must meet. Valid conditions are listed in the DynamoDB Reference Guide.",
            "Type": "condition from boto3.dynamodb.conditions.Attr method",
            "Required": false
        },
        "KeyConditionExpression": {
            "Description": "The condition(s) a key(s) must meet. Valid conditions are listed in the DynamoDB Reference Guide.",
            "Type": "condition from boto3.dynamodb.conditions.Key method",
            "Required": false
        },
        "ExpressionAttributeNames": {
            "Description": "One or more substitution tokens for attribute names in an expression. The following are some use cases for using ExpressionAttributeNames :\nUse the # character in an expression to dereference an attribute name. For example, consider the following attribute name:\nThe name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see Reserved Words in the Amazon DynamoDB Developer Guide ). To work around this, you could specify the following for ExpressionAttributeNames :\nYou could then use this substitution in an expression, as in this example:\nFor more information on expression attribute names, see Specifying Item Attributes in the Amazon DynamoDB Developer Guide .",
            "Type": "dict",
            "Required": false,
            "dict variables": [
                {},
                {},
                {},
                {},
                {}
            ]
        },
        "ExpressionAttributeValues": {
            "Description": "One or more values that can be substituted in an expression.\nUse the : (colon) character in an expression to dereference an attribute value. For example, suppose that you wanted to check whether the value of the ProductStatus attribute was one of the following:\nYou would first need to specify ExpressionAttributeValues as follows:\nYou could then use these values in an expression, such as this:\nFor more information on expression attribute values, see Specifying Conditions in the Amazon DynamoDB Developer Guide .",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        }
    },
    "restore_table_from_backup": {
        "TargetTableName": {
            "Description": "The name of the new table to which the backup must be restored.",
            "Type": "string",
            "Required": true
        },
        "BackupArn": {
            "Description": "The Amazon Resource Name (ARN) associated with the backup.",
            "Type": "string",
            "Required": true
        },
        "BillingModeOverride": {
            "Description": "The billing mode of the restored table.",
            "Type": "string",
            "Required": false
        },
        "GlobalSecondaryIndexOverride": {
            "Description": "List of global secondary indexes for the restored table. The indexes provided should match existing secondary indexes. You can choose to exclude some or all of the indexes at the time of restore.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "LocalSecondaryIndexOverride": {
            "Description": "List of local secondary indexes for the restored table. The indexes provided should match existing secondary indexes. You can choose to exclude some or all of the indexes at the time of restore.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "ProvisionedThroughputOverride": {
            "Description": "Provisioned throughput settings for the restored table.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "SSESpecificationOverride": {
            "Description": "The new server-side encryption settings for the restored table.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        }
    },
    "restore_table_to_point_in_time": {
        "SourceTableArn": {
            "Description": "The DynamoDB table that will be restored. This value is an Amazon Resource Name (ARN).",
            "Type": "string",
            "Required": false
        },
        "SourceTableName": {
            "Description": "Name of the source table that is being restored.",
            "Type": "string",
            "Required": false
        },
        "TargetTableName": {
            "Description": "The name of the new table to which it must be restored to.",
            "Type": "string",
            "Required": true
        },
        "UseLatestRestorableTime": {
            "Description": "Restore the table to the latest possible time. LatestRestorableDateTime is typically 5 minutes before the current time.",
            "Type": "boolean",
            "Required": false
        },
        "RestoreDateTime": {
            "Description": "Time in the past to restore the table to.",
            "Type": "datetime",
            "Required": false
        },
        "BillingModeOverride": {
            "Description": "The billing mode of the restored table.",
            "Type": "string",
            "Required": false
        },
        "GlobalSecondaryIndexOverride": {
            "Description": "List of global secondary indexes for the restored table. The indexes provided should match existing secondary indexes. You can choose to exclude some or all of the indexes at the time of restore.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "LocalSecondaryIndexOverride": {
            "Description": "List of local secondary indexes for the restored table. The indexes provided should match existing secondary indexes. You can choose to exclude some or all of the indexes at the time of restore.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "ProvisionedThroughputOverride": {
            "Description": "Provisioned throughput settings for the restored table.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "SSESpecificationOverride": {
            "Description": "The new server-side encryption settings for the restored table.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        }
    },
    "scan": {
        "IndexName": {
            "Description": "The name of a secondary index to scan. This index can be any local secondary index or global secondary index. Note that if you use the IndexName parameter, you must also provide TableName .",
            "Type": "string",
            "Required": false
        },
        "AttributesToGet": {
            "Description": "This is a legacy parameter. Use ProjectionExpression instead. For more information, see AttributesToGet in the Amazon DynamoDB Developer Guide .",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "Limit": {
            "Description": "The maximum number of items to evaluate (not necessarily the number of matching items). If DynamoDB processes the number of items up to the limit while processing the results, it stops the operation and returns the matching values up to that point, and a key in LastEvaluatedKey to apply in a subsequent operation, so that you can pick up where you left off. Also, if the processed dataset size exceeds 1 MB before DynamoDB reaches this limit, it stops the operation and returns the matching values up to the limit, and a key in LastEvaluatedKey to apply in a subsequent operation to continue the operation. For more information, see Working with Queries in the Amazon DynamoDB Developer Guide .",
            "Type": "integer",
            "Required": false
        },
        "Select": {
            "Description": "The attributes to be returned in the result. You can retrieve all item attributes, specific item attributes, the count of matching items, or in the case of an index, some or all of the attributes projected into the index.\nIf neither Select nor ProjectionExpression are specified, DynamoDB defaults to ALL_ATTRIBUTES when accessing a table, and ALL_PROJECTED_ATTRIBUTES when accessing an index. You cannot use both Select and ProjectionExpression together in a single request, unless the value for Select is SPECIFIC_ATTRIBUTES. (This usage is equivalent to specifying ProjectionExpression without any value for Select .)",
            "Type": "string",
            "Required": false,
            "string variables": {}
        },
        "ScanFilter": {
            "Description": "This is a legacy parameter. Use FilterExpression instead. For more information, see ScanFilter in the Amazon DynamoDB Developer Guide .",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "ConditionalOperator": {
            "Description": "This is a legacy parameter. Use FilterExpression instead. For more information, see ConditionalOperator in the Amazon DynamoDB Developer Guide .",
            "Type": "string",
            "Required": false
        },
        "ExclusiveStartKey": {
            "Description": "The primary key of the first item that this operation will evaluate. Use the value that was returned for LastEvaluatedKey in the previous operation.\nThe data type for ExclusiveStartKey must be String, Number or Binary. No set data types are allowed.\nIn a parallel scan, a Scan request that includes ExclusiveStartKey must specify the same segment whose previous Scan returned the corresponding value of LastEvaluatedKey .",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "ReturnConsumedCapacity": {
            "Description": "Determines the level of detail about either provisioned or on-demand throughput consumption that is returned in the response:",
            "Type": "string",
            "Required": false,
            "string variables": {}
        },
        "TotalSegments": {
            "Description": "For a parallel Scan request, TotalSegments represents the total number of segments into which the Scan operation will be divided. The value of TotalSegments corresponds to the number of application workers that will perform the parallel scan. For example, if you want to use four application threads to scan a table or an index, specify a TotalSegments value of 4.\nThe value for TotalSegments must be greater than or equal to 1, and less than or equal to 1000000. If you specify a TotalSegments value of 1, the Scan operation will be sequential rather than parallel.\nIf you specify TotalSegments, you must also specify Segment .",
            "Type": "integer",
            "Required": false
        },
        "Segment": {
            "Description": "For a parallel Scan request, Segment identifies an individual segment to be scanned by an application worker.\nSegment IDs are zero-based, so the first segment is always 0. For example, if you want to use four application threads to scan a table or an index, then the first thread specifies a Segment value of 0, the second thread specifies 1, and so on.\nThe value of LastEvaluatedKey returned from a parallel Scan request must be used as ExclusiveStartKey with the same segment ID in a subsequent Scan operation.\nThe value for Segment must be greater than or equal to 0, and less than the value provided for TotalSegments .\nIf you provide Segment, you must also provide TotalSegments .",
            "Type": "integer",
            "Required": false
        },
        "ProjectionExpression": {
            "Description": "A string that identifies one or more attributes to retrieve from the specified table or index. These attributes can include scalars, sets, or elements of a JSON document. The attributes in the expression must be separated by commas.\nIf no attribute names are specified, then all attributes will be returned. If any of the requested attributes are not found, they will not appear in the result.\nFor more information, see Specifying Item Attributes in the Amazon DynamoDB Developer Guide .",
            "Type": "string",
            "Required": false
        },
        "FilterExpression": {
            "Description": "The condition(s) an attribute(s) must meet. Valid conditions are listed in the DynamoDB Reference Guide.",
            "Type": "condition from boto3.dynamodb.conditions.Attr method",
            "Required": false
        },
        "ExpressionAttributeNames": {
            "Description": "One or more substitution tokens for attribute names in an expression. The following are some use cases for using ExpressionAttributeNames :\nUse the # character in an expression to dereference an attribute name. For example, consider the following attribute name:\nThe name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see Reserved Words in the Amazon DynamoDB Developer Guide ). To work around this, you could specify the following for ExpressionAttributeNames :\nYou could then use this substitution in an expression, as in this example:\nFor more information on expression attribute names, see Specifying Item Attributes in the Amazon DynamoDB Developer Guide .",
            "Type": "dict",
            "Required": false,
            "dict variables": [
                {},
                {},
                {},
                {},
                {}
            ]
        },
        "ExpressionAttributeValues": {
            "Description": "One or more values that can be substituted in an expression.\nUse the : (colon) character in an expression to dereference an attribute value. For example, suppose that you wanted to check whether the value of the ProductStatus attribute was one of the following:\nYou would first need to specify ExpressionAttributeValues as follows:\nYou could then use these values in an expression, such as this:\nFor more information on expression attribute values, see Condition Expressions in the Amazon DynamoDB Developer Guide .",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "ConsistentRead": {
            "Description": "A Boolean value that determines the read consistency model during the scan:\nThe default setting for ConsistentRead is false .\nThe ConsistentRead parameter is not supported on global secondary indexes. If you scan a global secondary index with ConsistentRead set to true, you will receive a ValidationException .",
            "Type": "boolean",
            "Required": false,
            "boolean variables": {}
        }
    },
    "tag_resource": {
        "ResourceArn": {
            "Description": "Identifies the Amazon DynamoDB resource to which tags should be added. This value is an Amazon Resource Name (ARN).",
            "Type": "string",
            "Required": true
        },
        "Tags": {
            "Description": "The tags to be assigned to the Amazon DynamoDB resource.",
            "Type": "list",
            "Required": true,
            "list variables": {}
        }
    },
    "transact_get_items": {
        "TransactItems": {
            "Description": "An ordered array of up to 25 TransactGetItem objects, each of which contains a Get structure.",
            "Type": "list",
            "Required": true,
            "list variables": {}
        },
        "ReturnConsumedCapacity": {
            "Description": "A value of TOTAL causes consumed capacity information to be returned, and a value of NONE prevents that information from being returned. No other value is valid.",
            "Type": "string",
            "Required": false
        }
    },
    "transact_write_items": {
        "TransactItems": {
            "Description": "An ordered array of up to 25 TransactWriteItem objects, each of which contains a ConditionCheck, Put, Update, or Delete object. These can operate on items in different tables, but the tables must reside in the same Amazon Web Services account and Region, and no two of them can operate on the same item.",
            "Type": "list",
            "Required": true,
            "list variables": {}
        },
        "ReturnConsumedCapacity": {
            "Description": "Determines the level of detail about either provisioned or on-demand throughput consumption that is returned in the response:",
            "Type": "string",
            "Required": false,
            "string variables": {}
        },
        "ReturnItemCollectionMetrics": {
            "Description": "Determines whether item collection metrics are returned. If set to SIZE , the response includes statistics about item collections (if any), that were modified during the operation and are returned in the response. If set to NONE (the default), no statistics are returned.",
            "Type": "string",
            "Required": false
        },
        "ClientRequestToken": {
            "Description": "Providing a ClientRequestToken makes the call to TransactWriteItems idempotent, meaning that multiple identical calls have the same effect as one single call.\nAlthough multiple identical calls using the same client request token produce the same result on the server (no side effects), the responses to the calls might not be the same. If the ReturnConsumedCapacity&gt; parameter is set, then the initial TransactWriteItems call returns the amount of write capacity units consumed in making the changes. Subsequent TransactWriteItems calls with the same client token return the number of read capacity units consumed in reading the item.\nA client request token is valid for 10 minutes after the first request that uses it is completed. After 10 minutes, any request with the same client token is treated as a new request. Do not resubmit the same request with the same client token for more than 10 minutes, or the result might not be idempotent.\nIf you submit a request with the same client token but a change in other parameters within the 10-minute idempotency window, DynamoDB returns an IdempotentParameterMismatch exception.\nThis field is autopopulated if not provided.",
            "Type": "string",
            "Required": false
        }
    },
    "untag_resource": {
        "ResourceArn": {
            "Description": "The DynamoDB resource that the tags will be removed from. This value is an Amazon Resource Name (ARN).",
            "Type": "string",
            "Required": true
        },
        "TagKeys": {
            "Description": "A list of tag keys. Existing tags of the resource whose keys are members of this list will be removed from the DynamoDB resource.",
            "Type": "list",
            "Required": true,
            "list variables": {}
        }
    },
    "update_continuous_backups": {
        "TableName": {
            "Description": "The name of the table.",
            "Type": "string",
            "Required": true
        },
        "PointInTimeRecoverySpecification": {
            "Description": "Represents the settings used to enable point in time recovery.",
            "Type": "dict",
            "Required": true,
            "dict variables": {}
        }
    },
    "update_contributor_insights": {
        "TableName": {
            "Description": "The name of the table.",
            "Type": "string",
            "Required": true
        },
        "IndexName": {
            "Description": "The global secondary index name, if applicable.",
            "Type": "string",
            "Required": false
        },
        "ContributorInsightsAction": {
            "Description": "Represents the contributor insights action.",
            "Type": "string",
            "Required": true
        }
    },
    "update_global_table": {
        "GlobalTableName": {
            "Description": "The global table name.",
            "Type": "string",
            "Required": true
        },
        "ReplicaUpdates": {
            "Description": "A list of Regions that should be added or removed from the global table.",
            "Type": "list",
            "Required": true,
            "list variables": {}
        }
    },
    "update_global_table_settings": {
        "GlobalTableName": {
            "Description": "The name of the global table",
            "Type": "string",
            "Required": true
        },
        "GlobalTableBillingMode": {
            "Description": "The billing mode of the global table. If GlobalTableBillingMode is not specified, the global table defaults to PROVISIONED capacity billing mode.",
            "Type": "string",
            "Required": false,
            "string variables": {}
        },
        "GlobalTableProvisionedWriteCapacityUnits": {
            "Description": "The maximum number of writes consumed per second before DynamoDB returns a ThrottlingException.",
            "Type": "integer",
            "Required": false
        },
        "GlobalTableProvisionedWriteCapacityAutoScalingSettingsUpdate": {
            "Description": "Auto scaling settings for managing provisioned write capacity for the global table.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "GlobalTableGlobalSecondaryIndexSettingsUpdate": {
            "Description": "Represents the settings of a global secondary index for a global table that will be modified.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "ReplicaSettingsUpdate": {
            "Description": "Represents the settings for a global table in a Region that will be modified.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        }
    },
    "update_item": {
        "Key": {
            "Description": "The primary key of the item to be updated. Each element consists of an attribute name and a value for that attribute.\nFor the primary key, you must provide all of the attributes. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide values for both the partition key and the sort key.",
            "Type": "dict",
            "Required": true,
            "dict variables": {}
        },
        "AttributeUpdates": {
            "Description": "This is a legacy parameter. Use UpdateExpression instead. For more information, see AttributeUpdates in the Amazon DynamoDB Developer Guide .",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "Expected": {
            "Description": "This is a legacy parameter. Use ConditionExpression instead. For more information, see Expected in the Amazon DynamoDB Developer Guide .",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "ConditionalOperator": {
            "Description": "This is a legacy parameter. Use ConditionExpression instead. For more information, see ConditionalOperator in the Amazon DynamoDB Developer Guide .",
            "Type": "string",
            "Required": false
        },
        "ReturnValues": {
            "Description": "Use ReturnValues if you want to get the item attributes as they appear before or after they are updated. For UpdateItem, the valid values are:\nThere is no additional cost associated with requesting a return value aside from the small network and processing overhead of receiving a larger response. No read capacity units are consumed.\nThe values returned are strongly consistent.",
            "Type": "string",
            "Required": false,
            "string variables": {}
        },
        "ReturnConsumedCapacity": {
            "Description": "Determines the level of detail about either provisioned or on-demand throughput consumption that is returned in the response:",
            "Type": "string",
            "Required": false,
            "string variables": {}
        },
        "ReturnItemCollectionMetrics": {
            "Description": "Determines whether item collection metrics are returned. If set to SIZE , the response includes statistics about item collections, if any, that were modified during the operation are returned in the response. If set to NONE (the default), no statistics are returned.",
            "Type": "string",
            "Required": false
        },
        "UpdateExpression": {
            "Description": "An expression that defines one or more attributes to be updated, the action to be performed on them, and new values for them.\nThe following action values are available for UpdateExpression .\nThese function names are case-sensitive.\nYou can have many actions in a single expression, such as the following: SET a=:value1, b=:value2 DELETE :value3, :value4, :value5\nFor more information on update expressions, see Modifying Items and Attributes in the Amazon DynamoDB Developer Guide .",
            "Type": "string",
            "Required": false,
            "string variables": [
                {},
                {},
                {}
            ]
        },
        "ConditionExpression": {
            "Description": "The condition(s) an attribute(s) must meet. Valid conditions are listed in the DynamoDB Reference Guide.",
            "Type": "condition from boto3.dynamodb.conditions.Attr method",
            "Required": false
        },
        "ExpressionAttributeNames": {
            "Description": "One or more substitution tokens for attribute names in an expression. The following are some use cases for using ExpressionAttributeNames :\nUse the # character in an expression to dereference an attribute name. For example, consider the following attribute name:\nThe name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see Reserved Words in the Amazon DynamoDB Developer Guide .) To work around this, you could specify the following for ExpressionAttributeNames :\nYou could then use this substitution in an expression, as in this example:\nFor more information about expression attribute names, see Specifying Item Attributes in the Amazon DynamoDB Developer Guide .",
            "Type": "dict",
            "Required": false,
            "dict variables": [
                {},
                {},
                {},
                {},
                {}
            ]
        },
        "ExpressionAttributeValues": {
            "Description": "One or more values that can be substituted in an expression.\nUse the : (colon) character in an expression to dereference an attribute value. For example, suppose that you wanted to check whether the value of the ProductStatus attribute was one of the following:\nYou would first need to specify ExpressionAttributeValues as follows:\nYou could then use these values in an expression, such as this:\nFor more information on expression attribute values, see Condition Expressions in the Amazon DynamoDB Developer Guide .",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        }
    },
    "update_table": {
        "AttributeDefinitions": {
            "Description": "An array of attributes that describe the key schema for the table and indexes. If you are adding a new global secondary index to the table, AttributeDefinitions must include the key element(s) of the new index.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "TableName": {
            "Description": "The name of the table to be updated.",
            "Type": "string",
            "Required": true
        },
        "BillingMode": {
            "Description": "Controls how you are charged for read and write throughput and how you manage capacity. When switching from pay-per-request to provisioned capacity, initial provisioned capacity values must be set. The initial provisioned capacity values are estimated based on the consumed read and write capacity of your table and global secondary indexes over the past 30 minutes.",
            "Type": "string",
            "Required": false,
            "string variables": {}
        },
        "ProvisionedThroughput": {
            "Description": "The new provisioned throughput settings for the specified table or index.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "GlobalSecondaryIndexUpdates": {
            "Description": "An array of one or more global secondary indexes for the table. For each index in the array, you can request one action:\nYou can create or delete only one global secondary index per UpdateTable operation.\nFor more information, see Managing Global Secondary Indexes in the Amazon DynamoDB Developer Guide .",
            "Type": "list",
            "Required": false,
            "list variables": [
                {},
                {}
            ]
        },
        "StreamSpecification": {
            "Description": "Represents the DynamoDB Streams configuration for the table.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "SSESpecification": {
            "Description": "The new server-side encryption settings for the specified table.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "ReplicaUpdates": {
            "Description": "A list of replica update actions (create, delete, or update) for the table.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "TableClass": {
            "Description": "The table class of the table to be updated. Valid values are STANDARD and STANDARD_INFREQUENT_ACCESS .",
            "Type": "string",
            "Required": false
        }
    },
    "update_table_replica_auto_scaling": {
        "GlobalSecondaryIndexUpdates": {
            "Description": "Represents the auto scaling settings of the global secondary indexes of the replica to be updated.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "TableName": {
            "Description": "The name of the global table to be updated.",
            "Type": "string",
            "Required": true
        },
        "ProvisionedWriteCapacityAutoScalingUpdate": {
            "Description": "Represents the auto scaling settings to be modified for a global table or global secondary index.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "ReplicaUpdates": {
            "Description": "Represents the auto scaling settings of replicas of the table that will be modified.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        }
    },
    "update_time_to_live": {
        "TableName": {
            "Description": "The name of the table to be configured.",
            "Type": "string",
            "Required": true
        },
        "TimeToLiveSpecification": {
            "Description": "Represents the settings used to enable or disable Time to Live for the specified table.",
            "Type": "dict",
            "Required": true,
            "dict variables": {}
        }
    },
    "paginate": {
        "TableName": {
            "Description": "The name of the table containing the requested items; or, if you provide IndexName, the name of the table to which that index belongs.",
            "Type": "string",
            "Required": true
        },
        "IndexName": {
            "Description": "The name of a secondary index to scan. This index can be any local secondary index or global secondary index. Note that if you use the IndexName parameter, you must also provide TableName .",
            "Type": "string",
            "Required": false
        },
        "AttributesToGet": {
            "Description": "This is a legacy parameter. Use ProjectionExpression instead. For more information, see AttributesToGet in the Amazon DynamoDB Developer Guide .",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "Select": {
            "Description": "The attributes to be returned in the result. You can retrieve all item attributes, specific item attributes, the count of matching items, or in the case of an index, some or all of the attributes projected into the index.\nIf neither Select nor ProjectionExpression are specified, DynamoDB defaults to ALL_ATTRIBUTES when accessing a table, and ALL_PROJECTED_ATTRIBUTES when accessing an index. You cannot use both Select and ProjectionExpression together in a single request, unless the value for Select is SPECIFIC_ATTRIBUTES. (This usage is equivalent to specifying ProjectionExpression without any value for Select .)",
            "Type": "string",
            "Required": false,
            "string variables": {}
        },
        "ScanFilter": {
            "Description": "This is a legacy parameter. Use FilterExpression instead. For more information, see ScanFilter in the Amazon DynamoDB Developer Guide .",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "ConditionalOperator": {
            "Description": "This is a legacy parameter. Use FilterExpression instead. For more information, see ConditionalOperator in the Amazon DynamoDB Developer Guide .",
            "Type": "string",
            "Required": false
        },
        "ReturnConsumedCapacity": {
            "Description": "Determines the level of detail about either provisioned or on-demand throughput consumption that is returned in the response:",
            "Type": "string",
            "Required": false,
            "string variables": {}
        },
        "TotalSegments": {
            "Description": "For a parallel Scan request, TotalSegments represents the total number of segments into which the Scan operation will be divided. The value of TotalSegments corresponds to the number of application workers that will perform the parallel scan. For example, if you want to use four application threads to scan a table or an index, specify a TotalSegments value of 4.\nThe value for TotalSegments must be greater than or equal to 1, and less than or equal to 1000000. If you specify a TotalSegments value of 1, the Scan operation will be sequential rather than parallel.\nIf you specify TotalSegments, you must also specify Segment .",
            "Type": "integer",
            "Required": false
        },
        "Segment": {
            "Description": "For a parallel Scan request, Segment identifies an individual segment to be scanned by an application worker.\nSegment IDs are zero-based, so the first segment is always 0. For example, if you want to use four application threads to scan a table or an index, then the first thread specifies a Segment value of 0, the second thread specifies 1, and so on.\nThe value of LastEvaluatedKey returned from a parallel Scan request must be used as ExclusiveStartKey with the same segment ID in a subsequent Scan operation.\nThe value for Segment must be greater than or equal to 0, and less than the value provided for TotalSegments .\nIf you provide Segment, you must also provide TotalSegments .",
            "Type": "integer",
            "Required": false
        },
        "ProjectionExpression": {
            "Description": "A string that identifies one or more attributes to retrieve from the specified table or index. These attributes can include scalars, sets, or elements of a JSON document. The attributes in the expression must be separated by commas.\nIf no attribute names are specified, then all attributes will be returned. If any of the requested attributes are not found, they will not appear in the result.\nFor more information, see Specifying Item Attributes in the Amazon DynamoDB Developer Guide .",
            "Type": "string",
            "Required": false
        },
        "FilterExpression": {
            "Description": "A string that contains conditions that DynamoDB applies after the Scan operation, but before the data is returned to you. Items that do not satisfy the FilterExpression criteria are not returned.\nFor more information, see Filter Expressions in the Amazon DynamoDB Developer Guide .",
            "Type": "string",
            "Required": false
        },
        "ExpressionAttributeNames": {
            "Description": "One or more substitution tokens for attribute names in an expression. The following are some use cases for using ExpressionAttributeNames :\nUse the # character in an expression to dereference an attribute name. For example, consider the following attribute name:\nThe name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see Reserved Words in the Amazon DynamoDB Developer Guide ). To work around this, you could specify the following for ExpressionAttributeNames :\nYou could then use this substitution in an expression, as in this example:\nFor more information on expression attribute names, see Specifying Item Attributes in the Amazon DynamoDB Developer Guide .",
            "Type": "dict",
            "Required": false,
            "dict variables": [
                {},
                {},
                {},
                {},
                {}
            ]
        },
        "ExpressionAttributeValues": {
            "Description": "One or more values that can be substituted in an expression.\nUse the : (colon) character in an expression to dereference an attribute value. For example, suppose that you wanted to check whether the value of the ProductStatus attribute was one of the following:\nYou would first need to specify ExpressionAttributeValues as follows:\nYou could then use these values in an expression, such as this:\nFor more information on expression attribute values, see Condition Expressions in the Amazon DynamoDB Developer Guide .",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "ConsistentRead": {
            "Description": "A Boolean value that determines the read consistency model during the scan:\nThe default setting for ConsistentRead is false .\nThe ConsistentRead parameter is not supported on global secondary indexes. If you scan a global secondary index with ConsistentRead set to true, you will receive a ValidationException .",
            "Type": "boolean",
            "Required": false,
            "boolean variables": {}
        },
        "PaginationConfig": {
            "Description": "A dictionary that provides parameters to control pagination.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        }
    },
    "wait": {
        "TableName": {
            "Description": "The name of the table to describe.",
            "Type": "string",
            "Required": true
        },
        "WaiterConfig": {
            "Description": "A dictionary that provides parameters to control waiting behavior.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        }
    },
    "get_available_subresources": "No parameters defined",
    "Table": {
        "name": {
            "Description": "The Table's name identifier. This must be set.",
            "Type": "string",
            "Required": false
        }
    },
    "all": "No parameters defined",
    "filter": {
        "ExclusiveStartTableName": {
            "Description": "The first table name that this operation will evaluate. Use the value that was returned for LastEvaluatedTableName in a previous operation, so that you can obtain the next page of results.",
            "Type": "string",
            "Required": false
        },
        "Limit": {
            "Description": "A maximum number of table names to return. If this parameter is not specified, the limit is 100.",
            "Type": "integer",
            "Required": false
        }
    },
    "limit": {
        "count": {
            "Description": "The limit to the number of resources in the iterable.",
            "Type": "integer",
            "Required": false
        }
    },
    "page_size": {
        "count": {
            "Description": "The number of items returned by each service call",
            "Type": "integer",
            "Required": false
        }
    },
    "batch_writer": {
        "overwrite_by_pkeys": {
            "Description": "De-duplicate request items in buffer\nif match new request item on specified primary keys. i.e\n[\"partition_key1\", \"sort_key2\", \"sort_key3\"]",
            "Type": "list(string)",
            "Required": false
        }
    },
    "delete": "No parameters defined",
    "load": "No parameters defined",
    "reload": "No parameters defined",
    "update": {
        "AttributeDefinitions": {
            "Description": "An array of attributes that describe the key schema for the table and indexes. If you are adding a new global secondary index to the table, AttributeDefinitions must include the key element(s) of the new index.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "BillingMode": {
            "Description": "Controls how you are charged for read and write throughput and how you manage capacity. When switching from pay-per-request to provisioned capacity, initial provisioned capacity values must be set. The initial provisioned capacity values are estimated based on the consumed read and write capacity of your table and global secondary indexes over the past 30 minutes.",
            "Type": "string",
            "Required": false,
            "string variables": {}
        },
        "ProvisionedThroughput": {
            "Description": "The new provisioned throughput settings for the specified table or index.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "GlobalSecondaryIndexUpdates": {
            "Description": "An array of one or more global secondary indexes for the table. For each index in the array, you can request one action:\nYou can create or delete only one global secondary index per UpdateTable operation.\nFor more information, see Managing Global Secondary Indexes in the Amazon DynamoDB Developer Guide .",
            "Type": "list",
            "Required": false,
            "list variables": [
                {},
                {}
            ]
        },
        "StreamSpecification": {
            "Description": "Represents the DynamoDB Streams configuration for the table.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "SSESpecification": {
            "Description": "The new server-side encryption settings for the specified table.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "ReplicaUpdates": {
            "Description": "A list of replica update actions (create, delete, or update) for the table.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "TableClass": {
            "Description": "The table class of the table to be updated. Valid values are STANDARD and STANDARD_INFREQUENT_ACCESS .",
            "Type": "string",
            "Required": false
        }
    },
    "wait_until_exists": "No parameters defined",
    "wait_until_not_exists": "No parameters defined"
}