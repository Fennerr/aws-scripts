{
    "create_bot_version": {
        "name": {
            "Description": "The name of the bot that you want to create a new version of. The name is case sensitive.",
            "Type": "string",
            "Required": true
        },
        "checksum": {
            "Description": "Identifies a specific revision of the $LATEST version of the bot. If you specify a checksum and the $LATEST version of the bot has a different checksum, a PreconditionFailedException exception is returned and Amazon Lex doesn't publish a new version. If you don't specify a checksum, Amazon Lex publishes the $LATEST version.",
            "Type": "string",
            "Required": false
        }
    },
    "create_intent_version": {
        "name": {
            "Description": "The name of the intent that you want to create a new version of. The name is case sensitive.",
            "Type": "string",
            "Required": true
        },
        "checksum": {
            "Description": "Checksum of the $LATEST version of the intent that should be used to create the new version. If you specify a checksum and the $LATEST version of the intent has a different checksum, Amazon Lex returns a PreconditionFailedException exception and doesn't publish a new version. If you don't specify a checksum, Amazon Lex publishes the $LATEST version.",
            "Type": "string",
            "Required": false
        }
    },
    "create_slot_type_version": {
        "name": {
            "Description": "The name of the slot type that you want to create a new version for. The name is case sensitive.",
            "Type": "string",
            "Required": true
        },
        "checksum": {
            "Description": "Checksum for the $LATEST version of the slot type that you want to publish. If you specify a checksum and the $LATEST version of the slot type has a different checksum, Amazon Lex returns a PreconditionFailedException exception and doesn't publish the new version. If you don't specify a checksum, Amazon Lex publishes the $LATEST version.",
            "Type": "string",
            "Required": false
        }
    },
    "delete_bot": {
        "name": {
            "Description": "The name of the bot. The name is case sensitive.",
            "Type": "string",
            "Required": true
        }
    },
    "delete_bot_alias": {
        "name": {
            "Description": "The name of the alias to delete. The name is case sensitive.",
            "Type": "string",
            "Required": true
        },
        "botName": {
            "Description": "The name of the bot that the alias points to.",
            "Type": "string",
            "Required": true
        }
    },
    "delete_bot_channel_association": {
        "name": {
            "Description": "The name of the association. The name is case sensitive.",
            "Type": "string",
            "Required": true
        },
        "botName": {
            "Description": "The name of the Amazon Lex bot.",
            "Type": "string",
            "Required": true
        },
        "botAlias": {
            "Description": "An alias that points to the specific version of the Amazon Lex bot to which this association is being made.",
            "Type": "string",
            "Required": true
        }
    },
    "delete_bot_version": {
        "name": {
            "Description": "The name of the bot.",
            "Type": "string",
            "Required": true
        },
        "version": {
            "Description": "The version of the bot to delete. You cannot delete the $LATEST version of the bot. To delete the $LATEST version, use the  DeleteBot operation.",
            "Type": "string",
            "Required": true
        }
    },
    "delete_intent": {
        "name": {
            "Description": "The name of the intent. The name is case sensitive.",
            "Type": "string",
            "Required": true
        }
    },
    "delete_intent_version": {
        "name": {
            "Description": "The name of the intent.",
            "Type": "string",
            "Required": true
        },
        "version": {
            "Description": "The version of the intent to delete. You cannot delete the $LATEST version of the intent. To delete the $LATEST version, use the  DeleteIntent operation.",
            "Type": "string",
            "Required": true
        }
    },
    "delete_slot_type": {
        "name": {
            "Description": "The name of the slot type. The name is case sensitive.",
            "Type": "string",
            "Required": true
        }
    },
    "delete_slot_type_version": {
        "name": {
            "Description": "The name of the slot type.",
            "Type": "string",
            "Required": true
        },
        "version": {
            "Description": "The version of the slot type to delete. You cannot delete the $LATEST version of the slot type. To delete the $LATEST version, use the  DeleteSlotType operation.",
            "Type": "string",
            "Required": true
        }
    },
    "delete_utterances": {
        "botName": {
            "Description": "The name of the bot that stored the utterances.",
            "Type": "string",
            "Required": true
        },
        "userId": {
            "Description": "The unique identifier for the user that made the utterances. This is the user ID that was sent in the PostContent or PostText operation request that contained the utterance.",
            "Type": "string",
            "Required": true
        }
    },
    "get_bot": {
        "name": {
            "Description": "The name of the bot. The name is case sensitive.",
            "Type": "string",
            "Required": true
        },
        "versionOrAlias": {
            "Description": "The version or alias of the bot.",
            "Type": "string",
            "Required": true
        }
    },
    "get_bot_alias": {
        "name": {
            "Description": "The name of the bot alias. The name is case sensitive.",
            "Type": "string",
            "Required": true
        },
        "botName": {
            "Description": "The name of the bot.",
            "Type": "string",
            "Required": true
        }
    },
    "get_bot_aliases": {
        "botName": {
            "Description": "The name of the bot.",
            "Type": "string",
            "Required": true
        },
        "nextToken": {
            "Description": "A pagination token for fetching the next page of aliases. If the response to this call is truncated, Amazon Lex returns a pagination token in the response. To fetch the next page of aliases, specify the pagination token in the next request.",
            "Type": "string",
            "Required": false
        },
        "maxResults": {
            "Description": "The maximum number of aliases to return in the response. The default is 50. .",
            "Type": "integer",
            "Required": false
        },
        "nameContains": {
            "Description": "Substring to match in bot alias names. An alias will be returned if any part of its name matches the substring. For example, \"xyz\" matches both \"xyzabc\" and \"abcxyz.\"",
            "Type": "string",
            "Required": false
        }
    },
    "get_bot_channel_association": {
        "name": {
            "Description": "The name of the association between the bot and the channel. The name is case sensitive.",
            "Type": "string",
            "Required": true
        },
        "botName": {
            "Description": "The name of the Amazon Lex bot.",
            "Type": "string",
            "Required": true
        },
        "botAlias": {
            "Description": "An alias pointing to the specific version of the Amazon Lex bot to which this association is being made.",
            "Type": "string",
            "Required": true
        }
    },
    "get_bot_channel_associations": {
        "botName": {
            "Description": "The name of the Amazon Lex bot in the association.",
            "Type": "string",
            "Required": true
        },
        "botAlias": {
            "Description": "An alias pointing to the specific version of the Amazon Lex bot to which this association is being made.",
            "Type": "string",
            "Required": true
        },
        "nextToken": {
            "Description": "A pagination token for fetching the next page of associations. If the response to this call is truncated, Amazon Lex returns a pagination token in the response. To fetch the next page of associations, specify the pagination token in the next request.",
            "Type": "string",
            "Required": false
        },
        "maxResults": {
            "Description": "The maximum number of associations to return in the response. The default is 50.",
            "Type": "integer",
            "Required": false
        },
        "nameContains": {
            "Description": "Substring to match in channel association names. An association will be returned if any part of its name matches the substring. For example, \"xyz\" matches both \"xyzabc\" and \"abcxyz.\" To return all bot channel associations, use a hyphen (\"-\") as the nameContains parameter.",
            "Type": "string",
            "Required": false
        }
    },
    "get_bot_versions": {
        "name": {
            "Description": "The name of the bot for which versions should be returned.",
            "Type": "string",
            "Required": true
        },
        "nextToken": {
            "Description": "A pagination token for fetching the next page of bot versions. If the response to this call is truncated, Amazon Lex returns a pagination token in the response. To fetch the next page of versions, specify the pagination token in the next request.",
            "Type": "string",
            "Required": false
        },
        "maxResults": {
            "Description": "The maximum number of bot versions to return in the response. The default is 10.",
            "Type": "integer",
            "Required": false
        }
    },
    "get_bots": {
        "nextToken": {
            "Description": "A pagination token that fetches the next page of bots. If the response to this call is truncated, Amazon Lex returns a pagination token in the response. To fetch the next page of bots, specify the pagination token in the next request.",
            "Type": "string",
            "Required": false
        },
        "maxResults": {
            "Description": "The maximum number of bots to return in the response that the request will return. The default is 10.",
            "Type": "integer",
            "Required": false
        },
        "nameContains": {
            "Description": "Substring to match in bot names. A bot will be returned if any part of its name matches the substring. For example, \"xyz\" matches both \"xyzabc\" and \"abcxyz.\"",
            "Type": "string",
            "Required": false
        }
    },
    "get_builtin_intent": {
        "signature": {
            "Description": "The unique identifier for a built-in intent. To find the signature for an intent, see Standard Built-in Intents in the Alexa Skills Kit .",
            "Type": "string",
            "Required": true
        }
    },
    "get_builtin_intents": {
        "locale": {
            "Description": "A list of locales that the intent supports.",
            "Type": "string",
            "Required": false
        },
        "signatureContains": {
            "Description": "Substring to match in built-in intent signatures. An intent will be returned if any part of its signature matches the substring. For example, \"xyz\" matches both \"xyzabc\" and \"abcxyz.\" To find the signature for an intent, see Standard Built-in Intents in the Alexa Skills Kit .",
            "Type": "string",
            "Required": false
        },
        "nextToken": {
            "Description": "A pagination token that fetches the next page of intents. If this API call is truncated, Amazon Lex returns a pagination token in the response. To fetch the next page of intents, use the pagination token in the next request.",
            "Type": "string",
            "Required": false
        },
        "maxResults": {
            "Description": "The maximum number of intents to return in the response. The default is 10.",
            "Type": "integer",
            "Required": false
        }
    },
    "get_builtin_slot_types": {
        "locale": {
            "Description": "A list of locales that the slot type supports.",
            "Type": "string",
            "Required": false
        },
        "signatureContains": {
            "Description": "Substring to match in built-in slot type signatures. A slot type will be returned if any part of its signature matches the substring. For example, \"xyz\" matches both \"xyzabc\" and \"abcxyz.\"",
            "Type": "string",
            "Required": false
        },
        "nextToken": {
            "Description": "A pagination token that fetches the next page of slot types. If the response to this API call is truncated, Amazon Lex returns a pagination token in the response. To fetch the next page of slot types, specify the pagination token in the next request.",
            "Type": "string",
            "Required": false
        },
        "maxResults": {
            "Description": "The maximum number of slot types to return in the response. The default is 10.",
            "Type": "integer",
            "Required": false
        }
    },
    "get_export": {
        "name": {
            "Description": "The name of the bot to export.",
            "Type": "string",
            "Required": true
        },
        "version": {
            "Description": "The version of the bot to export.",
            "Type": "string",
            "Required": true
        },
        "resourceType": {
            "Description": "The type of resource to export.",
            "Type": "string",
            "Required": true
        },
        "exportType": {
            "Description": "The format of the exported data.",
            "Type": "string",
            "Required": true
        }
    },
    "get_import": {
        "importId": {
            "Description": "The identifier of the import job information to return.",
            "Type": "string",
            "Required": true
        }
    },
    "get_intent": {
        "name": {
            "Description": "The name of the intent. The name is case sensitive.",
            "Type": "string",
            "Required": true
        },
        "version": {
            "Description": "The version of the intent.",
            "Type": "string",
            "Required": true
        }
    },
    "get_intent_versions": {
        "name": {
            "Description": "The name of the intent for which versions should be returned.",
            "Type": "string",
            "Required": true
        },
        "nextToken": {
            "Description": "A pagination token for fetching the next page of intent versions. If the response to this call is truncated, Amazon Lex returns a pagination token in the response. To fetch the next page of versions, specify the pagination token in the next request.",
            "Type": "string",
            "Required": false
        },
        "maxResults": {
            "Description": "The maximum number of intent versions to return in the response. The default is 10.",
            "Type": "integer",
            "Required": false
        }
    },
    "get_intents": {
        "nextToken": {
            "Description": "A pagination token that fetches the next page of intents. If the response to this API call is truncated, Amazon Lex returns a pagination token in the response. To fetch the next page of intents, specify the pagination token in the next request.",
            "Type": "string",
            "Required": false
        },
        "maxResults": {
            "Description": "The maximum number of intents to return in the response. The default is 10.",
            "Type": "integer",
            "Required": false
        },
        "nameContains": {
            "Description": "Substring to match in intent names. An intent will be returned if any part of its name matches the substring. For example, \"xyz\" matches both \"xyzabc\" and \"abcxyz.\"",
            "Type": "string",
            "Required": false
        }
    },
    "get_migration": {
        "migrationId": {
            "Description": "The unique identifier of the migration to view. The migrationID is returned by the operation.",
            "Type": "string",
            "Required": true
        }
    },
    "get_migrations": {
        "sortByAttribute": {
            "Description": "The field to sort the list of migrations by. You can sort by the Amazon Lex V1 bot name or the date and time that the migration was started.",
            "Type": "string",
            "Required": false
        },
        "sortByOrder": {
            "Description": "The order so sort the list.",
            "Type": "string",
            "Required": false
        },
        "v1BotNameContains": {
            "Description": "Filters the list to contain only bots whose name contains the specified string. The string is matched anywhere in bot name.",
            "Type": "string",
            "Required": false
        },
        "migrationStatusEquals": {
            "Description": "Filters the list to contain only migrations in the specified state.",
            "Type": "string",
            "Required": false
        },
        "maxResults": {
            "Description": "The maximum number of migrations to return in the response. The default is 10.",
            "Type": "integer",
            "Required": false
        },
        "nextToken": {
            "Description": "A pagination token that fetches the next page of migrations. If the response to this operation is truncated, Amazon Lex returns a pagination token in the response. To fetch the next page of migrations, specify the pagination token in the request.",
            "Type": "string",
            "Required": false
        }
    },
    "get_slot_type": {
        "name": {
            "Description": "The name of the slot type. The name is case sensitive.",
            "Type": "string",
            "Required": true
        },
        "version": {
            "Description": "The version of the slot type.",
            "Type": "string",
            "Required": true
        }
    },
    "get_slot_type_versions": {
        "name": {
            "Description": "The name of the slot type for which versions should be returned.",
            "Type": "string",
            "Required": true
        },
        "nextToken": {
            "Description": "A pagination token for fetching the next page of slot type versions. If the response to this call is truncated, Amazon Lex returns a pagination token in the response. To fetch the next page of versions, specify the pagination token in the next request.",
            "Type": "string",
            "Required": false
        },
        "maxResults": {
            "Description": "The maximum number of slot type versions to return in the response. The default is 10.",
            "Type": "integer",
            "Required": false
        }
    },
    "get_slot_types": {
        "nextToken": {
            "Description": "A pagination token that fetches the next page of slot types. If the response to this API call is truncated, Amazon Lex returns a pagination token in the response. To fetch next page of slot types, specify the pagination token in the next request.",
            "Type": "string",
            "Required": false
        },
        "maxResults": {
            "Description": "The maximum number of slot types to return in the response. The default is 10.",
            "Type": "integer",
            "Required": false
        },
        "nameContains": {
            "Description": "Substring to match in slot type names. A slot type will be returned if any part of its name matches the substring. For example, \"xyz\" matches both \"xyzabc\" and \"abcxyz.\"",
            "Type": "string",
            "Required": false
        }
    },
    "get_utterances_view": {
        "botName": {
            "Description": "The name of the bot for which utterance information should be returned.",
            "Type": "string",
            "Required": true
        },
        "botVersions": {
            "Description": "An array of bot versions for which utterance information should be returned. The limit is 5 versions per request.",
            "Type": "list",
            "Required": true,
            "list variables": {}
        },
        "statusType": {
            "Description": "To return utterances that were recognized and handled, use Detected. To return utterances that were not recognized, use Missed .",
            "Type": "string",
            "Required": true
        }
    },
    "list_tags_for_resource": {
        "resourceArn": {
            "Description": "The Amazon Resource Name (ARN) of the resource to get a list of tags for.",
            "Type": "string",
            "Required": true
        }
    },
    "put_bot": {
        "name": {
            "Description": "The name of the bot. The name is not case sensitive.",
            "Type": "string",
            "Required": true
        },
        "description": {
            "Description": "A description of the bot.",
            "Type": "string",
            "Required": false
        },
        "intents": {
            "Description": "An array of Intent objects. Each intent represents a command that a user can express. For example, a pizza ordering bot might support an OrderPizza intent. For more information, see  how-it-works .",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "enableModelImprovements": {
            "Description": "Set to true to enable access to natural language understanding improvements.\nWhen you set the enableModelImprovements parameter to true you can use the nluIntentConfidenceThreshold parameter to configure confidence scores. For more information, see Confidence Scores .\nYou can only set the enableModelImprovements parameter in certain Regions. If you set the parameter to true, your bot has access to accuracy improvements.\nThe Regions where you can set the enableModelImprovements parameter to true are:\nIn other Regions, the enableModelImprovements parameter is set to true by default. In these Regions setting the parameter to false throws a ValidationException exception.",
            "Type": "boolean",
            "Required": false,
            "boolean variables": {}
        },
        "nluIntentConfidenceThreshold": {
            "Description": "Determines the threshold where Amazon Lex will insert the AMAZON.FallbackIntent, AMAZON.KendraSearchIntent, or both when returning alternative intents in a PostContent or PostText response. AMAZON.FallbackIntent and AMAZON.KendraSearchIntent are only inserted if they are configured for the bot.\nYou must set the enableModelImprovements parameter to true to use confidence scores in the following regions.\nIn other Regions, the enableModelImprovements parameter is set to true by default.\nFor example, suppose a bot is configured with the confidence threshold of 0.80 and the AMAZON.FallbackIntent. Amazon Lex returns three alternative intents with the following confidence scores: IntentA (0.70), IntentB (0.60), IntentC (0.50). The response from the PostText operation would be:",
            "Type": "float",
            "Required": false,
            "float variables": [
                {},
                {}
            ]
        },
        "clarificationPrompt": {
            "Description": "When Amazon Lex doesn't understand the user's intent, it uses this message to get clarification. To specify how many times Amazon Lex should repeat the clarification prompt, use the maxAttempts field. If Amazon Lex still doesn't understand, it sends the message in the abortStatement field.\nWhen you create a clarification prompt, make sure that it suggests the correct response from the user. for example, for a bot that orders pizza and drinks, you might create this clarification prompt: \"What would you like to do? You can say 'Order a pizza' or 'Order a drink.'\"\nIf you have defined a fallback intent, it will be invoked if the clarification prompt is repeated the number of times defined in the maxAttempts field. For more information, see AMAZON.FallbackIntent .\nIf you don't define a clarification prompt, at runtime Amazon Lex will return a 400 Bad Request exception in three cases:",
            "Type": "dict",
            "Required": false,
            "dict variables": [
                {},
                {}
            ]
        },
        "abortStatement": {
            "Description": "When Amazon Lex can't understand the user's input in context, it tries to elicit the information a few times. After that, Amazon Lex sends the message defined in abortStatement to the user, and then cancels the conversation. To set the number of retries, use the valueElicitationPrompt field for the slot type.\nFor example, in a pizza ordering bot, Amazon Lex might ask a user \"What type of crust would you like?\" If the user's response is not one of the expected responses (for example, \"thin crust, \"deep dish,\" etc.), Amazon Lex tries to elicit a correct response a few more times.\nFor example, in a pizza ordering application, OrderPizza might be one of the intents. This intent might require the CrustType slot. You specify the valueElicitationPrompt field when you create the CrustType slot.\nIf you have defined a fallback intent the cancel statement will not be sent to the user, the fallback intent is used instead. For more information, see AMAZON.FallbackIntent .",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "idleSessionTTLInSeconds": {
            "Description": "The maximum time in seconds that Amazon Lex retains the data gathered in a conversation.\nA user interaction session remains active for the amount of time specified. If no conversation occurs during this time, the session expires and Amazon Lex deletes any data provided before the timeout.\nFor example, suppose that a user chooses the OrderPizza intent, but gets sidetracked halfway through placing an order. If the user doesn't complete the order within the specified time, Amazon Lex discards the slot information that it gathered, and the user must start over.\nIf you don't include the idleSessionTTLInSeconds element in a PutBot operation request, Amazon Lex uses the default value. This is also true if the request replaces an existing bot.\nThe default is 300 seconds (5 minutes).",
            "Type": "integer",
            "Required": false
        },
        "voiceId": {
            "Description": "The Amazon Polly voice ID that you want Amazon Lex to use for voice interactions with the user. The locale configured for the voice must match the locale of the bot. For more information, see Voices in Amazon Polly in the Amazon Polly Developer Guide .",
            "Type": "string",
            "Required": false
        },
        "checksum": {
            "Description": "Identifies a specific revision of the $LATEST version.\nWhen you create a new bot, leave the checksum field blank. If you specify a checksum you get a BadRequestException exception.\nWhen you want to update a bot, set the checksum field to the checksum of the most recent revision of the $LATEST version. If you don't specify the checksum field, or if the checksum does not match the $LATEST version, you get a PreconditionFailedException exception.",
            "Type": "string",
            "Required": false
        },
        "processBehavior": {
            "Description": "If you set the processBehavior element to BUILD, Amazon Lex builds the bot so that it can be run. If you set the element to SAVE Amazon Lex saves the bot, but doesn't build it.\nIf you don't specify this value, the default value is BUILD .",
            "Type": "string",
            "Required": false
        },
        "locale": {
            "Description": "Specifies the target locale for the bot. Any intent used in the bot must be compatible with the locale of the bot.\nThe default is en-US .",
            "Type": "string",
            "Required": true
        },
        "childDirected": {
            "Description": "For each Amazon Lex bot created with the Amazon Lex Model Building Service, you must specify whether your use of Amazon Lex is related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to the Children's Online Privacy Protection Act (COPPA) by specifying true or false in the childDirected field. By specifying true in the childDirected field, you confirm that your use of Amazon Lex is related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA. By specifying false in the childDirected field, you confirm that your use of Amazon Lex is not related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA. You may not specify a default value for the childDirected field that does not accurately reflect whether your use of Amazon Lex is related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA.\nIf your use of Amazon Lex relates to a website, program, or other application that is directed in whole or in part, to children under age 13, you must obtain any required verifiable parental consent under COPPA. For information regarding the use of Amazon Lex in connection with websites, programs, or other applications that are directed or targeted, in whole or in part, to children under age 13, see the Amazon Lex FAQ.",
            "Type": "boolean",
            "Required": true
        },
        "detectSentiment": {
            "Description": "When set to true user utterances are sent to Amazon Comprehend for sentiment analysis. If you don't specify detectSentiment , the default is false .",
            "Type": "boolean",
            "Required": false
        },
        "createVersion": {
            "Description": "When set to true a new numbered version of the bot is created. This is the same as calling the CreateBotVersion operation. If you don't specify createVersion , the default is false .",
            "Type": "boolean",
            "Required": false
        },
        "tags": {
            "Description": "A list of tags to add to the bot. You can only add tags when you create a bot, you can't use the PutBot operation to update the tags on a bot. To update tags, use the TagResource operation.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        }
    },
    "put_bot_alias": {
        "name": {
            "Description": "The name of the alias. The name is not case sensitive.",
            "Type": "string",
            "Required": true
        },
        "description": {
            "Description": "A description of the alias.",
            "Type": "string",
            "Required": false
        },
        "botVersion": {
            "Description": "The version of the bot.",
            "Type": "string",
            "Required": true
        },
        "botName": {
            "Description": "The name of the bot.",
            "Type": "string",
            "Required": true
        },
        "checksum": {
            "Description": "Identifies a specific revision of the $LATEST version.\nWhen you create a new bot alias, leave the checksum field blank. If you specify a checksum you get a BadRequestException exception.\nWhen you want to update a bot alias, set the checksum field to the checksum of the most recent revision of the $LATEST version. If you don't specify the checksum field, or if the checksum does not match the $LATEST version, you get a PreconditionFailedException exception.",
            "Type": "string",
            "Required": false
        },
        "conversationLogs": {
            "Description": "Settings for conversation logs for the alias.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "tags": {
            "Description": "A list of tags to add to the bot alias. You can only add tags when you create an alias, you can't use the PutBotAlias operation to update the tags on a bot alias. To update tags, use the TagResource operation.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        }
    },
    "put_intent": {
        "name": {
            "Description": "The name of the intent. The name is not case sensitive.\nThe name can't match a built-in intent name, or a built-in intent name with \"AMAZON.\" removed. For example, because there is a built-in intent called AMAZON.HelpIntent, you can't create a custom intent called HelpIntent .\nFor a list of built-in intents, see Standard Built-in Intents in the Alexa Skills Kit .",
            "Type": "string",
            "Required": true
        },
        "description": {
            "Description": "A description of the intent.",
            "Type": "string",
            "Required": false
        },
        "slots": {
            "Description": "An array of intent slots. At runtime, Amazon Lex elicits required slot values from the user using prompts defined in the slots. For more information, see  how-it-works .",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "sampleUtterances": {
            "Description": "An array of utterances (strings) that a user might say to signal the intent. For example, \"I want {PizzaSize} pizza\", \"Order {Quantity} {PizzaSize} pizzas\".\nIn each utterance, a slot name is enclosed in curly braces.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "confirmationPrompt": {
            "Description": "Prompts the user to confirm the intent. This question should have a yes or no answer.\nAmazon Lex uses this prompt to ensure that the user acknowledges that the intent is ready for fulfillment. For example, with the OrderPizza intent, you might want to confirm that the order is correct before placing it. For other intents, such as intents that simply respond to user questions, you might not need to ask the user for confirmation before providing the information.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "rejectionStatement": {
            "Description": "When the user answers \"no\" to the question defined in confirmationPrompt, Amazon Lex responds with this statement to acknowledge that the intent was canceled.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "followUpPrompt": {
            "Description": "Amazon Lex uses this prompt to solicit additional activity after fulfilling an intent. For example, after the OrderPizza intent is fulfilled, you might prompt the user to order a drink.\nThe action that Amazon Lex takes depends on the user's response, as follows:\nThe followUpPrompt field and the conclusionStatement field are mutually exclusive. You can specify only one.",
            "Type": "dict",
            "Required": false,
            "dict variables": [
                {},
                {}
            ]
        },
        "conclusionStatement": {
            "Description": "The statement that you want Amazon Lex to convey to the user after the intent is successfully fulfilled by the Lambda function.\nThis element is relevant only if you provide a Lambda function in the fulfillmentActivity. If you return the intent to the client application, you can't specify this element.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "dialogCodeHook": {
            "Description": "Specifies a Lambda function to invoke for each user input. You can invoke this Lambda function to personalize user interaction.\nFor example, suppose your bot determines that the user is John. Your Lambda function might retrieve John's information from a backend database and prepopulate some of the values. For example, if you find that John is gluten intolerant, you might set the corresponding intent slot, GlutenIntolerant, to true. You might find John's phone number and set the corresponding session attribute.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "fulfillmentActivity": {
            "Description": "Required. Describes how the intent is fulfilled. For example, after a user provides all of the information for a pizza order, fulfillmentActivity defines how the bot places an order with a local pizza store.\nYou might configure Amazon Lex to return all of the intent information to the client application, or direct it to invoke a Lambda function that can process the intent (for example, place an order with a pizzeria).",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "parentIntentSignature": {
            "Description": "A unique identifier for the built-in intent to base this intent on. To find the signature for an intent, see Standard Built-in Intents in the Alexa Skills Kit .",
            "Type": "string",
            "Required": false
        },
        "checksum": {
            "Description": "Identifies a specific revision of the $LATEST version.\nWhen you create a new intent, leave the checksum field blank. If you specify a checksum you get a BadRequestException exception.\nWhen you want to update a intent, set the checksum field to the checksum of the most recent revision of the $LATEST version. If you don't specify the checksum field, or if the checksum does not match the $LATEST version, you get a PreconditionFailedException exception.",
            "Type": "string",
            "Required": false
        },
        "createVersion": {
            "Description": "When set to true a new numbered version of the intent is created. This is the same as calling the CreateIntentVersion operation. If you do not specify createVersion , the default is false .",
            "Type": "boolean",
            "Required": false
        },
        "kendraConfiguration": {
            "Description": "Configuration information required to use the AMAZON.KendraSearchIntent intent to connect to an Amazon Kendra index. For more information, see AMAZON.KendraSearchIntent .",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "inputContexts": {
            "Description": "An array of InputContext objects that lists the contexts that must be active for Amazon Lex to choose the intent in a conversation with the user.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "outputContexts": {
            "Description": "An array of OutputContext objects that lists the contexts that the intent activates when the intent is fulfilled.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        }
    },
    "put_slot_type": {
        "name": {
            "Description": "The name of the slot type. The name is not case sensitive.\nThe name can't match a built-in slot type name, or a built-in slot type name with \"AMAZON.\" removed. For example, because there is a built-in slot type called AMAZON.DATE, you can't create a custom slot type called DATE .\nFor a list of built-in slot types, see Slot Type Reference in the Alexa Skills Kit .",
            "Type": "string",
            "Required": true
        },
        "description": {
            "Description": "A description of the slot type.",
            "Type": "string",
            "Required": false
        },
        "enumerationValues": {
            "Description": "A list of EnumerationValue objects that defines the values that the slot type can take. Each value can have a list of synonyms, which are additional values that help train the machine learning model about the values that it resolves for a slot.\nA regular expression slot type doesn't require enumeration values. All other slot types require a list of enumeration values.\nWhen Amazon Lex resolves a slot value, it generates a resolution list that contains up to five possible values for the slot. If you are using a Lambda function, this resolution list is passed to the function. If you are not using a Lambda function you can choose to return the value that the user entered or the first value in the resolution list as the slot value. The valueSelectionStrategy field indicates the option to use.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "checksum": {
            "Description": "Identifies a specific revision of the $LATEST version.\nWhen you create a new slot type, leave the checksum field blank. If you specify a checksum you get a BadRequestException exception.\nWhen you want to update a slot type, set the checksum field to the checksum of the most recent revision of the $LATEST version. If you don't specify the checksum field, or if the checksum does not match the $LATEST version, you get a PreconditionFailedException exception.",
            "Type": "string",
            "Required": false
        },
        "valueSelectionStrategy": {
            "Description": "Determines the slot resolution strategy that Amazon Lex uses to return slot type values. The field can be set to one of the following values:\nIf you don't specify the valueSelectionStrategy, the default is ORIGINAL_VALUE .",
            "Type": "string",
            "Required": false,
            "string variables": {}
        },
        "createVersion": {
            "Description": "When set to true a new numbered version of the slot type is created. This is the same as calling the CreateSlotTypeVersion operation. If you do not specify createVersion , the default is false .",
            "Type": "boolean",
            "Required": false
        },
        "parentSlotTypeSignature": {
            "Description": "The built-in slot type used as the parent of the slot type. When you define a parent slot type, the new slot type has all of the same configuration as the parent.\nOnly AMAZON.AlphaNumeric is supported.",
            "Type": "string",
            "Required": false
        },
        "slotTypeConfigurations": {
            "Description": "Configuration information that extends the parent built-in slot type. The configuration is added to the settings for the parent slot type.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        }
    },
    "start_import": {
        "payload": {
            "Description": "A zip archive in binary format. The archive should contain one file, a JSON file containing the resource to import. The resource should match the type specified in the resourceType field.",
            "Type": "bytes",
            "Required": true
        },
        "resourceType": {
            "Description": "Specifies the type of resource to export. Each resource also exports any resources that it depends on.",
            "Type": "string",
            "Required": true,
            "string variables": {}
        },
        "mergeStrategy": {
            "Description": "Specifies the action that the StartImport operation should take when there is an existing resource with the same name.",
            "Type": "string",
            "Required": true,
            "string variables": {}
        },
        "tags": {
            "Description": "A list of tags to add to the imported bot. You can only add tags when you import a bot, you can't add tags to an intent or slot type.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        }
    },
    "start_migration": {
        "v1BotName": {
            "Description": "The name of the Amazon Lex V1 bot that you are migrating to Amazon Lex V2.",
            "Type": "string",
            "Required": true
        },
        "v1BotVersion": {
            "Description": "The version of the bot to migrate to Amazon Lex V2. You can migrate the $LATEST version as well as any numbered version.",
            "Type": "string",
            "Required": true
        },
        "v2BotName": {
            "Description": "The name of the Amazon Lex V2 bot that you are migrating the Amazon Lex V1 bot to.",
            "Type": "string",
            "Required": true,
            "string variables": {}
        },
        "v2BotRole": {
            "Description": "The IAM role that Amazon Lex uses to run the Amazon Lex V2 bot.",
            "Type": "string",
            "Required": true
        },
        "migrationStrategy": {
            "Description": "The strategy used to conduct the migration.",
            "Type": "string",
            "Required": true,
            "string variables": {}
        }
    },
    "tag_resource": {
        "resourceArn": {
            "Description": "The Amazon Resource Name (ARN) of the bot, bot alias, or bot channel to tag.",
            "Type": "string",
            "Required": true
        },
        "tags": {
            "Description": "A list of tag keys to add to the resource. If a tag key already exists, the existing value is replaced with the new value.",
            "Type": "list",
            "Required": true,
            "list variables": {}
        }
    },
    "untag_resource": {
        "resourceArn": {
            "Description": "The Amazon Resource Name (ARN) of the resource to remove the tags from.",
            "Type": "string",
            "Required": true
        },
        "tagKeys": {
            "Description": "A list of tag keys to remove from the resource. If a tag key does not exist on the resource, it is ignored.",
            "Type": "list",
            "Required": true,
            "list variables": {}
        }
    },
    "paginate": {
        "nameContains": {
            "Description": "Substring to match in slot type names. A slot type will be returned if any part of its name matches the substring. For example, \"xyz\" matches both \"xyzabc\" and \"abcxyz.\"",
            "Type": "string",
            "Required": false
        },
        "PaginationConfig": {
            "Description": "A dictionary that provides parameters to control pagination.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        }
    }
}