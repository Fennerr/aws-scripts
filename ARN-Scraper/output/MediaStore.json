{
    "create_container": {
        "ContainerName": {
            "Description": "The name for the container. The name must be from 1 to 255 characters. Container names must be unique to your AWS account within a specific region. As an example, you could create a container named movies in every region, as long as you don\u2019t have an existing container with that name.",
            "Type": "string",
            "Required": true
        },
        "Tags": {
            "Description": "An array of key:value pairs that you define. These values can be anything that you want. Typically, the tag key represents a category (such as \"environment\") and the tag value represents a specific value within that category (such as \"test,\" \"development,\" or \"production\"). You can add up to 50 tags to each container. For more information about tagging, including naming and usage conventions, see Tagging Resources in MediaStore .",
            "Type": "list",
            "Required": false,
            "list variables": {}
        }
    },
    "delete_container": {
        "ContainerName": {
            "Description": "The name of the container to delete.",
            "Type": "string",
            "Required": true
        }
    },
    "delete_container_policy": {
        "ContainerName": {
            "Description": "The name of the container that holds the policy.",
            "Type": "string",
            "Required": true
        }
    },
    "delete_cors_policy": {
        "ContainerName": {
            "Description": "The name of the container to remove the policy from.",
            "Type": "string",
            "Required": true
        }
    },
    "delete_lifecycle_policy": {
        "ContainerName": {
            "Description": "The name of the container that holds the object lifecycle policy.",
            "Type": "string",
            "Required": true
        }
    },
    "delete_metric_policy": {
        "ContainerName": {
            "Description": "The name of the container that is associated with the metric policy that you want to delete.",
            "Type": "string",
            "Required": true
        }
    },
    "describe_container": {
        "ContainerName": {
            "Description": "The name of the container to query.",
            "Type": "string",
            "Required": false
        }
    },
    "get_container_policy": {
        "ContainerName": {
            "Description": "The name of the container.",
            "Type": "string",
            "Required": true
        }
    },
    "get_cors_policy": {
        "ContainerName": {
            "Description": "The name of the container that the policy is assigned to.",
            "Type": "string",
            "Required": true
        }
    },
    "get_lifecycle_policy": {
        "ContainerName": {
            "Description": "The name of the container that the object lifecycle policy is assigned to.",
            "Type": "string",
            "Required": true
        }
    },
    "get_metric_policy": {
        "ContainerName": {
            "Description": "The name of the container that is associated with the metric policy.",
            "Type": "string",
            "Required": true
        }
    },
    "list_containers": {
        "NextToken": {
            "Description": "Only if you used MaxResults in the first command, enter the token (which was included in the previous response) to obtain the next set of containers. This token is included in a response only if there actually are more containers to list.",
            "Type": "string",
            "Required": false
        },
        "MaxResults": {
            "Description": "Enter the maximum number of containers in the response. Use from 1 to 255 characters.",
            "Type": "integer",
            "Required": false
        }
    },
    "list_tags_for_resource": {
        "Resource": {
            "Description": "The Amazon Resource Name (ARN) for the container.",
            "Type": "string",
            "Required": true
        }
    },
    "put_container_policy": {
        "ContainerName": {
            "Description": "The name of the container.",
            "Type": "string",
            "Required": true
        },
        "Policy": {
            "Description": "The contents of the policy, which includes the following:",
            "Type": "string",
            "Required": true,
            "string variables": {}
        }
    },
    "put_cors_policy": {
        "ContainerName": {
            "Description": "The name of the container that you want to assign the CORS policy to.",
            "Type": "string",
            "Required": true
        },
        "CorsPolicy": {
            "Description": "The CORS policy to apply to the container.",
            "Type": "list",
            "Required": true,
            "list variables": {}
        }
    },
    "put_lifecycle_policy": {
        "ContainerName": {
            "Description": "The name of the container that you want to assign the object lifecycle policy to.",
            "Type": "string",
            "Required": true
        },
        "LifecyclePolicy": {
            "Description": "The object lifecycle policy to apply to the container.",
            "Type": "string",
            "Required": true
        }
    },
    "put_metric_policy": {
        "ContainerName": {
            "Description": "The name of the container that you want to add the metric policy to.",
            "Type": "string",
            "Required": true
        },
        "MetricPolicy": {
            "Description": "The metric policy that you want to associate with the container. In the policy, you must indicate whether you want MediaStore to send container-level metrics. You can also include up to five rules to define groups of objects that you want MediaStore to send object-level metrics for. If you include rules in the policy, construct each rule with both of the following:",
            "Type": "dict",
            "Required": true,
            "dict variables": [
                {},
                {}
            ]
        }
    },
    "start_access_logging": {
        "ContainerName": {
            "Description": "The name of the container that you want to start access logging on.",
            "Type": "string",
            "Required": true
        }
    },
    "stop_access_logging": {
        "ContainerName": {
            "Description": "The name of the container that you want to stop access logging on.",
            "Type": "string",
            "Required": true
        }
    },
    "tag_resource": {
        "Resource": {
            "Description": "The Amazon Resource Name (ARN) for the container.",
            "Type": "string",
            "Required": true
        },
        "Tags": {
            "Description": "An array of key:value pairs that you want to add to the container. You need to specify only the tags that you want to add or update. For example, suppose a container already has two tags (customer:CompanyA and priority:High). You want to change the priority tag and also add a third tag (type:Contract). For TagResource, you specify the following tags: priority:Medium, type:Contract. The result is that your container has three tags: customer:CompanyA, priority:Medium, and type:Contract.",
            "Type": "list",
            "Required": true,
            "list variables": {}
        }
    },
    "untag_resource": {
        "Resource": {
            "Description": "The Amazon Resource Name (ARN) for the container.",
            "Type": "string",
            "Required": true
        },
        "TagKeys": {
            "Description": "A comma-separated list of keys for tags that you want to remove from the container. For example, if your container has two tags (customer:CompanyA and priority:High) and you want to remove one of the tags (priority:High), you specify the key for the tag that you want to remove (priority).",
            "Type": "list",
            "Required": true,
            "list variables": {}
        }
    },
    "paginate": {
        "PaginationConfig": {
            "Description": "A dictionary that provides parameters to control pagination.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        }
    }
}