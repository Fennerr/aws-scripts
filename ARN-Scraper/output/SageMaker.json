{
    "add_association": {
        "SourceArn": {
            "Description": "The ARN of the source.",
            "Type": "string",
            "Required": true
        },
        "DestinationArn": {
            "Description": "The Amazon Resource Name (ARN) of the destination.",
            "Type": "string",
            "Required": true
        },
        "AssociationType": {
            "Description": "The type of association. The following are suggested uses for each type. Amazon SageMaker places no restrictions on their use.",
            "Type": "string",
            "Required": false,
            "string variables": {}
        }
    },
    "add_tags": {
        "ResourceArn": {
            "Description": "The Amazon Resource Name (ARN) of the resource that you want to tag.",
            "Type": "string",
            "Required": true
        },
        "Tags": {
            "Description": "An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in different ways, for example, by purpose, owner, or environment. For more information, see Tagging Amazon Web Services Resources .",
            "Type": "list",
            "Required": true,
            "list variables": {}
        }
    },
    "associate_trial_component": {
        "TrialComponentName": {
            "Description": "The name of the component to associated with the trial.",
            "Type": "string",
            "Required": true
        },
        "TrialName": {
            "Description": "The name of the trial to associate with.",
            "Type": "string",
            "Required": true
        }
    },
    "batch_describe_model_package": {
        "ModelPackageArnList": {
            "Description": "The list of Amazon Resource Name (ARN) of the model package groups.",
            "Type": "list",
            "Required": true,
            "list variables": {}
        }
    },
    "create_action": {
        "ActionName": {
            "Description": "The name of the action. Must be unique to your account in an Amazon Web Services Region.",
            "Type": "string",
            "Required": true
        },
        "Source": {
            "Description": "The source type, ID, and URI.",
            "Type": "dict",
            "Required": true,
            "dict variables": {}
        },
        "ActionType": {
            "Description": "The action type.",
            "Type": "string",
            "Required": true
        },
        "Description": {
            "Description": "The description of the action.",
            "Type": "string",
            "Required": false
        },
        "Status": {
            "Description": "The status of the action.",
            "Type": "string",
            "Required": false
        },
        "Properties": {
            "Description": "A list of properties to add to the action.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "MetadataProperties": {
            "Description": "Metadata properties of the tracking entity, trial, or trial component.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "Tags": {
            "Description": "A list of tags to apply to the action.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        }
    },
    "create_algorithm": {
        "AlgorithmName": {
            "Description": "The name of the algorithm.",
            "Type": "string",
            "Required": true
        },
        "AlgorithmDescription": {
            "Description": "A description of the algorithm.",
            "Type": "string",
            "Required": false
        },
        "TrainingSpecification": {
            "Description": "Specifies details about training jobs run by this algorithm, including the following:",
            "Type": "dict",
            "Required": true,
            "dict variables": [
                {},
                {}
            ]
        },
        "InferenceSpecification": {
            "Description": "Specifies details about inference jobs that the algorithm runs, including the following:",
            "Type": "dict",
            "Required": false,
            "dict variables": [
                {},
                {}
            ]
        },
        "ValidationSpecification": {
            "Description": "Specifies configurations for one or more training jobs and that SageMaker runs to test the algorithm's training code and, optionally, one or more batch transform jobs that SageMaker runs to test the algorithm's inference code.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "CertifyForMarketplace": {
            "Description": "Whether to certify the algorithm so that it can be listed in Amazon Web Services Marketplace.",
            "Type": "boolean",
            "Required": false
        },
        "Tags": {
            "Description": "An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in different ways, for example, by purpose, owner, or environment. For more information, see Tagging Amazon Web Services Resources .",
            "Type": "list",
            "Required": false,
            "list variables": {}
        }
    },
    "create_app": {
        "DomainId": {
            "Description": "The domain ID.",
            "Type": "string",
            "Required": true
        },
        "UserProfileName": {
            "Description": "The user profile name.",
            "Type": "string",
            "Required": true
        },
        "AppType": {
            "Description": "The type of app. Supported apps are JupyterServer and KernelGateway. TensorBoard is not supported.",
            "Type": "string",
            "Required": true
        },
        "AppName": {
            "Description": "The name of the app.",
            "Type": "string",
            "Required": true
        },
        "Tags": {
            "Description": "Each tag consists of a key and an optional value. Tag keys must be unique per resource.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "ResourceSpec": {
            "Description": "The instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        }
    },
    "create_app_image_config": {
        "AppImageConfigName": {
            "Description": "The name of the AppImageConfig. Must be unique to your account.",
            "Type": "string",
            "Required": true
        },
        "Tags": {
            "Description": "A list of tags to apply to the AppImageConfig.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "KernelGatewayImageConfig": {
            "Description": "The KernelGatewayImageConfig. You can only specify one image kernel in the AppImageConfig API. This kernel will be shown to users before the image starts. Once the image runs, all kernels are visible in JupyterLab.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        }
    },
    "create_artifact": {
        "ArtifactName": {
            "Description": "The name of the artifact. Must be unique to your account in an Amazon Web Services Region.",
            "Type": "string",
            "Required": false
        },
        "Source": {
            "Description": "The ID, ID type, and URI of the source.",
            "Type": "dict",
            "Required": true,
            "dict variables": {}
        },
        "ArtifactType": {
            "Description": "The artifact type.",
            "Type": "string",
            "Required": true
        },
        "Properties": {
            "Description": "A list of properties to add to the artifact.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "MetadataProperties": {
            "Description": "Metadata properties of the tracking entity, trial, or trial component.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "Tags": {
            "Description": "A list of tags to apply to the artifact.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        }
    },
    "create_auto_ml_job": {
        "AutoMLJobName": {
            "Description": "Identifies an Autopilot job. The name must be unique to your account and is case-insensitive.",
            "Type": "string",
            "Required": true
        },
        "InputDataConfig": {
            "Description": "An array of channel objects that describes the input data and its location. Each channel is a named input source. Similar to InputDataConfig supported by. Format(s) supported: CSV, Parquet. A minimum of 500 rows is required for the training dataset. There is not a minimum number of rows required for the validation dataset.",
            "Type": "list",
            "Required": true,
            "list variables": {}
        },
        "OutputDataConfig": {
            "Description": "Provides information about encryption and the Amazon S3 output path needed to store artifacts from an AutoML job. Format(s) supported: CSV.",
            "Type": "dict",
            "Required": true,
            "dict variables": {}
        },
        "ProblemType": {
            "Description": "Defines the type of supervised learning available for the candidates. For more information, see Amazon SageMaker Autopilot problem types and algorithm support .",
            "Type": "string",
            "Required": false
        },
        "AutoMLJobObjective": {
            "Description": "Defines the objective metric used to measure the predictive quality of an AutoML job. You provide an  AutoMLJobObjective$MetricName and Autopilot infers whether to minimize or maximize it.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "AutoMLJobConfig": {
            "Description": "A collection of settings used to configure an AutoML job.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "RoleArn": {
            "Description": "The ARN of the role that is used to access the data.",
            "Type": "string",
            "Required": true
        },
        "GenerateCandidateDefinitionsOnly": {
            "Description": "Generates possible candidates without training the models. A candidate is a combination of data preprocessors, algorithms, and algorithm parameter settings.",
            "Type": "boolean",
            "Required": false
        },
        "Tags": {
            "Description": "Each tag consists of a key and an optional value. Tag keys must be unique per resource.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "ModelDeployConfig": {
            "Description": "Specifies how to generate the endpoint name for an automatic one-click Autopilot model deployment.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        }
    },
    "create_code_repository": {
        "CodeRepositoryName": {
            "Description": "The name of the Git repository. The name must have 1 to 63 characters. Valid characters are a-z, A-Z, 0-9, and - (hyphen).",
            "Type": "string",
            "Required": true
        },
        "GitConfig": {
            "Description": "Specifies details about the repository, including the URL where the repository is located, the default branch, and credentials to use to access the repository.",
            "Type": "dict",
            "Required": true,
            "dict variables": {}
        },
        "Tags": {
            "Description": "An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in different ways, for example, by purpose, owner, or environment. For more information, see Tagging Amazon Web Services Resources .",
            "Type": "list",
            "Required": false,
            "list variables": {}
        }
    },
    "create_compilation_job": {
        "CompilationJobName": {
            "Description": "A name for the model compilation job. The name must be unique within the Amazon Web Services Region and within your Amazon Web Services account.",
            "Type": "string",
            "Required": true
        },
        "RoleArn": {
            "Description": "The Amazon Resource Name (ARN) of an IAM role that enables Amazon SageMaker to perform tasks on your behalf.\nDuring model compilation, Amazon SageMaker needs your permission to:\nYou grant permissions for all of these tasks to an IAM role. To pass this role to Amazon SageMaker, the caller of this API must have the iam:PassRole permission. For more information, see Amazon SageMaker Roles.",
            "Type": "string",
            "Required": true,
            "string variables": {}
        },
        "ModelPackageVersionArn": {
            "Description": "The Amazon Resource Name (ARN) of a versioned model package. Provide either a ModelPackageVersionArn or an InputConfig object in the request syntax. The presence of both objects in the CreateCompilationJob request will return an exception.",
            "Type": "string",
            "Required": false
        },
        "InputConfig": {
            "Description": "Provides information about the location of input model artifacts, the name and shape of the expected data inputs, and the framework in which the model was trained.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "OutputConfig": {
            "Description": "Provides information about the output location for the compiled model and the target device the model runs on.",
            "Type": "dict",
            "Required": true,
            "dict variables": {}
        },
        "VpcConfig": {
            "Description": "A  VpcConfig object that specifies the VPC that you want your compilation job to connect to. Control access to your models by configuring the VPC. For more information, see Protect Compilation Jobs by Using an Amazon Virtual Private Cloud .",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "StoppingCondition": {
            "Description": "Specifies a limit to how long a model compilation job can run. When the job reaches the time limit, Amazon SageMaker ends the compilation job. Use this API to cap model training costs.",
            "Type": "dict",
            "Required": true,
            "dict variables": {}
        },
        "Tags": {
            "Description": "An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in different ways, for example, by purpose, owner, or environment. For more information, see Tagging Amazon Web Services Resources .",
            "Type": "list",
            "Required": false,
            "list variables": {}
        }
    },
    "create_context": {
        "ContextName": {
            "Description": "The name of the context. Must be unique to your account in an Amazon Web Services Region.",
            "Type": "string",
            "Required": true
        },
        "Source": {
            "Description": "The source type, ID, and URI.",
            "Type": "dict",
            "Required": true,
            "dict variables": {}
        },
        "ContextType": {
            "Description": "The context type.",
            "Type": "string",
            "Required": true
        },
        "Description": {
            "Description": "The description of the context.",
            "Type": "string",
            "Required": false
        },
        "Properties": {
            "Description": "A list of properties to add to the context.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "Tags": {
            "Description": "A list of tags to apply to the context.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        }
    },
    "create_data_quality_job_definition": {
        "JobDefinitionName": {
            "Description": "The name for the monitoring job definition.",
            "Type": "string",
            "Required": true
        },
        "DataQualityBaselineConfig": {
            "Description": "Configures the constraints and baselines for the monitoring job.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "DataQualityAppSpecification": {
            "Description": "Specifies the container that runs the monitoring job.",
            "Type": "dict",
            "Required": true,
            "dict variables": {}
        },
        "DataQualityJobInput": {
            "Description": "A list of inputs for the monitoring job. Currently endpoints are supported as monitoring inputs.",
            "Type": "dict",
            "Required": true,
            "dict variables": {}
        },
        "DataQualityJobOutputConfig": {
            "Description": "The output configuration for monitoring jobs.",
            "Type": "dict",
            "Required": true,
            "dict variables": {}
        },
        "JobResources": {
            "Description": "Identifies the resources to deploy for a monitoring job.",
            "Type": "dict",
            "Required": true,
            "dict variables": {}
        },
        "NetworkConfig": {
            "Description": "Specifies networking configuration for the monitoring job.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "RoleArn": {
            "Description": "The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to perform tasks on your behalf.",
            "Type": "string",
            "Required": true
        },
        "StoppingCondition": {
            "Description": "A time limit for how long the monitoring job is allowed to run before stopping.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "Tags": {
            "Description": "(Optional) An array of key-value pairs. For more information, see Using Cost Allocation Tags in the Amazon Web Services Billing and Cost Management User Guide .",
            "Type": "list",
            "Required": false,
            "list variables": {}
        }
    },
    "create_device_fleet": {
        "DeviceFleetName": {
            "Description": "The name of the fleet that the device belongs to.",
            "Type": "string",
            "Required": true
        },
        "RoleArn": {
            "Description": "The Amazon Resource Name (ARN) that has access to Amazon Web Services Internet of Things (IoT).",
            "Type": "string",
            "Required": false
        },
        "Description": {
            "Description": "A description of the fleet.",
            "Type": "string",
            "Required": false
        },
        "OutputConfig": {
            "Description": "The output configuration for storing sample data collected by the fleet.",
            "Type": "dict",
            "Required": true,
            "dict variables": {}
        },
        "Tags": {
            "Description": "Creates tags for the specified fleet.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "EnableIotRoleAlias": {
            "Description": "Whether to create an Amazon Web Services IoT Role Alias during device fleet creation. The name of the role alias generated will match this pattern: \"SageMakerEdge-{DeviceFleetName}\".\nFor example, if your device fleet is called \"demo-fleet\", the name of the role alias will be \"SageMakerEdge-demo-fleet\".",
            "Type": "boolean",
            "Required": false
        }
    },
    "create_domain": {
        "DomainName": {
            "Description": "A name for the domain.",
            "Type": "string",
            "Required": true
        },
        "AuthMode": {
            "Description": "The mode of authentication that members use to access the domain.",
            "Type": "string",
            "Required": true
        },
        "DefaultUserSettings": {
            "Description": "The default settings to use to create a user profile when UserSettings isn't specified in the call to the CreateUserProfile API.",
            "Type": "dict",
            "Required": true,
            "dict variables": {}
        },
        "SubnetIds": {
            "Description": "The VPC subnets that Studio uses for communication.",
            "Type": "list",
            "Required": true,
            "list variables": {}
        },
        "VpcId": {
            "Description": "The ID of the Amazon Virtual Private Cloud (VPC) that Studio uses for communication.",
            "Type": "string",
            "Required": true
        },
        "Tags": {
            "Description": "Tags to associated with the Domain. Each tag consists of a key and an optional value. Tag keys must be unique per resource. Tags are searchable using the Search API.\nTags that you specify for the Domain are also added to all Apps that the Domain launches.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "AppNetworkAccessType": {
            "Description": "Specifies the VPC used for non-EFS traffic. The default value is PublicInternetOnly .",
            "Type": "string",
            "Required": false,
            "string variables": {}
        },
        "HomeEfsFileSystemKmsKeyId": {
            "Description": "Use KmsKeyId .",
            "Type": "string",
            "Required": false
        },
        "KmsKeyId": {
            "Description": "SageMaker uses Amazon Web Services KMS to encrypt the EFS volume attached to the domain with an Amazon Web Services managed key by default. For more control, specify a customer managed key.",
            "Type": "string",
            "Required": false
        },
        "AppSecurityGroupManagement": {
            "Description": "The entity that creates and manages the required security groups for inter-app communication in VPCOnly mode. Required when CreateDomain.AppNetworkAccessType is VPCOnly and DomainSettings.RStudioServerProDomainSettings.DomainExecutionRoleArn is provided.",
            "Type": "string",
            "Required": false
        },
        "DomainSettings": {
            "Description": "A collection of Domain settings.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        }
    },
    "create_edge_deployment_plan": {
        "EdgeDeploymentPlanName": {
            "Description": "The name of the edge deployment plan.",
            "Type": "string",
            "Required": true
        },
        "ModelConfigs": {
            "Description": "List of models associated with the edge deployment plan.",
            "Type": "list",
            "Required": true,
            "list variables": {}
        },
        "DeviceFleetName": {
            "Description": "The device fleet used for this edge deployment plan.",
            "Type": "string",
            "Required": true
        },
        "Stages": {
            "Description": "List of stages of the edge deployment plan. The number of stages is limited to 10 per deployment.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "Tags": {
            "Description": "List of tags with which to tag the edge deployment plan.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        }
    },
    "create_edge_deployment_stage": {
        "EdgeDeploymentPlanName": {
            "Description": "The name of the edge deployment plan.",
            "Type": "string",
            "Required": true
        },
        "Stages": {
            "Description": "List of stages to be added to the edge deployment plan.",
            "Type": "list",
            "Required": true,
            "list variables": {}
        }
    },
    "create_edge_packaging_job": {
        "EdgePackagingJobName": {
            "Description": "The name of the edge packaging job.",
            "Type": "string",
            "Required": true
        },
        "CompilationJobName": {
            "Description": "The name of the SageMaker Neo compilation job that will be used to locate model artifacts for packaging.",
            "Type": "string",
            "Required": true
        },
        "ModelName": {
            "Description": "The name of the model.",
            "Type": "string",
            "Required": true
        },
        "ModelVersion": {
            "Description": "The version of the model.",
            "Type": "string",
            "Required": true
        },
        "RoleArn": {
            "Description": "The Amazon Resource Name (ARN) of an IAM role that enables Amazon SageMaker to download and upload the model, and to contact SageMaker Neo.",
            "Type": "string",
            "Required": true
        },
        "OutputConfig": {
            "Description": "Provides information about the output location for the packaged model.",
            "Type": "dict",
            "Required": true,
            "dict variables": {}
        },
        "ResourceKey": {
            "Description": "The Amazon Web Services KMS key to use when encrypting the EBS volume the edge packaging job runs on.",
            "Type": "string",
            "Required": false
        },
        "Tags": {
            "Description": "Creates tags for the packaging job.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        }
    },
    "create_endpoint": {
        "EndpointName": {
            "Description": "The name of the endpoint.The name must be unique within an Amazon Web Services Region in your Amazon Web Services account. The name is case-insensitive in CreateEndpoint, but the case is preserved and must be matched in .",
            "Type": "string",
            "Required": true
        },
        "EndpointConfigName": {
            "Description": "The name of an endpoint configuration. For more information, see  CreateEndpointConfig .",
            "Type": "string",
            "Required": true
        },
        "DeploymentConfig": {
            "Description": "The deployment configuration for an endpoint, which contains the desired deployment strategy and rollback configurations.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "Tags": {
            "Description": "An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in different ways, for example, by purpose, owner, or environment. For more information, see Tagging Amazon Web Services Resources .",
            "Type": "list",
            "Required": false,
            "list variables": {}
        }
    },
    "create_endpoint_config": {
        "EndpointConfigName": {
            "Description": "The name of the endpoint configuration. You specify this name in a  CreateEndpoint request.",
            "Type": "string",
            "Required": true
        },
        "ProductionVariants": {
            "Description": "An list of ProductionVariant objects, one for each model that you want to host at this endpoint.",
            "Type": "list",
            "Required": true,
            "list variables": {}
        },
        "DataCaptureConfig": {
            "Description": "Configuration to control how SageMaker captures inference data.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "Tags": {
            "Description": "An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in different ways, for example, by purpose, owner, or environment. For more information, see Tagging Amazon Web Services Resources .",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "KmsKeyId": {
            "Description": "The Amazon Resource Name (ARN) of a Amazon Web Services Key Management Service key that SageMaker uses to encrypt data on the storage volume attached to the ML compute instance that hosts the endpoint.\nThe KmsKeyId can be any of the following formats:\nThe KMS key policy must grant permission to the IAM role that you specify in your CreateEndpoint, UpdateEndpoint requests. For more information, refer to the Amazon Web Services Key Management Service section`Using Key Policies in Amazon Web Services KMS &lt;https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html&gt;`__",
            "Type": "string",
            "Required": false,
            "string variables": {}
        },
        "AsyncInferenceConfig": {
            "Description": "Specifies configuration for how an endpoint performs asynchronous inference. This is a required field in order for your Endpoint to be invoked using InvokeEndpointAsync .",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        }
    },
    "create_experiment": {
        "ExperimentName": {
            "Description": "The name of the experiment. The name must be unique in your Amazon Web Services account and is not case-sensitive.",
            "Type": "string",
            "Required": true
        },
        "DisplayName": {
            "Description": "The name of the experiment as displayed. The name doesn't need to be unique. If you don't specify DisplayName , the value in ExperimentName is displayed.",
            "Type": "string",
            "Required": false
        },
        "Description": {
            "Description": "The description of the experiment.",
            "Type": "string",
            "Required": false
        },
        "Tags": {
            "Description": "A list of tags to associate with the experiment. You can use  Search API to search on the tags.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        }
    },
    "create_feature_group": {
        "FeatureGroupName": {
            "Description": "The name of the FeatureGroup. The name must be unique within an Amazon Web Services Region in an Amazon Web Services account. The name:",
            "Type": "string",
            "Required": true,
            "string variables": {}
        },
        "RecordIdentifierFeatureName": {
            "Description": "The name of the Feature whose value uniquely identifies a Record defined in the FeatureStore. Only the latest record per identifier value will be stored in the OnlineStore. RecordIdentifierFeatureName must be one of feature definitions' names.\nYou use the RecordIdentifierFeatureName to access data in a FeatureStore .\nThis name:",
            "Type": "string",
            "Required": true,
            "string variables": {}
        },
        "EventTimeFeatureName": {
            "Description": "The name of the feature that stores the EventTime of a Record in a FeatureGroup .\nAn EventTime is a point in time when a new event occurs that corresponds to the creation or update of a Record in a FeatureGroup. All Records in the FeatureGroup must have a corresponding EventTime .\nAn EventTime can be a String or Fractional .",
            "Type": "string",
            "Required": true,
            "string variables": {}
        },
        "FeatureDefinitions": {
            "Description": "A list of Feature names and types. Name and Type is compulsory per Feature .\nValid feature FeatureType s are Integral, Fractional and String .\nYou can create up to 2,500 FeatureDefinition s per FeatureGroup .",
            "Type": "list",
            "Required": true,
            "list variables": {}
        },
        "OnlineStoreConfig": {
            "Description": "You can turn the OnlineStore on or off by specifying True for the EnableOnlineStore flag in OnlineStoreConfig ; the default value is False .\nYou can also include an Amazon Web Services KMS key ID (KMSKeyId ) for at-rest encryption of the OnlineStore .",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "OfflineStoreConfig": {
            "Description": "Use this to configure an OfflineFeatureStore. This parameter allows you to specify:\nTo learn more about this parameter, see  OfflineStoreConfig .",
            "Type": "dict",
            "Required": false,
            "dict variables": [
                {},
                {}
            ]
        },
        "RoleArn": {
            "Description": "The Amazon Resource Name (ARN) of the IAM execution role used to persist data into the OfflineStore if an OfflineStoreConfig is provided.",
            "Type": "string",
            "Required": false
        },
        "Description": {
            "Description": "A free-form description of a FeatureGroup .",
            "Type": "string",
            "Required": false
        },
        "Tags": {
            "Description": "Tags used to identify Features in each FeatureGroup .",
            "Type": "list",
            "Required": false,
            "list variables": {}
        }
    },
    "create_flow_definition": {
        "FlowDefinitionName": {
            "Description": "The name of your flow definition.",
            "Type": "string",
            "Required": true
        },
        "HumanLoopRequestSource": {
            "Description": "Container for configuring the source of human task requests. Use to specify if Amazon Rekognition or Amazon Textract is used as an integration source.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "HumanLoopActivationConfig": {
            "Description": "An object containing information about the events that trigger a human workflow.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "HumanLoopConfig": {
            "Description": "An object containing information about the tasks the human reviewers will perform.",
            "Type": "dict",
            "Required": true,
            "dict variables": {}
        },
        "OutputConfig": {
            "Description": "An object containing information about where the human review results will be uploaded.",
            "Type": "dict",
            "Required": true,
            "dict variables": {}
        },
        "RoleArn": {
            "Description": "The Amazon Resource Name (ARN) of the role needed to call other services on your behalf. For example, arn:aws:iam::1234567890:role/service-role/AmazonSageMaker-ExecutionRole-20180111T151298 .",
            "Type": "string",
            "Required": true
        },
        "Tags": {
            "Description": "An array of key-value pairs that contain metadata to help you categorize and organize a flow definition. Each tag consists of a key and a value, both of which you define.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        }
    },
    "create_human_task_ui": {
        "HumanTaskUiName": {
            "Description": "The name of the user interface you are creating.",
            "Type": "string",
            "Required": true
        },
        "UiTemplate": {
            "Description": "The Liquid template for the worker user interface.",
            "Type": "dict",
            "Required": true,
            "dict variables": {}
        },
        "Tags": {
            "Description": "An array of key-value pairs that contain metadata to help you categorize and organize a human review workflow user interface. Each tag consists of a key and a value, both of which you define.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        }
    },
    "create_hyper_parameter_tuning_job": {
        "HyperParameterTuningJobName": {
            "Description": "The name of the tuning job. This name is the prefix for the names of all training jobs that this tuning job launches. The name must be unique within the same Amazon Web Services account and Amazon Web Services Region. The name must have 1 to 32 characters. Valid characters are a-z, A-Z, 0-9, and : + = @ _ % - (hyphen). The name is not case sensitive.",
            "Type": "string",
            "Required": true
        },
        "HyperParameterTuningJobConfig": {
            "Description": "The  HyperParameterTuningJobConfig object that describes the tuning job, including the search strategy, the objective metric used to evaluate training jobs, ranges of parameters to search, and resource limits for the tuning job. For more information, see How Hyperparameter Tuning Works .",
            "Type": "dict",
            "Required": true,
            "dict variables": {}
        },
        "TrainingJobDefinition": {
            "Description": "The  HyperParameterTrainingJobDefinition object that describes the training jobs that this tuning job launches, including static hyperparameters, input data configuration, output data configuration, resource configuration, and stopping condition.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "TrainingJobDefinitions": {
            "Description": "A list of the  HyperParameterTrainingJobDefinition objects launched for this tuning job.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "WarmStartConfig": {
            "Description": "Specifies the configuration for starting the hyperparameter tuning job using one or more previous tuning jobs as a starting point. The results of previous tuning jobs are used to inform which combinations of hyperparameters to search over in the new tuning job.\nAll training jobs launched by the new hyperparameter tuning job are evaluated by using the objective metric. If you specify IDENTICAL_DATA_AND_ALGORITHM as the WarmStartType value for the warm start configuration, the training job that performs the best in the new tuning job is compared to the best training jobs from the parent tuning jobs. From these, the training job that performs the best as measured by the objective metric is returned as the overall best training job.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "Tags": {
            "Description": "An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in different ways, for example, by purpose, owner, or environment. For more information, see Tagging Amazon Web Services Resources .\nTags that you specify for the tuning job are also added to all training jobs that the tuning job launches.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        }
    },
    "create_image": {
        "Description": {
            "Description": "The description of the image.",
            "Type": "string",
            "Required": false
        },
        "DisplayName": {
            "Description": "The display name of the image. If not provided, ImageName is displayed.",
            "Type": "string",
            "Required": false
        },
        "ImageName": {
            "Description": "The name of the image. Must be unique to your account.",
            "Type": "string",
            "Required": true
        },
        "RoleArn": {
            "Description": "The Amazon Resource Name (ARN) of an IAM role that enables Amazon SageMaker to perform tasks on your behalf.",
            "Type": "string",
            "Required": true
        },
        "Tags": {
            "Description": "A list of tags to apply to the image.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        }
    },
    "create_image_version": {
        "BaseImage": {
            "Description": "The registry path of the container image to use as the starting point for this version. The path is an Amazon Elastic Container Registry (ECR) URI in the following format:",
            "Type": "string",
            "Required": true
        },
        "ClientToken": {
            "Description": "A unique ID. If not specified, the Amazon Web Services CLI and Amazon Web Services SDKs, such as the SDK for Python (Boto3), add a unique value to the call.\nThis field is autopopulated if not provided.",
            "Type": "string",
            "Required": true
        },
        "ImageName": {
            "Description": "The ImageName of the Image to create a version of.",
            "Type": "string",
            "Required": true
        }
    },
    "create_inference_recommendations_job": {
        "JobName": {
            "Description": "A name for the recommendation job. The name must be unique within the Amazon Web Services Region and within your Amazon Web Services account.",
            "Type": "string",
            "Required": true
        },
        "JobType": {
            "Description": "Defines the type of recommendation job. Specify Default to initiate an instance recommendation and Advanced to initiate a load test. If left unspecified, Amazon SageMaker Inference Recommender will run an instance recommendation (DEFAULT ) job.",
            "Type": "string",
            "Required": true
        },
        "RoleArn": {
            "Description": "The Amazon Resource Name (ARN) of an IAM role that enables Amazon SageMaker to perform tasks on your behalf.",
            "Type": "string",
            "Required": true
        },
        "InputConfig": {
            "Description": "Provides information about the versioned model package Amazon Resource Name (ARN), the traffic pattern, and endpoint configurations.",
            "Type": "dict",
            "Required": true,
            "dict variables": {}
        },
        "JobDescription": {
            "Description": "Description of the recommendation job.",
            "Type": "string",
            "Required": false
        },
        "StoppingConditions": {
            "Description": "A set of conditions for stopping a recommendation job. If any of the conditions are met, the job is automatically stopped.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "OutputConfig": {
            "Description": "Provides information about the output artifacts and the KMS key to use for Amazon S3 server-side encryption.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "Tags": {
            "Description": "The metadata that you apply to Amazon Web Services resources to help you categorize and organize them. Each tag consists of a key and a value, both of which you define. For more information, see Tagging Amazon Web Services Resources in the Amazon Web Services General Reference.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        }
    },
    "create_labeling_job": {
        "LabelingJobName": {
            "Description": "The name of the labeling job. This name is used to identify the job in a list of labeling jobs. Labeling job names must be unique within an Amazon Web Services account and region. LabelingJobName is not case sensitive. For example, Example-job and example-job are considered the same labeling job name by Ground Truth.",
            "Type": "string",
            "Required": true
        },
        "LabelAttributeName": {
            "Description": "The attribute name to use for the label in the output manifest file. This is the key for the key/value pair formed with the label that a worker assigns to the object. The LabelAttributeName must meet the following requirements.",
            "Type": "string",
            "Required": true,
            "string variables": {}
        },
        "InputConfig": {
            "Description": "Input data for the labeling job, such as the Amazon S3 location of the data objects and the location of the manifest file that describes the data objects.\nYou must specify at least one of the following: S3DataSource or SnsDataSource .\nIf you use the Amazon Mechanical Turk workforce, your input data should not include confidential information, personal information or protected health information. Use ContentClassifiers to specify that your data is free of personally identifiable information and adult content.",
            "Type": "dict",
            "Required": true,
            "dict variables": [
                {},
                {}
            ]
        },
        "OutputConfig": {
            "Description": "The location of the output data and the Amazon Web Services Key Management Service key ID for the key used to encrypt the output data, if any.",
            "Type": "dict",
            "Required": true,
            "dict variables": {}
        },
        "RoleArn": {
            "Description": "The Amazon Resource Number (ARN) that Amazon SageMaker assumes to perform tasks on your behalf during data labeling. You must grant this role the necessary permissions so that Amazon SageMaker can successfully complete data labeling.",
            "Type": "string",
            "Required": true
        },
        "LabelCategoryConfigS3Uri": {
            "Description": "The S3 URI of the file, referred to as a label category configuration file, that defines the categories used to label the data objects.\nFor 3D point cloud and video frame task types, you can add label category attributes and frame attributes to your label category configuration file. To learn how, see Create a Labeling Category Configuration File for 3D Point Cloud Labeling Jobs .\nFor named entity recognition jobs, in addition to \"labels\", you must provide worker instructions in the label category configuration file using the \"instructions\" parameter: \"instructions\": {\"shortInstruction\":\"&lt;h1&gt;Add header&lt;/h1&gt;&lt;p&gt;Add Instructions&lt;/p&gt;\", \"fullInstruction\":\"&lt;p&gt;Add additional instructions.&lt;/p&gt;\"}. For details and an example, see Create a Named Entity Recognition Labeling Job (API) .\nFor all other built-in task types and custom tasks, your label category configuration file must be a JSON file in the following format. Identify the labels you want to use by replacing label_1, label_2 ,``...`` ,``label_n`` with your label categories.\nNote the following about the label category configuration file:",
            "Type": "string",
            "Required": false,
            "string variables": {}
        },
        "StoppingConditions": {
            "Description": "A set of conditions for stopping the labeling job. If any of the conditions are met, the job is automatically stopped. You can use these conditions to control the cost of data labeling.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "LabelingJobAlgorithmsConfig": {
            "Description": "Configures the information required to perform automated data labeling.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "HumanTaskConfig": {
            "Description": "Configures the labeling task and how it is presented to workers; including, but not limited to price, keywords, and batch size (task count).",
            "Type": "dict",
            "Required": true,
            "dict variables": {}
        },
        "Tags": {
            "Description": "An array of key/value pairs. For more information, see Using Cost Allocation Tags in the Amazon Web Services Billing and Cost Management User Guide .",
            "Type": "list",
            "Required": false,
            "list variables": {}
        }
    },
    "create_model": {
        "ModelName": {
            "Description": "The name of the new model.",
            "Type": "string",
            "Required": true
        },
        "PrimaryContainer": {
            "Description": "The location of the primary docker image containing inference code, associated artifacts, and custom environment map that the inference code uses when the model is deployed for predictions.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "Containers": {
            "Description": "Specifies the containers in the inference pipeline.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "InferenceExecutionConfig": {
            "Description": "Specifies details of how containers in a multi-container endpoint are called.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "ExecutionRoleArn": {
            "Description": "The Amazon Resource Name (ARN) of the IAM role that SageMaker can assume to access model artifacts and docker image for deployment on ML compute instances or for batch transform jobs. Deploying on ML compute instances is part of model hosting. For more information, see SageMaker Roles .",
            "Type": "string",
            "Required": true
        },
        "Tags": {
            "Description": "An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in different ways, for example, by purpose, owner, or environment. For more information, see Tagging Amazon Web Services Resources .",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "VpcConfig": {
            "Description": "A  VpcConfig object that specifies the VPC that you want your model to connect to. Control access to and from your model container by configuring the VPC. VpcConfig is used in hosting services and in batch transform. For more information, see Protect Endpoints by Using an Amazon Virtual Private Cloud and Protect Data in Batch Transform Jobs by Using an Amazon Virtual Private Cloud .",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "EnableNetworkIsolation": {
            "Description": "Isolates the model container. No inbound or outbound network calls can be made to or from the model container.",
            "Type": "boolean",
            "Required": false
        }
    },
    "create_model_bias_job_definition": {
        "JobDefinitionName": {
            "Description": "The name of the bias job definition. The name must be unique within an Amazon Web Services Region in the Amazon Web Services account.",
            "Type": "string",
            "Required": true
        },
        "ModelBiasBaselineConfig": {
            "Description": "The baseline configuration for a model bias job.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "ModelBiasAppSpecification": {
            "Description": "Configures the model bias job to run a specified Docker container image.",
            "Type": "dict",
            "Required": true,
            "dict variables": {}
        },
        "ModelBiasJobInput": {
            "Description": "Inputs for the model bias job.",
            "Type": "dict",
            "Required": true,
            "dict variables": {}
        },
        "ModelBiasJobOutputConfig": {
            "Description": "The output configuration for monitoring jobs.",
            "Type": "dict",
            "Required": true,
            "dict variables": {}
        },
        "JobResources": {
            "Description": "Identifies the resources to deploy for a monitoring job.",
            "Type": "dict",
            "Required": true,
            "dict variables": {}
        },
        "NetworkConfig": {
            "Description": "Networking options for a model bias job.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "RoleArn": {
            "Description": "The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to perform tasks on your behalf.",
            "Type": "string",
            "Required": true
        },
        "StoppingCondition": {
            "Description": "A time limit for how long the monitoring job is allowed to run before stopping.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "Tags": {
            "Description": "(Optional) An array of key-value pairs. For more information, see Using Cost Allocation Tags in the Amazon Web Services Billing and Cost Management User Guide .",
            "Type": "list",
            "Required": false,
            "list variables": {}
        }
    },
    "create_model_explainability_job_definition": {
        "JobDefinitionName": {
            "Description": "The name of the model explainability job definition. The name must be unique within an Amazon Web Services Region in the Amazon Web Services account.",
            "Type": "string",
            "Required": true
        },
        "ModelExplainabilityBaselineConfig": {
            "Description": "The baseline configuration for a model explainability job.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "ModelExplainabilityAppSpecification": {
            "Description": "Configures the model explainability job to run a specified Docker container image.",
            "Type": "dict",
            "Required": true,
            "dict variables": {}
        },
        "ModelExplainabilityJobInput": {
            "Description": "Inputs for the model explainability job.",
            "Type": "dict",
            "Required": true,
            "dict variables": {}
        },
        "ModelExplainabilityJobOutputConfig": {
            "Description": "The output configuration for monitoring jobs.",
            "Type": "dict",
            "Required": true,
            "dict variables": {}
        },
        "JobResources": {
            "Description": "Identifies the resources to deploy for a monitoring job.",
            "Type": "dict",
            "Required": true,
            "dict variables": {}
        },
        "NetworkConfig": {
            "Description": "Networking options for a model explainability job.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "RoleArn": {
            "Description": "The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to perform tasks on your behalf.",
            "Type": "string",
            "Required": true
        },
        "StoppingCondition": {
            "Description": "A time limit for how long the monitoring job is allowed to run before stopping.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "Tags": {
            "Description": "(Optional) An array of key-value pairs. For more information, see Using Cost Allocation Tags in the Amazon Web Services Billing and Cost Management User Guide .",
            "Type": "list",
            "Required": false,
            "list variables": {}
        }
    },
    "create_model_package": {
        "ModelPackageName": {
            "Description": "The name of the model package. The name must have 1 to 63 characters. Valid characters are a-z, A-Z, 0-9, and - (hyphen).\nThis parameter is required for unversioned models. It is not applicable to versioned models.",
            "Type": "string",
            "Required": false
        },
        "ModelPackageGroupName": {
            "Description": "The name or Amazon Resource Name (ARN) of the model package group that this model version belongs to.\nThis parameter is required for versioned models, and does not apply to unversioned models.",
            "Type": "string",
            "Required": false
        },
        "ModelPackageDescription": {
            "Description": "A description of the model package.",
            "Type": "string",
            "Required": false
        },
        "InferenceSpecification": {
            "Description": "Specifies details about inference jobs that can be run with models based on this model package, including the following:",
            "Type": "dict",
            "Required": false,
            "dict variables": [
                {},
                {}
            ]
        },
        "ValidationSpecification": {
            "Description": "Specifies configurations for one or more transform jobs that SageMaker runs to test the model package.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "SourceAlgorithmSpecification": {
            "Description": "Details about the algorithm that was used to create the model package.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "CertifyForMarketplace": {
            "Description": "Whether to certify the model package for listing on Amazon Web Services Marketplace.\nThis parameter is optional for unversioned models, and does not apply to versioned models.",
            "Type": "boolean",
            "Required": false
        },
        "Tags": {
            "Description": "A list of key value pairs associated with the model. For more information, see Tagging Amazon Web Services resources in the Amazon Web Services General Reference Guide .",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "ModelApprovalStatus": {
            "Description": "Whether the model is approved for deployment.\nThis parameter is optional for versioned models, and does not apply to unversioned models.\nFor versioned models, the value of this parameter must be set to Approved to deploy the model.",
            "Type": "string",
            "Required": false
        },
        "MetadataProperties": {
            "Description": "Metadata properties of the tracking entity, trial, or trial component.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "ModelMetrics": {
            "Description": "A structure that contains model metrics reports.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "ClientToken": {
            "Description": "A unique token that guarantees that the call to this API is idempotent.\nThis field is autopopulated if not provided.",
            "Type": "string",
            "Required": false
        },
        "CustomerMetadataProperties": {
            "Description": "The metadata properties associated with the model package versions.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "DriftCheckBaselines": {
            "Description": "Represents the drift check baselines that can be used when the model monitor is set using the model package. For more information, see the topic on Drift Detection against Previous Baselines in SageMaker Pipelines in the Amazon SageMaker Developer Guide .",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "Domain": {
            "Description": "The machine learning domain of your model package and its components. Common machine learning domains include computer vision and natural language processing.",
            "Type": "string",
            "Required": false
        },
        "Task": {
            "Description": "The machine learning task your model package accomplishes. Common machine learning tasks include object detection and image classification. The following tasks are supported by Inference Recommender: \"IMAGE_CLASSIFICATION\" | \"OBJECT_DETECTION\" | \"TEXT_GENERATION\" |\"IMAGE_SEGMENTATION\" | \"FILL_MASK\" | \"CLASSIFICATION\" | \"REGRESSION\" | \"OTHER\" .\nSpecify \"OTHER\" if none of the tasks listed fit your use case.",
            "Type": "string",
            "Required": false
        },
        "SamplePayloadUrl": {
            "Description": "The Amazon Simple Storage Service (Amazon S3) path where the sample payload are stored. This path must point to a single gzip compressed tar archive (.tar.gz suffix).",
            "Type": "string",
            "Required": false
        },
        "AdditionalInferenceSpecifications": {
            "Description": "An array of additional Inference Specification objects. Each additional Inference Specification specifies artifacts based on this model package that can be used on inference endpoints. Generally used with SageMaker Neo to store the compiled artifacts.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        }
    },
    "create_model_package_group": {
        "ModelPackageGroupName": {
            "Description": "The name of the model group.",
            "Type": "string",
            "Required": true
        },
        "ModelPackageGroupDescription": {
            "Description": "A description for the model group.",
            "Type": "string",
            "Required": false
        },
        "Tags": {
            "Description": "A list of key value pairs associated with the model group. For more information, see Tagging Amazon Web Services resources in the Amazon Web Services General Reference Guide .",
            "Type": "list",
            "Required": false,
            "list variables": {}
        }
    },
    "create_model_quality_job_definition": {
        "JobDefinitionName": {
            "Description": "The name of the monitoring job definition.",
            "Type": "string",
            "Required": true
        },
        "ModelQualityBaselineConfig": {
            "Description": "Specifies the constraints and baselines for the monitoring job.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "ModelQualityAppSpecification": {
            "Description": "The container that runs the monitoring job.",
            "Type": "dict",
            "Required": true,
            "dict variables": {}
        },
        "ModelQualityJobInput": {
            "Description": "A list of the inputs that are monitored. Currently endpoints are supported.",
            "Type": "dict",
            "Required": true,
            "dict variables": {}
        },
        "ModelQualityJobOutputConfig": {
            "Description": "The output configuration for monitoring jobs.",
            "Type": "dict",
            "Required": true,
            "dict variables": {}
        },
        "JobResources": {
            "Description": "Identifies the resources to deploy for a monitoring job.",
            "Type": "dict",
            "Required": true,
            "dict variables": {}
        },
        "NetworkConfig": {
            "Description": "Specifies the network configuration for the monitoring job.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "RoleArn": {
            "Description": "The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to perform tasks on your behalf.",
            "Type": "string",
            "Required": true
        },
        "StoppingCondition": {
            "Description": "A time limit for how long the monitoring job is allowed to run before stopping.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "Tags": {
            "Description": "(Optional) An array of key-value pairs. For more information, see Using Cost Allocation Tags in the Amazon Web Services Billing and Cost Management User Guide .",
            "Type": "list",
            "Required": false,
            "list variables": {}
        }
    },
    "create_monitoring_schedule": {
        "MonitoringScheduleName": {
            "Description": "The name of the monitoring schedule. The name must be unique within an Amazon Web Services Region within an Amazon Web Services account.",
            "Type": "string",
            "Required": true
        },
        "MonitoringScheduleConfig": {
            "Description": "The configuration object that specifies the monitoring schedule and defines the monitoring job.",
            "Type": "dict",
            "Required": true,
            "dict variables": {}
        },
        "Tags": {
            "Description": "(Optional) An array of key-value pairs. For more information, see `Using Cost Allocation Tags &lt; https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-whatURL&gt;`__ in the Amazon Web Services Billing and Cost Management User Guide .",
            "Type": "list",
            "Required": false,
            "list variables": {}
        }
    },
    "create_notebook_instance": {
        "NotebookInstanceName": {
            "Description": "The name of the new notebook instance.",
            "Type": "string",
            "Required": true
        },
        "InstanceType": {
            "Description": "The type of ML compute instance to launch for the notebook instance.",
            "Type": "string",
            "Required": true
        },
        "SubnetId": {
            "Description": "The ID of the subnet in a VPC to which you would like to have a connectivity from your ML compute instance.",
            "Type": "string",
            "Required": false
        },
        "SecurityGroupIds": {
            "Description": "The VPC security group IDs, in the form sg-xxxxxxxx. The security groups must be for the same VPC as specified in the subnet.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "RoleArn": {
            "Description": "When you send any requests to Amazon Web Services resources from the notebook instance, SageMaker assumes this role to perform tasks on your behalf. You must grant this role necessary permissions so SageMaker can perform these tasks. The policy must allow the SageMaker service principal (sagemaker.amazonaws.com) permissions to assume this role. For more information, see SageMaker Roles .",
            "Type": "string",
            "Required": true
        },
        "KmsKeyId": {
            "Description": "The Amazon Resource Name (ARN) of a Amazon Web Services Key Management Service key that SageMaker uses to encrypt data on the storage volume attached to your notebook instance. The KMS key you provide must be enabled. For information, see Enabling and Disabling Keys in the Amazon Web Services Key Management Service Developer Guide .",
            "Type": "string",
            "Required": false
        },
        "Tags": {
            "Description": "An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in different ways, for example, by purpose, owner, or environment. For more information, see Tagging Amazon Web Services Resources .",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "LifecycleConfigName": {
            "Description": "The name of a lifecycle configuration to associate with the notebook instance. For information about lifestyle configurations, see Step 2.1: (Optional) Customize a Notebook Instance .",
            "Type": "string",
            "Required": false
        },
        "DirectInternetAccess": {
            "Description": "Sets whether SageMaker provides internet access to the notebook instance. If you set this to Disabled this notebook instance is able to access resources only in your VPC, and is not be able to connect to SageMaker training and endpoint services unless you configure a NAT Gateway in your VPC.\nFor more information, see Notebook Instances Are Internet-Enabled by Default. You can set the value of this parameter to Disabled only if you set a value for the SubnetId parameter.",
            "Type": "string",
            "Required": false
        },
        "VolumeSizeInGB": {
            "Description": "The size, in GB, of the ML storage volume to attach to the notebook instance. The default value is 5 GB.",
            "Type": "integer",
            "Required": false
        },
        "AcceleratorTypes": {
            "Description": "A list of Elastic Inference (EI) instance types to associate with this notebook instance. Currently, only one instance type can be associated with a notebook instance. For more information, see Using Elastic Inference in Amazon SageMaker .",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "DefaultCodeRepository": {
            "Description": "A Git repository to associate with the notebook instance as its default code repository. This can be either the name of a Git repository stored as a resource in your account, or the URL of a Git repository in Amazon Web Services CodeCommit or in any other Git repository. When you open a notebook instance, it opens in the directory that contains this repository. For more information, see Associating Git Repositories with SageMaker Notebook Instances .",
            "Type": "string",
            "Required": false
        },
        "AdditionalCodeRepositories": {
            "Description": "An array of up to three Git repositories to associate with the notebook instance. These can be either the names of Git repositories stored as resources in your account, or the URL of Git repositories in Amazon Web Services CodeCommit or in any other Git repository. These repositories are cloned at the same level as the default repository of your notebook instance. For more information, see Associating Git Repositories with SageMaker Notebook Instances .",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "RootAccess": {
            "Description": "Whether root access is enabled or disabled for users of the notebook instance. The default value is Enabled .",
            "Type": "string",
            "Required": false
        },
        "PlatformIdentifier": {
            "Description": "The platform identifier of the notebook instance runtime environment.",
            "Type": "string",
            "Required": false
        },
        "InstanceMetadataServiceConfiguration": {
            "Description": "Information on the IMDS configuration of the notebook instance",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        }
    },
    "create_notebook_instance_lifecycle_config": {
        "NotebookInstanceLifecycleConfigName": {
            "Description": "The name of the lifecycle configuration.",
            "Type": "string",
            "Required": true
        },
        "OnCreate": {
            "Description": "A shell script that runs only once, when you create a notebook instance. The shell script must be a base64-encoded string.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "OnStart": {
            "Description": "A shell script that runs every time you start a notebook instance, including when you create the notebook instance. The shell script must be a base64-encoded string.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        }
    },
    "create_pipeline": {
        "PipelineName": {
            "Description": "The name of the pipeline.",
            "Type": "string",
            "Required": true
        },
        "PipelineDisplayName": {
            "Description": "The display name of the pipeline.",
            "Type": "string",
            "Required": false
        },
        "PipelineDefinition": {
            "Description": "The JSON pipeline definition of the pipeline.",
            "Type": "string",
            "Required": false
        },
        "PipelineDefinitionS3Location": {
            "Description": "The location of the pipeline definition stored in Amazon S3. If specified, SageMaker will retrieve the pipeline definition from this location.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "PipelineDescription": {
            "Description": "A description of the pipeline.",
            "Type": "string",
            "Required": false
        },
        "ClientRequestToken": {
            "Description": "A unique, case-sensitive identifier that you provide to ensure the idempotency of the operation. An idempotent operation completes no more than one time.\nThis field is autopopulated if not provided.",
            "Type": "string",
            "Required": true
        },
        "RoleArn": {
            "Description": "The Amazon Resource Name (ARN) of the role used by the pipeline to access and create resources.",
            "Type": "string",
            "Required": true
        },
        "Tags": {
            "Description": "A list of tags to apply to the created pipeline.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "ParallelismConfiguration": {
            "Description": "This is the configuration that controls the parallelism of the pipeline. If specified, it applies to all runs of this pipeline by default.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        }
    },
    "create_presigned_domain_url": {
        "DomainId": {
            "Description": "The domain ID.",
            "Type": "string",
            "Required": true
        },
        "UserProfileName": {
            "Description": "The name of the UserProfile to sign-in as.",
            "Type": "string",
            "Required": true
        },
        "SessionExpirationDurationInSeconds": {
            "Description": "The session expiration duration in seconds. This value defaults to 43200.",
            "Type": "integer",
            "Required": false
        },
        "ExpiresInSeconds": {
            "Description": "The number of seconds until the pre-signed URL expires. This value defaults to 300.",
            "Type": "integer",
            "Required": false
        }
    },
    "create_presigned_notebook_instance_url": {
        "NotebookInstanceName": {
            "Description": "The name of the notebook instance.",
            "Type": "string",
            "Required": true
        },
        "SessionExpirationDurationInSeconds": {
            "Description": "The duration of the session, in seconds. The default is 12 hours.",
            "Type": "integer",
            "Required": false
        }
    },
    "create_processing_job": {
        "ProcessingInputs": {
            "Description": "An array of inputs configuring the data to download into the processing container.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "ProcessingOutputConfig": {
            "Description": "Output configuration for the processing job.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "ProcessingJobName": {
            "Description": "The name of the processing job. The name must be unique within an Amazon Web Services Region in the Amazon Web Services account.",
            "Type": "string",
            "Required": true
        },
        "ProcessingResources": {
            "Description": "Identifies the resources, ML compute instances, and ML storage volumes to deploy for a processing job. In distributed training, you specify more than one instance.",
            "Type": "dict",
            "Required": true,
            "dict variables": {}
        },
        "StoppingCondition": {
            "Description": "The time limit for how long the processing job is allowed to run.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "AppSpecification": {
            "Description": "Configures the processing job to run a specified Docker container image.",
            "Type": "dict",
            "Required": true,
            "dict variables": {}
        },
        "Environment": {
            "Description": "The environment variables to set in the Docker container. Up to 100 key and values entries in the map are supported.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "NetworkConfig": {
            "Description": "Networking options for a processing job, such as whether to allow inbound and outbound network calls to and from processing containers, and the VPC subnets and security groups to use for VPC-enabled processing jobs.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "RoleArn": {
            "Description": "The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to perform tasks on your behalf.",
            "Type": "string",
            "Required": true
        },
        "Tags": {
            "Description": "(Optional) An array of key-value pairs. For more information, see Using Cost Allocation Tags in the Amazon Web Services Billing and Cost Management User Guide .",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "ExperimentConfig": {
            "Description": "Associates a SageMaker job as a trial component with an experiment and trial. Specified when you call the following APIs:",
            "Type": "dict",
            "Required": false,
            "dict variables": [
                {},
                {}
            ]
        }
    },
    "create_project": {
        "ProjectName": {
            "Description": "The name of the project.",
            "Type": "string",
            "Required": true
        },
        "ProjectDescription": {
            "Description": "A description for the project.",
            "Type": "string",
            "Required": false
        },
        "ServiceCatalogProvisioningDetails": {
            "Description": "The product ID and provisioning artifact ID to provision a service catalog. The provisioning artifact ID will default to the latest provisioning artifact ID of the product, if you don't provide the provisioning artifact ID. For more information, see What is Amazon Web Services Service Catalog .",
            "Type": "dict",
            "Required": true,
            "dict variables": {}
        },
        "Tags": {
            "Description": "An array of key-value pairs that you want to use to organize and track your Amazon Web Services resource costs. For more information, see Tagging Amazon Web Services resources in the Amazon Web Services General Reference Guide .",
            "Type": "list",
            "Required": false,
            "list variables": {}
        }
    },
    "create_studio_lifecycle_config": {
        "StudioLifecycleConfigName": {
            "Description": "The name of the Studio Lifecycle Configuration to create.",
            "Type": "string",
            "Required": true
        },
        "StudioLifecycleConfigContent": {
            "Description": "The content of your Studio Lifecycle Configuration script. This content must be base64 encoded.",
            "Type": "string",
            "Required": true
        },
        "StudioLifecycleConfigAppType": {
            "Description": "The App type that the Lifecycle Configuration is attached to.",
            "Type": "string",
            "Required": true
        },
        "Tags": {
            "Description": "Tags to be associated with the Lifecycle Configuration. Each tag consists of a key and an optional value. Tag keys must be unique per resource. Tags are searchable using the Search API.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        }
    },
    "create_training_job": {
        "TrainingJobName": {
            "Description": "The name of the training job. The name must be unique within an Amazon Web Services Region in an Amazon Web Services account.",
            "Type": "string",
            "Required": true
        },
        "HyperParameters": {
            "Description": "Algorithm-specific parameters that influence the quality of the model. You set hyperparameters before you start the learning process. For a list of hyperparameters for each training algorithm provided by SageMaker, see Algorithms .\nYou can specify a maximum of 100 hyperparameters. Each hyperparameter is a key-value pair. Each key and value is limited to 256 characters, as specified by the Length Constraint .",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "AlgorithmSpecification": {
            "Description": "The registry path of the Docker image that contains the training algorithm and algorithm-specific metadata, including the input mode. For more information about algorithms provided by SageMaker, see Algorithms. For information about providing your own algorithms, see Using Your Own Algorithms with Amazon SageMaker .",
            "Type": "dict",
            "Required": true,
            "dict variables": {}
        },
        "RoleArn": {
            "Description": "The Amazon Resource Name (ARN) of an IAM role that SageMaker can assume to perform tasks on your behalf.\nDuring model training, SageMaker needs your permission to read input data from an S3 bucket, download a Docker image that contains training code, write model artifacts to an S3 bucket, write logs to Amazon CloudWatch Logs, and publish metrics to Amazon CloudWatch. You grant permissions for all of these tasks to an IAM role. For more information, see SageMaker Roles .",
            "Type": "string",
            "Required": true
        },
        "InputDataConfig": {
            "Description": "An array of Channel objects. Each channel is a named input source. InputDataConfig describes the input data and its location.\nAlgorithms can accept input data from one or more channels. For example, an algorithm might have two channels of input data, training_data and validation_data. The configuration for each channel provides the S3, EFS, or FSx location where the input data is stored. It also provides information about the stored data: the MIME type, compression method, and whether the data is wrapped in RecordIO format.\nDepending on the input mode that the algorithm supports, SageMaker either copies input data files from an S3 bucket to a local directory in the Docker container, or makes it available as input streams. For example, if you specify an EFS location, input data files are available as input streams. They do not need to be downloaded.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "OutputDataConfig": {
            "Description": "Specifies the path to the S3 location where you want to store model artifacts. SageMaker creates subfolders for the artifacts.",
            "Type": "dict",
            "Required": true,
            "dict variables": {}
        },
        "ResourceConfig": {
            "Description": "The resources, including the ML compute instances and ML storage volumes, to use for model training.\nML storage volumes store model artifacts and incremental states. Training algorithms might also use ML storage volumes for scratch space. If you want SageMaker to use the ML storage volume to store the training data, choose File as the TrainingInputMode in the algorithm specification. For distributed training algorithms, specify an instance count greater than 1.",
            "Type": "dict",
            "Required": true,
            "dict variables": {}
        },
        "VpcConfig": {
            "Description": "A  VpcConfig object that specifies the VPC that you want your training job to connect to. Control access to and from your training container by configuring the VPC. For more information, see Protect Training Jobs by Using an Amazon Virtual Private Cloud .",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "StoppingCondition": {
            "Description": "Specifies a limit to how long a model training job can run. It also specifies how long a managed Spot training job has to complete. When the job reaches the time limit, SageMaker ends the training job. Use this API to cap model training costs.\nTo stop a job, SageMaker sends the algorithm the SIGTERM signal, which delays job termination for 120 seconds. Algorithms can use this 120-second window to save the model artifacts, so the results of training are not lost.",
            "Type": "dict",
            "Required": true,
            "dict variables": {}
        },
        "Tags": {
            "Description": "An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in different ways, for example, by purpose, owner, or environment. For more information, see Tagging Amazon Web Services Resources .",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "EnableNetworkIsolation": {
            "Description": "Isolates the training container. No inbound or outbound network calls can be made, except for calls between peers within a training cluster for distributed training. If you enable network isolation for training jobs that are configured to use a VPC, SageMaker downloads and uploads customer data and model artifacts through the specified VPC, but the training container does not have network access.",
            "Type": "boolean",
            "Required": false
        },
        "EnableInterContainerTrafficEncryption": {
            "Description": "To encrypt all communications between ML compute instances in distributed training, choose True . Encryption provides greater security for distributed training, but training might take longer. How long it takes depends on the amount of communication between compute instances, especially if you use a deep learning algorithm in distributed training. For more information, see Protect Communications Between ML Compute Instances in a Distributed Training Job .",
            "Type": "boolean",
            "Required": false
        },
        "EnableManagedSpotTraining": {
            "Description": "To train models using managed spot training, choose True. Managed spot training provides a fully managed and scalable infrastructure for training machine learning models. this option is useful when training jobs can be interrupted and when there is flexibility when the training job is run.\nThe complete and intermediate results of jobs are stored in an Amazon S3 bucket, and can be used as a starting point to train models incrementally. Amazon SageMaker provides metrics and logs in CloudWatch. They can be used to see when managed spot training jobs are running, interrupted, resumed, or completed.",
            "Type": "boolean",
            "Required": false
        },
        "CheckpointConfig": {
            "Description": "Contains information about the output location for managed spot training checkpoint data.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "DebugHookConfig": {
            "Description": "Configuration information for the Debugger hook parameters, metric and tensor collections, and storage paths. To learn more about how to configure the DebugHookConfig parameter, see Use the SageMaker and Debugger Configuration API Operations to Create, Update, and Debug Your Training Job .",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "DebugRuleConfigurations": {
            "Description": "Configuration information for Debugger rules for debugging output tensors.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "TensorBoardOutputConfig": {
            "Description": "Configuration of storage locations for the Debugger TensorBoard output data.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "ExperimentConfig": {
            "Description": "Associates a SageMaker job as a trial component with an experiment and trial. Specified when you call the following APIs:",
            "Type": "dict",
            "Required": false,
            "dict variables": [
                {},
                {}
            ]
        },
        "ProfilerConfig": {
            "Description": "Configuration information for Debugger system monitoring, framework profiling, and storage paths.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "ProfilerRuleConfigurations": {
            "Description": "Configuration information for Debugger rules for profiling system and framework metrics.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "Environment": {
            "Description": "The environment variables to set in the Docker container.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "RetryStrategy": {
            "Description": "The number of times to retry the job when the job fails due to an InternalServerError .",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        }
    },
    "create_transform_job": {
        "TransformJobName": {
            "Description": "The name of the transform job. The name must be unique within an Amazon Web Services Region in an Amazon Web Services account.",
            "Type": "string",
            "Required": true
        },
        "ModelName": {
            "Description": "The name of the model that you want to use for the transform job. ModelName must be the name of an existing Amazon SageMaker model within an Amazon Web Services Region in an Amazon Web Services account.",
            "Type": "string",
            "Required": true
        },
        "MaxConcurrentTransforms": {
            "Description": "The maximum number of parallel requests that can be sent to each instance in a transform job. If MaxConcurrentTransforms is set to 0 or left unset, Amazon SageMaker checks the optional execution-parameters to determine the settings for your chosen algorithm. If the execution-parameters endpoint is not enabled, the default value is 1 . For more information on execution-parameters, see How Containers Serve Requests . For built-in algorithms, you don't need to set a value for MaxConcurrentTransforms .",
            "Type": "integer",
            "Required": false
        },
        "ModelClientConfig": {
            "Description": "Configures the timeout and maximum number of retries for processing a transform job invocation.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "MaxPayloadInMB": {
            "Description": "The maximum allowed size of the payload, in MB. A payload is the data portion of a record (without metadata). The value in MaxPayloadInMB must be greater than, or equal to, the size of a single record. To estimate the size of a record in MB, divide the size of your dataset by the number of records. To ensure that the records fit within the maximum payload size, we recommend using a slightly larger value. The default value is 6 MB.\nThe value of MaxPayloadInMB cannot be greater than 100 MB. If you specify the MaxConcurrentTransforms parameter, the value of (MaxConcurrentTransforms * MaxPayloadInMB) also cannot exceed 100 MB.\nFor cases where the payload might be arbitrarily large and is transmitted using HTTP chunked encoding, set the value to 0. This feature works only in supported algorithms. Currently, Amazon SageMaker built-in algorithms do not support HTTP chunked encoding.",
            "Type": "integer",
            "Required": false
        },
        "BatchStrategy": {
            "Description": "Specifies the number of records to include in a mini-batch for an HTTP inference request. A record  is a single unit of input data that inference can be made on. For example, a single line in a CSV file is a record.\nTo enable the batch strategy, you must set the SplitType property to Line, RecordIO, or TFRecord .\nTo use only one record when making an HTTP invocation request to a container, set BatchStrategy to SingleRecord and SplitType to Line .\nTo fit as many records in a mini-batch as can fit within the MaxPayloadInMB limit, set BatchStrategy to MultiRecord and SplitType to Line .",
            "Type": "string",
            "Required": false
        },
        "Environment": {
            "Description": "The environment variables to set in the Docker container. We support up to 16 key and values entries in the map.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "TransformInput": {
            "Description": "Describes the input source and the way the transform job consumes it.",
            "Type": "dict",
            "Required": true,
            "dict variables": {}
        },
        "TransformOutput": {
            "Description": "Describes the results of the transform job.",
            "Type": "dict",
            "Required": true,
            "dict variables": {}
        },
        "TransformResources": {
            "Description": "Describes the resources, including ML instance types and ML instance count, to use for the transform job.",
            "Type": "dict",
            "Required": true,
            "dict variables": {}
        },
        "DataProcessing": {
            "Description": "The data structure used to specify the data to be used for inference in a batch transform job and to associate the data that is relevant to the prediction results in the output. The input filter provided allows you to exclude input data that is not needed for inference in a batch transform job. The output filter provided allows you to include input data relevant to interpreting the predictions in the output from the job. For more information, see Associate Prediction Results with their Corresponding Input Records .",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "Tags": {
            "Description": "(Optional) An array of key-value pairs. For more information, see Using Cost Allocation Tags in the Amazon Web Services Billing and Cost Management User Guide .",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "ExperimentConfig": {
            "Description": "Associates a SageMaker job as a trial component with an experiment and trial. Specified when you call the following APIs:",
            "Type": "dict",
            "Required": false,
            "dict variables": [
                {},
                {}
            ]
        }
    },
    "create_trial": {
        "TrialName": {
            "Description": "The name of the trial. The name must be unique in your Amazon Web Services account and is not case-sensitive.",
            "Type": "string",
            "Required": true
        },
        "DisplayName": {
            "Description": "The name of the trial as displayed. The name doesn't need to be unique. If DisplayName isn't specified, TrialName is displayed.",
            "Type": "string",
            "Required": false
        },
        "ExperimentName": {
            "Description": "The name of the experiment to associate the trial with.",
            "Type": "string",
            "Required": true
        },
        "MetadataProperties": {
            "Description": "Metadata properties of the tracking entity, trial, or trial component.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "Tags": {
            "Description": "A list of tags to associate with the trial. You can use  Search API to search on the tags.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        }
    },
    "create_trial_component": {
        "TrialComponentName": {
            "Description": "The name of the component. The name must be unique in your Amazon Web Services account and is not case-sensitive.",
            "Type": "string",
            "Required": true
        },
        "DisplayName": {
            "Description": "The name of the component as displayed. The name doesn't need to be unique. If DisplayName isn't specified, TrialComponentName is displayed.",
            "Type": "string",
            "Required": false
        },
        "Status": {
            "Description": "The status of the component. States include:",
            "Type": "dict",
            "Required": false,
            "dict variables": [
                {},
                {}
            ]
        },
        "StartTime": {
            "Description": "When the component started.",
            "Type": "datetime",
            "Required": false
        },
        "EndTime": {
            "Description": "When the component ended.",
            "Type": "datetime",
            "Required": false
        },
        "Parameters": {
            "Description": "The hyperparameters for the component.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "InputArtifacts": {
            "Description": "The input artifacts for the component. Examples of input artifacts are datasets, algorithms, hyperparameters, source code, and instance types.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "OutputArtifacts": {
            "Description": "The output artifacts for the component. Examples of output artifacts are metrics, snapshots, logs, and images.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "MetadataProperties": {
            "Description": "Metadata properties of the tracking entity, trial, or trial component.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "Tags": {
            "Description": "A list of tags to associate with the component. You can use  Search API to search on the tags.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        }
    },
    "create_user_profile": {
        "DomainId": {
            "Description": "The ID of the associated Domain.",
            "Type": "string",
            "Required": true
        },
        "UserProfileName": {
            "Description": "A name for the UserProfile. This value is not case sensitive.",
            "Type": "string",
            "Required": true
        },
        "SingleSignOnUserIdentifier": {
            "Description": "A specifier for the type of value specified in SingleSignOnUserValue. Currently, the only supported value is \"UserName\". If the Domain's AuthMode is Amazon Web Services SSO, this field is required. If the Domain's AuthMode is not Amazon Web Services SSO, this field cannot be specified.",
            "Type": "string",
            "Required": false
        },
        "SingleSignOnUserValue": {
            "Description": "The username of the associated Amazon Web Services Single Sign-On User for this UserProfile. If the Domain's AuthMode is Amazon Web Services SSO, this field is required, and must match a valid username of a user in your directory. If the Domain's AuthMode is not Amazon Web Services SSO, this field cannot be specified.",
            "Type": "string",
            "Required": false
        },
        "Tags": {
            "Description": "Each tag consists of a key and an optional value. Tag keys must be unique per resource.\nTags that you specify for the User Profile are also added to all Apps that the User Profile launches.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "UserSettings": {
            "Description": "A collection of settings.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        }
    },
    "create_workforce": {
        "CognitoConfig": {
            "Description": "Use this parameter to configure an Amazon Cognito private workforce. A single Cognito workforce is created using and corresponds to a single Amazon Cognito user pool .\nDo not use OidcConfig if you specify values for CognitoConfig .",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "OidcConfig": {
            "Description": "Use this parameter to configure a private workforce using your own OIDC Identity Provider.\nDo not use CognitoConfig if you specify values for OidcConfig .",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "SourceIpConfig": {
            "Description": "A list of IP address ranges (CIDRs ). Used to create an allow list of IP addresses for a private workforce. Workers will only be able to login to their worker portal from an IP address within this range. By default, a workforce isn't restricted to specific IP addresses.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "WorkforceName": {
            "Description": "The name of the private workforce.",
            "Type": "string",
            "Required": true
        },
        "Tags": {
            "Description": "An array of key-value pairs that contain metadata to help you categorize and organize our workforce. Each tag consists of a key and a value, both of which you define.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "WorkforceVpcConfig": {
            "Description": "Use this parameter to configure a workforce using VPC.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        }
    },
    "create_workteam": {
        "WorkteamName": {
            "Description": "The name of the work team. Use this name to identify the work team.",
            "Type": "string",
            "Required": true
        },
        "WorkforceName": {
            "Description": "The name of the workforce.",
            "Type": "string",
            "Required": false
        },
        "MemberDefinitions": {
            "Description": "A list of MemberDefinition objects that contains objects that identify the workers that make up the work team.\nWorkforces can be created using Amazon Cognito or your own OIDC Identity Provider (IdP). For private workforces created using Amazon Cognito use CognitoMemberDefinition. For workforces created using your own OIDC identity provider (IdP) use OidcMemberDefinition. Do not provide input for both of these parameters in a single request.\nFor workforces created using Amazon Cognito, private work teams correspond to Amazon Cognito user groups within the user pool used to create a workforce. All of the CognitoMemberDefinition objects that make up the member definition must have the same ClientId and UserPool values. To add a Amazon Cognito user group to an existing worker pool, see Adding groups to a User Pool. For more information about user pools, see `Amazon Cognito User Pools .\nFor workforces created using your own OIDC IdP, specify the user groups that you want to include in your private work team in OidcMemberDefinition by listing those groups in Groups .",
            "Type": "list",
            "Required": true,
            "list variables": {}
        },
        "Description": {
            "Description": "A description of the work team.",
            "Type": "string",
            "Required": true
        },
        "NotificationConfiguration": {
            "Description": "Configures notification of workers regarding available or expiring work items.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "Tags": {
            "Description": "An array of key-value pairs.\nFor more information, see Resource Tag and Using Cost Allocation Tags in the Amazon Web Services Billing and Cost Management User Guide .",
            "Type": "list",
            "Required": false,
            "list variables": {}
        }
    },
    "delete_action": {
        "ActionName": {
            "Description": "The name of the action to delete.",
            "Type": "string",
            "Required": true
        }
    },
    "delete_algorithm": {
        "AlgorithmName": {
            "Description": "The name of the algorithm to delete.",
            "Type": "string",
            "Required": true
        }
    },
    "delete_app": {
        "DomainId": {
            "Description": "The domain ID.",
            "Type": "string",
            "Required": true
        },
        "UserProfileName": {
            "Description": "The user profile name.",
            "Type": "string",
            "Required": true
        },
        "AppType": {
            "Description": "The type of app.",
            "Type": "string",
            "Required": true
        },
        "AppName": {
            "Description": "The name of the app.",
            "Type": "string",
            "Required": true
        }
    },
    "delete_app_image_config": {
        "AppImageConfigName": {
            "Description": "The name of the AppImageConfig to delete.",
            "Type": "string",
            "Required": true
        }
    },
    "delete_artifact": {
        "ArtifactArn": {
            "Description": "The Amazon Resource Name (ARN) of the artifact to delete.",
            "Type": "string",
            "Required": false
        },
        "Source": {
            "Description": "The URI of the source.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        }
    },
    "delete_association": {
        "SourceArn": {
            "Description": "The ARN of the source.",
            "Type": "string",
            "Required": true
        },
        "DestinationArn": {
            "Description": "The Amazon Resource Name (ARN) of the destination.",
            "Type": "string",
            "Required": true
        }
    },
    "delete_code_repository": {
        "CodeRepositoryName": {
            "Description": "The name of the Git repository to delete.",
            "Type": "string",
            "Required": true
        }
    },
    "delete_context": {
        "ContextName": {
            "Description": "The name of the context to delete.",
            "Type": "string",
            "Required": true
        }
    },
    "delete_data_quality_job_definition": {
        "JobDefinitionName": {
            "Description": "The name of the data quality monitoring job definition to delete.",
            "Type": "string",
            "Required": true
        }
    },
    "delete_device_fleet": {
        "DeviceFleetName": {
            "Description": "The name of the fleet to delete.",
            "Type": "string",
            "Required": true
        }
    },
    "delete_domain": {
        "DomainId": {
            "Description": "The domain ID.",
            "Type": "string",
            "Required": true
        },
        "RetentionPolicy": {
            "Description": "The retention policy for this domain, which specifies whether resources will be retained after the Domain is deleted. By default, all resources are retained (not automatically deleted).",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        }
    },
    "delete_edge_deployment_plan": {
        "EdgeDeploymentPlanName": {
            "Description": "The name of the edge deployment plan to delete.",
            "Type": "string",
            "Required": true
        }
    },
    "delete_edge_deployment_stage": {
        "EdgeDeploymentPlanName": {
            "Description": "The name of the edge deployment plan from which the stage will be deleted.",
            "Type": "string",
            "Required": true
        },
        "StageName": {
            "Description": "The name of the stage.",
            "Type": "string",
            "Required": true
        }
    },
    "delete_endpoint": {
        "EndpointName": {
            "Description": "The name of the endpoint that you want to delete.",
            "Type": "string",
            "Required": true
        }
    },
    "delete_endpoint_config": {
        "EndpointConfigName": {
            "Description": "The name of the endpoint configuration that you want to delete.",
            "Type": "string",
            "Required": true
        }
    },
    "delete_experiment": {
        "ExperimentName": {
            "Description": "The name of the experiment to delete.",
            "Type": "string",
            "Required": true
        }
    },
    "delete_feature_group": {
        "FeatureGroupName": {
            "Description": "The name of the FeatureGroup you want to delete. The name must be unique within an Amazon Web Services Region in an Amazon Web Services account.",
            "Type": "string",
            "Required": true
        }
    },
    "delete_flow_definition": {
        "FlowDefinitionName": {
            "Description": "The name of the flow definition you are deleting.",
            "Type": "string",
            "Required": true
        }
    },
    "delete_human_task_ui": {
        "HumanTaskUiName": {
            "Description": "The name of the human task user interface (work task template) you want to delete.",
            "Type": "string",
            "Required": true
        }
    },
    "delete_image": {
        "ImageName": {
            "Description": "The name of the image to delete.",
            "Type": "string",
            "Required": true
        }
    },
    "delete_image_version": {
        "ImageName": {
            "Description": "The name of the image.",
            "Type": "string",
            "Required": true
        },
        "Version": {
            "Description": "The version to delete.",
            "Type": "integer",
            "Required": true
        }
    },
    "delete_model": {
        "ModelName": {
            "Description": "The name of the model to delete.",
            "Type": "string",
            "Required": true
        }
    },
    "delete_model_bias_job_definition": {
        "JobDefinitionName": {
            "Description": "The name of the model bias job definition to delete.",
            "Type": "string",
            "Required": true
        }
    },
    "delete_model_explainability_job_definition": {
        "JobDefinitionName": {
            "Description": "The name of the model explainability job definition to delete.",
            "Type": "string",
            "Required": true
        }
    },
    "delete_model_package": {
        "ModelPackageName": {
            "Description": "The name or Amazon Resource Name (ARN) of the model package to delete.\nWhen you specify a name, the name must have 1 to 63 characters. Valid characters are a-z, A-Z, 0-9, and - (hyphen).",
            "Type": "string",
            "Required": true
        }
    },
    "delete_model_package_group": {
        "ModelPackageGroupName": {
            "Description": "The name of the model group to delete.",
            "Type": "string",
            "Required": true
        }
    },
    "delete_model_package_group_policy": {
        "ModelPackageGroupName": {
            "Description": "The name of the model group for which to delete the policy.",
            "Type": "string",
            "Required": true
        }
    },
    "delete_model_quality_job_definition": {
        "JobDefinitionName": {
            "Description": "The name of the model quality monitoring job definition to delete.",
            "Type": "string",
            "Required": true
        }
    },
    "delete_monitoring_schedule": {
        "MonitoringScheduleName": {
            "Description": "The name of the monitoring schedule to delete.",
            "Type": "string",
            "Required": true
        }
    },
    "delete_notebook_instance": {
        "NotebookInstanceName": {
            "Description": "The name of the SageMaker notebook instance to delete.",
            "Type": "string",
            "Required": true
        }
    },
    "delete_notebook_instance_lifecycle_config": {
        "NotebookInstanceLifecycleConfigName": {
            "Description": "The name of the lifecycle configuration to delete.",
            "Type": "string",
            "Required": true
        }
    },
    "delete_pipeline": {
        "PipelineName": {
            "Description": "The name of the pipeline to delete.",
            "Type": "string",
            "Required": true
        },
        "ClientRequestToken": {
            "Description": "A unique, case-sensitive identifier that you provide to ensure the idempotency of the operation. An idempotent operation completes no more than one time.\nThis field is autopopulated if not provided.",
            "Type": "string",
            "Required": true
        }
    },
    "delete_project": {
        "ProjectName": {
            "Description": "The name of the project to delete.",
            "Type": "string",
            "Required": true
        }
    },
    "delete_studio_lifecycle_config": {
        "StudioLifecycleConfigName": {
            "Description": "The name of the Studio Lifecycle Configuration to delete.",
            "Type": "string",
            "Required": true
        }
    },
    "delete_tags": {
        "ResourceArn": {
            "Description": "The Amazon Resource Name (ARN) of the resource whose tags you want to delete.",
            "Type": "string",
            "Required": true
        },
        "TagKeys": {
            "Description": "An array or one or more tag keys to delete.",
            "Type": "list",
            "Required": true,
            "list variables": {}
        }
    },
    "delete_trial": {
        "TrialName": {
            "Description": "The name of the trial to delete.",
            "Type": "string",
            "Required": true
        }
    },
    "delete_trial_component": {
        "TrialComponentName": {
            "Description": "The name of the component to delete.",
            "Type": "string",
            "Required": true
        }
    },
    "delete_user_profile": {
        "DomainId": {
            "Description": "The domain ID.",
            "Type": "string",
            "Required": true
        },
        "UserProfileName": {
            "Description": "The user profile name.",
            "Type": "string",
            "Required": true
        }
    },
    "delete_workforce": {
        "WorkforceName": {
            "Description": "The name of the workforce.",
            "Type": "string",
            "Required": true
        }
    },
    "delete_workteam": {
        "WorkteamName": {
            "Description": "The name of the work team to delete.",
            "Type": "string",
            "Required": true
        }
    },
    "deregister_devices": {
        "DeviceFleetName": {
            "Description": "The name of the fleet the devices belong to.",
            "Type": "string",
            "Required": true
        },
        "DeviceNames": {
            "Description": "The unique IDs of the devices.",
            "Type": "list",
            "Required": true,
            "list variables": {}
        }
    },
    "describe_action": {
        "ActionName": {
            "Description": "The name of the action to describe.",
            "Type": "string",
            "Required": true
        }
    },
    "describe_algorithm": {
        "AlgorithmName": {
            "Description": "The name of the algorithm to describe.",
            "Type": "string",
            "Required": true
        }
    },
    "describe_app": {
        "DomainId": {
            "Description": "The domain ID.",
            "Type": "string",
            "Required": true
        },
        "UserProfileName": {
            "Description": "The user profile name.",
            "Type": "string",
            "Required": true
        },
        "AppType": {
            "Description": "The type of app.",
            "Type": "string",
            "Required": true
        },
        "AppName": {
            "Description": "The name of the app.",
            "Type": "string",
            "Required": true
        }
    },
    "describe_app_image_config": {
        "AppImageConfigName": {
            "Description": "The name of the AppImageConfig to describe.",
            "Type": "string",
            "Required": true
        }
    },
    "describe_artifact": {
        "ArtifactArn": {
            "Description": "The Amazon Resource Name (ARN) of the artifact to describe.",
            "Type": "string",
            "Required": true
        }
    },
    "describe_auto_ml_job": {
        "AutoMLJobName": {
            "Description": "Requests information about an AutoML job using its unique name.",
            "Type": "string",
            "Required": true
        }
    },
    "describe_code_repository": {
        "CodeRepositoryName": {
            "Description": "The name of the Git repository to describe.",
            "Type": "string",
            "Required": true
        }
    },
    "describe_compilation_job": {
        "CompilationJobName": {
            "Description": "The name of the model compilation job that you want information about.",
            "Type": "string",
            "Required": true
        }
    },
    "describe_context": {
        "ContextName": {
            "Description": "The name of the context to describe.",
            "Type": "string",
            "Required": true
        }
    },
    "describe_data_quality_job_definition": {
        "JobDefinitionName": {
            "Description": "The name of the data quality monitoring job definition to describe.",
            "Type": "string",
            "Required": true
        }
    },
    "describe_device": {
        "NextToken": {
            "Description": "Next token of device description.",
            "Type": "string",
            "Required": false
        },
        "DeviceName": {
            "Description": "The unique ID of the device.",
            "Type": "string",
            "Required": true
        },
        "DeviceFleetName": {
            "Description": "The name of the fleet the devices belong to.",
            "Type": "string",
            "Required": true
        }
    },
    "describe_device_fleet": {
        "DeviceFleetName": {
            "Description": "The name of the fleet.",
            "Type": "string",
            "Required": true
        }
    },
    "describe_domain": {
        "DomainId": {
            "Description": "The domain ID.",
            "Type": "string",
            "Required": true
        }
    },
    "describe_edge_deployment_plan": {
        "EdgeDeploymentPlanName": {
            "Description": "The name of the deployment plan to describe.",
            "Type": "string",
            "Required": true
        },
        "NextToken": {
            "Description": "If the edge deployment plan has enough stages to require tokening, then this is the response from the last list of stages returned.",
            "Type": "string",
            "Required": false
        },
        "MaxResults": {
            "Description": "The maximum number of results to select (50 by default).",
            "Type": "integer",
            "Required": false
        }
    },
    "describe_edge_packaging_job": {
        "EdgePackagingJobName": {
            "Description": "The name of the edge packaging job.",
            "Type": "string",
            "Required": true
        }
    },
    "describe_endpoint": {
        "EndpointName": {
            "Description": "The name of the endpoint.",
            "Type": "string",
            "Required": true
        }
    },
    "describe_endpoint_config": {
        "EndpointConfigName": {
            "Description": "The name of the endpoint configuration.",
            "Type": "string",
            "Required": true
        }
    },
    "describe_experiment": {
        "ExperimentName": {
            "Description": "The name of the experiment to describe.",
            "Type": "string",
            "Required": true
        }
    },
    "describe_feature_group": {
        "FeatureGroupName": {
            "Description": "The name of the FeatureGroup you want described.",
            "Type": "string",
            "Required": true
        },
        "NextToken": {
            "Description": "A token to resume pagination of the list of Features (FeatureDefinitions ). 2,500 Features are returned by default.",
            "Type": "string",
            "Required": false
        }
    },
    "describe_feature_metadata": {
        "FeatureGroupName": {
            "Description": "The name of the feature group containing the feature.",
            "Type": "string",
            "Required": true
        },
        "FeatureName": {
            "Description": "The name of the feature.",
            "Type": "string",
            "Required": true
        }
    },
    "describe_flow_definition": {
        "FlowDefinitionName": {
            "Description": "The name of the flow definition.",
            "Type": "string",
            "Required": true
        }
    },
    "describe_human_task_ui": {
        "HumanTaskUiName": {
            "Description": "The name of the human task user interface (worker task template) you want information about.",
            "Type": "string",
            "Required": true
        }
    },
    "describe_hyper_parameter_tuning_job": {
        "HyperParameterTuningJobName": {
            "Description": "The name of the tuning job.",
            "Type": "string",
            "Required": true
        }
    },
    "describe_image": {
        "ImageName": {
            "Description": "The name of the image to describe.",
            "Type": "string",
            "Required": true
        }
    },
    "describe_image_version": {
        "ImageName": {
            "Description": "The name of the image.",
            "Type": "string",
            "Required": true
        },
        "Version": {
            "Description": "The version of the image. If not specified, the latest version is described.",
            "Type": "integer",
            "Required": false
        }
    },
    "describe_inference_recommendations_job": {
        "JobName": {
            "Description": "The name of the job. The name must be unique within an Amazon Web Services Region in the Amazon Web Services account.",
            "Type": "string",
            "Required": true
        }
    },
    "describe_labeling_job": {
        "LabelingJobName": {
            "Description": "The name of the labeling job to return information for.",
            "Type": "string",
            "Required": true
        }
    },
    "describe_lineage_group": {
        "LineageGroupName": {
            "Description": "The name of the lineage group.",
            "Type": "string",
            "Required": true
        }
    },
    "describe_model": {
        "ModelName": {
            "Description": "The name of the model.",
            "Type": "string",
            "Required": true
        }
    },
    "describe_model_bias_job_definition": {
        "JobDefinitionName": {
            "Description": "The name of the model bias job definition. The name must be unique within an Amazon Web Services Region in the Amazon Web Services account.",
            "Type": "string",
            "Required": true
        }
    },
    "describe_model_explainability_job_definition": {
        "JobDefinitionName": {
            "Description": "The name of the model explainability job definition. The name must be unique within an Amazon Web Services Region in the Amazon Web Services account.",
            "Type": "string",
            "Required": true
        }
    },
    "describe_model_package": {
        "ModelPackageName": {
            "Description": "The name or Amazon Resource Name (ARN) of the model package to describe.\nWhen you specify a name, the name must have 1 to 63 characters. Valid characters are a-z, A-Z, 0-9, and - (hyphen).",
            "Type": "string",
            "Required": true
        }
    },
    "describe_model_package_group": {
        "ModelPackageGroupName": {
            "Description": "The name of gthe model group to describe.",
            "Type": "string",
            "Required": true
        }
    },
    "describe_model_quality_job_definition": {
        "JobDefinitionName": {
            "Description": "The name of the model quality job. The name must be unique within an Amazon Web Services Region in the Amazon Web Services account.",
            "Type": "string",
            "Required": true
        }
    },
    "describe_monitoring_schedule": {
        "MonitoringScheduleName": {
            "Description": "Name of a previously created monitoring schedule.",
            "Type": "string",
            "Required": true
        }
    },
    "describe_notebook_instance": {
        "NotebookInstanceName": {
            "Description": "The name of the notebook instance that you want information about.",
            "Type": "string",
            "Required": true
        }
    },
    "describe_notebook_instance_lifecycle_config": {
        "NotebookInstanceLifecycleConfigName": {
            "Description": "The name of the lifecycle configuration to describe.",
            "Type": "string",
            "Required": true
        }
    },
    "describe_pipeline": {
        "PipelineName": {
            "Description": "The name of the pipeline to describe.",
            "Type": "string",
            "Required": true
        }
    },
    "describe_pipeline_definition_for_execution": {
        "PipelineExecutionArn": {
            "Description": "The Amazon Resource Name (ARN) of the pipeline execution.",
            "Type": "string",
            "Required": true
        }
    },
    "describe_pipeline_execution": {
        "PipelineExecutionArn": {
            "Description": "The Amazon Resource Name (ARN) of the pipeline execution.",
            "Type": "string",
            "Required": true
        }
    },
    "describe_processing_job": {
        "ProcessingJobName": {
            "Description": "The name of the processing job. The name must be unique within an Amazon Web Services Region in the Amazon Web Services account.",
            "Type": "string",
            "Required": true
        }
    },
    "describe_project": {
        "ProjectName": {
            "Description": "The name of the project to describe.",
            "Type": "string",
            "Required": true
        }
    },
    "describe_studio_lifecycle_config": {
        "StudioLifecycleConfigName": {
            "Description": "The name of the Studio Lifecycle Configuration to describe.",
            "Type": "string",
            "Required": true
        }
    },
    "describe_subscribed_workteam": {
        "WorkteamArn": {
            "Description": "The Amazon Resource Name (ARN) of the subscribed work team to describe.",
            "Type": "string",
            "Required": true
        }
    },
    "describe_training_job": {
        "TrainingJobName": {
            "Description": "The name of the training job.",
            "Type": "string",
            "Required": true
        }
    },
    "describe_transform_job": {
        "TransformJobName": {
            "Description": "The name of the transform job that you want to view details of.",
            "Type": "string",
            "Required": true
        }
    },
    "describe_trial": {
        "TrialName": {
            "Description": "The name of the trial to describe.",
            "Type": "string",
            "Required": true
        }
    },
    "describe_trial_component": {
        "TrialComponentName": {
            "Description": "The name of the trial component to describe.",
            "Type": "string",
            "Required": true
        }
    },
    "describe_user_profile": {
        "DomainId": {
            "Description": "The domain ID.",
            "Type": "string",
            "Required": true
        },
        "UserProfileName": {
            "Description": "The user profile name. This value is not case sensitive.",
            "Type": "string",
            "Required": true
        }
    },
    "describe_workforce": {
        "WorkforceName": {
            "Description": "The name of the private workforce whose access you want to restrict. WorkforceName is automatically set to default when a workforce is created and cannot be modified.",
            "Type": "string",
            "Required": true
        }
    },
    "describe_workteam": {
        "WorkteamName": {
            "Description": "The name of the work team to return a description of.",
            "Type": "string",
            "Required": true
        }
    },
    "disable_sagemaker_servicecatalog_portfolio": "No parameters defined",
    "disassociate_trial_component": {
        "TrialComponentName": {
            "Description": "The name of the component to disassociate from the trial.",
            "Type": "string",
            "Required": true
        },
        "TrialName": {
            "Description": "The name of the trial to disassociate from.",
            "Type": "string",
            "Required": true
        }
    },
    "enable_sagemaker_servicecatalog_portfolio": "No parameters defined",
    "get_device_fleet_report": {
        "DeviceFleetName": {
            "Description": "The name of the fleet.",
            "Type": "string",
            "Required": true
        }
    },
    "get_lineage_group_policy": {
        "LineageGroupName": {
            "Description": "The name or Amazon Resource Name (ARN) of the lineage group.",
            "Type": "string",
            "Required": true
        }
    },
    "get_model_package_group_policy": {
        "ModelPackageGroupName": {
            "Description": "The name of the model group for which to get the resource policy.",
            "Type": "string",
            "Required": true
        }
    },
    "get_sagemaker_servicecatalog_portfolio_status": "No parameters defined",
    "get_search_suggestions": {
        "Resource": {
            "Description": "The name of the Amazon SageMaker resource to search for.",
            "Type": "string",
            "Required": true
        },
        "SuggestionQuery": {
            "Description": "Limits the property names that are included in the response.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        }
    },
    "list_actions": {
        "SourceUri": {
            "Description": "A filter that returns only actions with the specified source URI.",
            "Type": "string",
            "Required": false
        },
        "ActionType": {
            "Description": "A filter that returns only actions of the specified type.",
            "Type": "string",
            "Required": false
        },
        "CreatedAfter": {
            "Description": "A filter that returns only actions created on or after the specified time.",
            "Type": "datetime",
            "Required": false
        },
        "CreatedBefore": {
            "Description": "A filter that returns only actions created on or before the specified time.",
            "Type": "datetime",
            "Required": false
        },
        "SortBy": {
            "Description": "The property used to sort results. The default value is CreationTime .",
            "Type": "string",
            "Required": false
        },
        "SortOrder": {
            "Description": "The sort order. The default value is Descending .",
            "Type": "string",
            "Required": false
        },
        "NextToken": {
            "Description": "If the previous call to ListActions didn't return the full set of actions, the call returns a token for getting the next set of actions.",
            "Type": "string",
            "Required": false
        },
        "MaxResults": {
            "Description": "The maximum number of actions to return in the response. The default value is 10.",
            "Type": "integer",
            "Required": false
        }
    },
    "list_algorithms": {
        "CreationTimeAfter": {
            "Description": "A filter that returns only algorithms created after the specified time (timestamp).",
            "Type": "datetime",
            "Required": false
        },
        "CreationTimeBefore": {
            "Description": "A filter that returns only algorithms created before the specified time (timestamp).",
            "Type": "datetime",
            "Required": false
        },
        "MaxResults": {
            "Description": "The maximum number of algorithms to return in the response.",
            "Type": "integer",
            "Required": false
        },
        "NameContains": {
            "Description": "A string in the algorithm name. This filter returns only algorithms whose name contains the specified string.",
            "Type": "string",
            "Required": false
        },
        "NextToken": {
            "Description": "If the response to a previous ListAlgorithms request was truncated, the response includes a NextToken . To retrieve the next set of algorithms, use the token in the next request.",
            "Type": "string",
            "Required": false
        },
        "SortBy": {
            "Description": "The parameter by which to sort the results. The default is CreationTime .",
            "Type": "string",
            "Required": false
        },
        "SortOrder": {
            "Description": "The sort order for the results. The default is Ascending .",
            "Type": "string",
            "Required": false
        }
    },
    "list_app_image_configs": {
        "MaxResults": {
            "Description": "The maximum number of AppImageConfigs to return in the response. The default value is 10.",
            "Type": "integer",
            "Required": false
        },
        "NextToken": {
            "Description": "If the previous call to ListImages didn't return the full set of AppImageConfigs, the call returns a token for getting the next set of AppImageConfigs.",
            "Type": "string",
            "Required": false
        },
        "NameContains": {
            "Description": "A filter that returns only AppImageConfigs whose name contains the specified string.",
            "Type": "string",
            "Required": false
        },
        "CreationTimeBefore": {
            "Description": "A filter that returns only AppImageConfigs created on or before the specified time.",
            "Type": "datetime",
            "Required": false
        },
        "CreationTimeAfter": {
            "Description": "A filter that returns only AppImageConfigs created on or after the specified time.",
            "Type": "datetime",
            "Required": false
        },
        "ModifiedTimeBefore": {
            "Description": "A filter that returns only AppImageConfigs modified on or before the specified time.",
            "Type": "datetime",
            "Required": false
        },
        "ModifiedTimeAfter": {
            "Description": "A filter that returns only AppImageConfigs modified on or after the specified time.",
            "Type": "datetime",
            "Required": false
        },
        "SortBy": {
            "Description": "The property used to sort results. The default value is CreationTime .",
            "Type": "string",
            "Required": false
        },
        "SortOrder": {
            "Description": "The sort order. The default value is Descending .",
            "Type": "string",
            "Required": false
        }
    },
    "list_apps": {
        "NextToken": {
            "Description": "If the previous response was truncated, you will receive this token. Use it in your next request to receive the next set of results.",
            "Type": "string",
            "Required": false
        },
        "MaxResults": {
            "Description": "Returns a list up to a specified limit.",
            "Type": "integer",
            "Required": false
        },
        "SortOrder": {
            "Description": "The sort order for the results. The default is Ascending.",
            "Type": "string",
            "Required": false
        },
        "SortBy": {
            "Description": "The parameter by which to sort the results. The default is CreationTime.",
            "Type": "string",
            "Required": false
        },
        "DomainIdEquals": {
            "Description": "A parameter to search for the domain ID.",
            "Type": "string",
            "Required": false
        },
        "UserProfileNameEquals": {
            "Description": "A parameter to search by user profile name.",
            "Type": "string",
            "Required": false
        }
    },
    "list_artifacts": {
        "SourceUri": {
            "Description": "A filter that returns only artifacts with the specified source URI.",
            "Type": "string",
            "Required": false
        },
        "ArtifactType": {
            "Description": "A filter that returns only artifacts of the specified type.",
            "Type": "string",
            "Required": false
        },
        "CreatedAfter": {
            "Description": "A filter that returns only artifacts created on or after the specified time.",
            "Type": "datetime",
            "Required": false
        },
        "CreatedBefore": {
            "Description": "A filter that returns only artifacts created on or before the specified time.",
            "Type": "datetime",
            "Required": false
        },
        "SortBy": {
            "Description": "The property used to sort results. The default value is CreationTime .",
            "Type": "string",
            "Required": false
        },
        "SortOrder": {
            "Description": "The sort order. The default value is Descending .",
            "Type": "string",
            "Required": false
        },
        "NextToken": {
            "Description": "If the previous call to ListArtifacts didn't return the full set of artifacts, the call returns a token for getting the next set of artifacts.",
            "Type": "string",
            "Required": false
        },
        "MaxResults": {
            "Description": "The maximum number of artifacts to return in the response. The default value is 10.",
            "Type": "integer",
            "Required": false
        }
    },
    "list_associations": {
        "SourceArn": {
            "Description": "A filter that returns only associations with the specified source ARN.",
            "Type": "string",
            "Required": false
        },
        "DestinationArn": {
            "Description": "A filter that returns only associations with the specified destination Amazon Resource Name (ARN).",
            "Type": "string",
            "Required": false
        },
        "SourceType": {
            "Description": "A filter that returns only associations with the specified source type.",
            "Type": "string",
            "Required": false
        },
        "DestinationType": {
            "Description": "A filter that returns only associations with the specified destination type.",
            "Type": "string",
            "Required": false
        },
        "AssociationType": {
            "Description": "A filter that returns only associations of the specified type.",
            "Type": "string",
            "Required": false
        },
        "CreatedAfter": {
            "Description": "A filter that returns only associations created on or after the specified time.",
            "Type": "datetime",
            "Required": false
        },
        "CreatedBefore": {
            "Description": "A filter that returns only associations created on or before the specified time.",
            "Type": "datetime",
            "Required": false
        },
        "SortBy": {
            "Description": "The property used to sort results. The default value is CreationTime .",
            "Type": "string",
            "Required": false
        },
        "SortOrder": {
            "Description": "The sort order. The default value is Descending .",
            "Type": "string",
            "Required": false
        },
        "NextToken": {
            "Description": "If the previous call to ListAssociations didn't return the full set of associations, the call returns a token for getting the next set of associations.",
            "Type": "string",
            "Required": false
        },
        "MaxResults": {
            "Description": "The maximum number of associations to return in the response. The default value is 10.",
            "Type": "integer",
            "Required": false
        }
    },
    "list_auto_ml_jobs": {
        "CreationTimeAfter": {
            "Description": "Request a list of jobs, using a filter for time.",
            "Type": "datetime",
            "Required": false
        },
        "CreationTimeBefore": {
            "Description": "Request a list of jobs, using a filter for time.",
            "Type": "datetime",
            "Required": false
        },
        "LastModifiedTimeAfter": {
            "Description": "Request a list of jobs, using a filter for time.",
            "Type": "datetime",
            "Required": false
        },
        "LastModifiedTimeBefore": {
            "Description": "Request a list of jobs, using a filter for time.",
            "Type": "datetime",
            "Required": false
        },
        "NameContains": {
            "Description": "Request a list of jobs, using a search filter for name.",
            "Type": "string",
            "Required": false
        },
        "StatusEquals": {
            "Description": "Request a list of jobs, using a filter for status.",
            "Type": "string",
            "Required": false
        },
        "SortOrder": {
            "Description": "The sort order for the results. The default is Descending .",
            "Type": "string",
            "Required": false
        },
        "SortBy": {
            "Description": "The parameter by which to sort the results. The default is Name .",
            "Type": "string",
            "Required": false
        },
        "MaxResults": {
            "Description": "Request a list of jobs up to a specified limit.",
            "Type": "integer",
            "Required": false
        },
        "NextToken": {
            "Description": "If the previous response was truncated, you receive this token. Use it in your next request to receive the next set of results.",
            "Type": "string",
            "Required": false
        }
    },
    "list_candidates_for_auto_ml_job": {
        "AutoMLJobName": {
            "Description": "List the candidates created for the job by providing the job's name.",
            "Type": "string",
            "Required": true
        },
        "StatusEquals": {
            "Description": "List the candidates for the job and filter by status.",
            "Type": "string",
            "Required": false
        },
        "CandidateNameEquals": {
            "Description": "List the candidates for the job and filter by candidate name.",
            "Type": "string",
            "Required": false
        },
        "SortOrder": {
            "Description": "The sort order for the results. The default is Ascending .",
            "Type": "string",
            "Required": false
        },
        "SortBy": {
            "Description": "The parameter by which to sort the results. The default is Descending .",
            "Type": "string",
            "Required": false
        },
        "MaxResults": {
            "Description": "List the job's candidates up to a specified limit.",
            "Type": "integer",
            "Required": false
        },
        "NextToken": {
            "Description": "If the previous response was truncated, you receive this token. Use it in your next request to receive the next set of results.",
            "Type": "string",
            "Required": false
        }
    },
    "list_code_repositories": {
        "CreationTimeAfter": {
            "Description": "A filter that returns only Git repositories that were created after the specified time.",
            "Type": "datetime",
            "Required": false
        },
        "CreationTimeBefore": {
            "Description": "A filter that returns only Git repositories that were created before the specified time.",
            "Type": "datetime",
            "Required": false
        },
        "LastModifiedTimeAfter": {
            "Description": "A filter that returns only Git repositories that were last modified after the specified time.",
            "Type": "datetime",
            "Required": false
        },
        "LastModifiedTimeBefore": {
            "Description": "A filter that returns only Git repositories that were last modified before the specified time.",
            "Type": "datetime",
            "Required": false
        },
        "MaxResults": {
            "Description": "The maximum number of Git repositories to return in the response.",
            "Type": "integer",
            "Required": false
        },
        "NameContains": {
            "Description": "A string in the Git repositories name. This filter returns only repositories whose name contains the specified string.",
            "Type": "string",
            "Required": false
        },
        "NextToken": {
            "Description": "If the result of a ListCodeRepositoriesOutput request was truncated, the response includes a NextToken . To get the next set of Git repositories, use the token in the next request.",
            "Type": "string",
            "Required": false
        },
        "SortBy": {
            "Description": "The field to sort results by. The default is Name .",
            "Type": "string",
            "Required": false
        },
        "SortOrder": {
            "Description": "The sort order for results. The default is Ascending .",
            "Type": "string",
            "Required": false
        }
    },
    "list_compilation_jobs": {
        "NextToken": {
            "Description": "If the result of the previous ListCompilationJobs request was truncated, the response includes a NextToken . To retrieve the next set of model compilation jobs, use the token in the next request.",
            "Type": "string",
            "Required": false
        },
        "MaxResults": {
            "Description": "The maximum number of model compilation jobs to return in the response.",
            "Type": "integer",
            "Required": false
        },
        "CreationTimeAfter": {
            "Description": "A filter that returns the model compilation jobs that were created after a specified time.",
            "Type": "datetime",
            "Required": false
        },
        "CreationTimeBefore": {
            "Description": "A filter that returns the model compilation jobs that were created before a specified time.",
            "Type": "datetime",
            "Required": false
        },
        "LastModifiedTimeAfter": {
            "Description": "A filter that returns the model compilation jobs that were modified after a specified time.",
            "Type": "datetime",
            "Required": false
        },
        "LastModifiedTimeBefore": {
            "Description": "A filter that returns the model compilation jobs that were modified before a specified time.",
            "Type": "datetime",
            "Required": false
        },
        "NameContains": {
            "Description": "A filter that returns the model compilation jobs whose name contains a specified string.",
            "Type": "string",
            "Required": false
        },
        "StatusEquals": {
            "Description": "A filter that retrieves model compilation jobs with a specific  DescribeCompilationJobResponse$CompilationJobStatus status.",
            "Type": "string",
            "Required": false
        },
        "SortBy": {
            "Description": "The field by which to sort results. The default is CreationTime .",
            "Type": "string",
            "Required": false
        },
        "SortOrder": {
            "Description": "The sort order for results. The default is Ascending .",
            "Type": "string",
            "Required": false
        }
    },
    "list_contexts": {
        "SourceUri": {
            "Description": "A filter that returns only contexts with the specified source URI.",
            "Type": "string",
            "Required": false
        },
        "ContextType": {
            "Description": "A filter that returns only contexts of the specified type.",
            "Type": "string",
            "Required": false
        },
        "CreatedAfter": {
            "Description": "A filter that returns only contexts created on or after the specified time.",
            "Type": "datetime",
            "Required": false
        },
        "CreatedBefore": {
            "Description": "A filter that returns only contexts created on or before the specified time.",
            "Type": "datetime",
            "Required": false
        },
        "SortBy": {
            "Description": "The property used to sort results. The default value is CreationTime .",
            "Type": "string",
            "Required": false
        },
        "SortOrder": {
            "Description": "The sort order. The default value is Descending .",
            "Type": "string",
            "Required": false
        },
        "NextToken": {
            "Description": "If the previous call to ListContexts didn't return the full set of contexts, the call returns a token for getting the next set of contexts.",
            "Type": "string",
            "Required": false
        },
        "MaxResults": {
            "Description": "The maximum number of contexts to return in the response. The default value is 10.",
            "Type": "integer",
            "Required": false
        }
    },
    "list_data_quality_job_definitions": {
        "EndpointName": {
            "Description": "A filter that lists the data quality job definitions associated with the specified endpoint.",
            "Type": "string",
            "Required": false
        },
        "SortBy": {
            "Description": "The field to sort results by. The default is CreationTime .",
            "Type": "string",
            "Required": false
        },
        "SortOrder": {
            "Description": "The sort order for results. The default is Descending .",
            "Type": "string",
            "Required": false
        },
        "NextToken": {
            "Description": "If the result of the previous ListDataQualityJobDefinitions request was truncated, the response includes a NextToken . To retrieve the next set of transform jobs, use the token in the next request.>",
            "Type": "string",
            "Required": false
        },
        "MaxResults": {
            "Description": "The maximum number of data quality monitoring job definitions to return in the response.",
            "Type": "integer",
            "Required": false
        },
        "NameContains": {
            "Description": "A string in the data quality monitoring job definition name. This filter returns only data quality monitoring job definitions whose name contains the specified string.",
            "Type": "string",
            "Required": false
        },
        "CreationTimeBefore": {
            "Description": "A filter that returns only data quality monitoring job definitions created before the specified time.",
            "Type": "datetime",
            "Required": false
        },
        "CreationTimeAfter": {
            "Description": "A filter that returns only data quality monitoring job definitions created after the specified time.",
            "Type": "datetime",
            "Required": false
        }
    },
    "list_device_fleets": {
        "NextToken": {
            "Description": "The response from the last list when returning a list large enough to need tokening.",
            "Type": "string",
            "Required": false
        },
        "MaxResults": {
            "Description": "The maximum number of results to select.",
            "Type": "integer",
            "Required": false
        },
        "CreationTimeAfter": {
            "Description": "Filter fleets where packaging job was created after specified time.",
            "Type": "datetime",
            "Required": false
        },
        "CreationTimeBefore": {
            "Description": "Filter fleets where the edge packaging job was created before specified time.",
            "Type": "datetime",
            "Required": false
        },
        "LastModifiedTimeAfter": {
            "Description": "Select fleets where the job was updated after X",
            "Type": "datetime",
            "Required": false
        },
        "LastModifiedTimeBefore": {
            "Description": "Select fleets where the job was updated before X",
            "Type": "datetime",
            "Required": false
        },
        "NameContains": {
            "Description": "Filter for fleets containing this name in their fleet device name.",
            "Type": "string",
            "Required": false
        },
        "SortBy": {
            "Description": "The column to sort by.",
            "Type": "string",
            "Required": false
        },
        "SortOrder": {
            "Description": "What direction to sort in.",
            "Type": "string",
            "Required": false
        }
    },
    "list_devices": {
        "NextToken": {
            "Description": "The response from the last list when returning a list large enough to need tokening.",
            "Type": "string",
            "Required": false
        },
        "MaxResults": {
            "Description": "Maximum number of results to select.",
            "Type": "integer",
            "Required": false
        },
        "LatestHeartbeatAfter": {
            "Description": "Select fleets where the job was updated after X",
            "Type": "datetime",
            "Required": false
        },
        "ModelName": {
            "Description": "A filter that searches devices that contains this name in any of their models.",
            "Type": "string",
            "Required": false
        },
        "DeviceFleetName": {
            "Description": "Filter for fleets containing this name in their device fleet name.",
            "Type": "string",
            "Required": false
        }
    },
    "list_domains": {
        "NextToken": {
            "Description": "If the previous response was truncated, you will receive this token. Use it in your next request to receive the next set of results.",
            "Type": "string",
            "Required": false
        },
        "MaxResults": {
            "Description": "Returns a list up to a specified limit.",
            "Type": "integer",
            "Required": false
        }
    },
    "list_edge_deployment_plans": {
        "NextToken": {
            "Description": "The response from the last list when returning a list large enough to need tokening.",
            "Type": "string",
            "Required": false
        },
        "MaxResults": {
            "Description": "The maximum number of results to select (50 by default).",
            "Type": "integer",
            "Required": false
        },
        "CreationTimeAfter": {
            "Description": "Selects edge deployment plans created after this time.",
            "Type": "datetime",
            "Required": false
        },
        "CreationTimeBefore": {
            "Description": "Selects edge deployment plans created before this time.",
            "Type": "datetime",
            "Required": false
        },
        "LastModifiedTimeAfter": {
            "Description": "Selects edge deployment plans that were last updated after this time.",
            "Type": "datetime",
            "Required": false
        },
        "LastModifiedTimeBefore": {
            "Description": "Selects edge deployment plans that were last updated before this time.",
            "Type": "datetime",
            "Required": false
        },
        "NameContains": {
            "Description": "Selects edge deployment plans with names containing this name.",
            "Type": "string",
            "Required": false
        },
        "DeviceFleetNameContains": {
            "Description": "Selects edge deployment plans with a device fleet name containing this name.",
            "Type": "string",
            "Required": false
        },
        "SortBy": {
            "Description": "The column by which to sort the edge deployment plans. Can be one of NAME , DEVICEFLEETNAME , CREATIONTIME , LASTMODIFIEDTIME .",
            "Type": "string",
            "Required": false
        },
        "SortOrder": {
            "Description": "The direction of the sorting (ascending or descending).",
            "Type": "string",
            "Required": false
        }
    },
    "list_edge_packaging_jobs": {
        "NextToken": {
            "Description": "The response from the last list when returning a list large enough to need tokening.",
            "Type": "string",
            "Required": false
        },
        "MaxResults": {
            "Description": "Maximum number of results to select.",
            "Type": "integer",
            "Required": false
        },
        "CreationTimeAfter": {
            "Description": "Select jobs where the job was created after specified time.",
            "Type": "datetime",
            "Required": false
        },
        "CreationTimeBefore": {
            "Description": "Select jobs where the job was created before specified time.",
            "Type": "datetime",
            "Required": false
        },
        "LastModifiedTimeAfter": {
            "Description": "Select jobs where the job was updated after specified time.",
            "Type": "datetime",
            "Required": false
        },
        "LastModifiedTimeBefore": {
            "Description": "Select jobs where the job was updated before specified time.",
            "Type": "datetime",
            "Required": false
        },
        "NameContains": {
            "Description": "Filter for jobs containing this name in their packaging job name.",
            "Type": "string",
            "Required": false
        },
        "ModelNameContains": {
            "Description": "Filter for jobs where the model name contains this string.",
            "Type": "string",
            "Required": false
        },
        "StatusEquals": {
            "Description": "The job status to filter for.",
            "Type": "string",
            "Required": false
        },
        "SortBy": {
            "Description": "Use to specify what column to sort by.",
            "Type": "string",
            "Required": false
        },
        "SortOrder": {
            "Description": "What direction to sort by.",
            "Type": "string",
            "Required": false
        }
    },
    "list_endpoint_configs": {
        "SortBy": {
            "Description": "The field to sort results by. The default is CreationTime .",
            "Type": "string",
            "Required": false
        },
        "SortOrder": {
            "Description": "The sort order for results. The default is Descending .",
            "Type": "string",
            "Required": false
        },
        "NextToken": {
            "Description": "If the result of the previous ListEndpointConfig request was truncated, the response includes a NextToken . To retrieve the next set of endpoint configurations, use the token in the next request.",
            "Type": "string",
            "Required": false
        },
        "MaxResults": {
            "Description": "The maximum number of training jobs to return in the response.",
            "Type": "integer",
            "Required": false
        },
        "NameContains": {
            "Description": "A string in the endpoint configuration name. This filter returns only endpoint configurations whose name contains the specified string.",
            "Type": "string",
            "Required": false
        },
        "CreationTimeBefore": {
            "Description": "A filter that returns only endpoint configurations created before the specified time (timestamp).",
            "Type": "datetime",
            "Required": false
        },
        "CreationTimeAfter": {
            "Description": "A filter that returns only endpoint configurations with a creation time greater than or equal to the specified time (timestamp).",
            "Type": "datetime",
            "Required": false
        }
    },
    "list_endpoints": {
        "SortBy": {
            "Description": "Sorts the list of results. The default is CreationTime .",
            "Type": "string",
            "Required": false
        },
        "SortOrder": {
            "Description": "The sort order for results. The default is Descending .",
            "Type": "string",
            "Required": false
        },
        "NextToken": {
            "Description": "If the result of a ListEndpoints request was truncated, the response includes a NextToken . To retrieve the next set of endpoints, use the token in the next request.",
            "Type": "string",
            "Required": false
        },
        "MaxResults": {
            "Description": "The maximum number of endpoints to return in the response. This value defaults to 10.",
            "Type": "integer",
            "Required": false
        },
        "NameContains": {
            "Description": "A string in endpoint names. This filter returns only endpoints whose name contains the specified string.",
            "Type": "string",
            "Required": false
        },
        "CreationTimeBefore": {
            "Description": "A filter that returns only endpoints that were created before the specified time (timestamp).",
            "Type": "datetime",
            "Required": false
        },
        "CreationTimeAfter": {
            "Description": "A filter that returns only endpoints with a creation time greater than or equal to the specified time (timestamp).",
            "Type": "datetime",
            "Required": false
        },
        "LastModifiedTimeBefore": {
            "Description": "A filter that returns only endpoints that were modified before the specified timestamp.",
            "Type": "datetime",
            "Required": false
        },
        "LastModifiedTimeAfter": {
            "Description": "A filter that returns only endpoints that were modified after the specified timestamp.",
            "Type": "datetime",
            "Required": false
        },
        "StatusEquals": {
            "Description": "A filter that returns only endpoints with the specified status.",
            "Type": "string",
            "Required": false
        }
    },
    "list_experiments": {
        "CreatedAfter": {
            "Description": "A filter that returns only experiments created after the specified time.",
            "Type": "datetime",
            "Required": false
        },
        "CreatedBefore": {
            "Description": "A filter that returns only experiments created before the specified time.",
            "Type": "datetime",
            "Required": false
        },
        "SortBy": {
            "Description": "The property used to sort results. The default value is CreationTime .",
            "Type": "string",
            "Required": false
        },
        "SortOrder": {
            "Description": "The sort order. The default value is Descending .",
            "Type": "string",
            "Required": false
        },
        "NextToken": {
            "Description": "If the previous call to ListExperiments didn't return the full set of experiments, the call returns a token for getting the next set of experiments.",
            "Type": "string",
            "Required": false
        },
        "MaxResults": {
            "Description": "The maximum number of experiments to return in the response. The default value is 10.",
            "Type": "integer",
            "Required": false
        }
    },
    "list_feature_groups": {
        "NameContains": {
            "Description": "A string that partially matches one or more FeatureGroup s names. Filters FeatureGroup s by name.",
            "Type": "string",
            "Required": false
        },
        "FeatureGroupStatusEquals": {
            "Description": "A FeatureGroup status. Filters by FeatureGroup status.",
            "Type": "string",
            "Required": false
        },
        "OfflineStoreStatusEquals": {
            "Description": "An OfflineStore status. Filters by OfflineStore status.",
            "Type": "string",
            "Required": false
        },
        "CreationTimeAfter": {
            "Description": "Use this parameter to search for FeatureGroups s created after a specific date and time.",
            "Type": "datetime",
            "Required": false
        },
        "CreationTimeBefore": {
            "Description": "Use this parameter to search for FeatureGroups s created before a specific date and time.",
            "Type": "datetime",
            "Required": false
        },
        "SortOrder": {
            "Description": "The order in which feature groups are listed.",
            "Type": "string",
            "Required": false
        },
        "SortBy": {
            "Description": "The value on which the feature group list is sorted.",
            "Type": "string",
            "Required": false
        },
        "MaxResults": {
            "Description": "The maximum number of results returned by ListFeatureGroups .",
            "Type": "integer",
            "Required": false
        },
        "NextToken": {
            "Description": "A token to resume pagination of ListFeatureGroups results.",
            "Type": "string",
            "Required": false
        }
    },
    "list_flow_definitions": {
        "CreationTimeAfter": {
            "Description": "A filter that returns only flow definitions with a creation time greater than or equal to the specified timestamp.",
            "Type": "datetime",
            "Required": false
        },
        "CreationTimeBefore": {
            "Description": "A filter that returns only flow definitions that were created before the specified timestamp.",
            "Type": "datetime",
            "Required": false
        },
        "SortOrder": {
            "Description": "An optional value that specifies whether you want the results sorted in Ascending or Descending order.",
            "Type": "string",
            "Required": false
        },
        "NextToken": {
            "Description": "A token to resume pagination.",
            "Type": "string",
            "Required": false
        },
        "MaxResults": {
            "Description": "The total number of items to return. If the total number of available items is more than the value specified in MaxResults , then a NextToken will be provided in the output that you can use to resume pagination.",
            "Type": "integer",
            "Required": false
        }
    },
    "list_human_task_uis": {
        "CreationTimeAfter": {
            "Description": "A filter that returns only human task user interfaces with a creation time greater than or equal to the specified timestamp.",
            "Type": "datetime",
            "Required": false
        },
        "CreationTimeBefore": {
            "Description": "A filter that returns only human task user interfaces that were created before the specified timestamp.",
            "Type": "datetime",
            "Required": false
        },
        "SortOrder": {
            "Description": "An optional value that specifies whether you want the results sorted in Ascending or Descending order.",
            "Type": "string",
            "Required": false
        },
        "NextToken": {
            "Description": "A token to resume pagination.",
            "Type": "string",
            "Required": false
        },
        "MaxResults": {
            "Description": "The total number of items to return. If the total number of available items is more than the value specified in MaxResults , then a NextToken will be provided in the output that you can use to resume pagination.",
            "Type": "integer",
            "Required": false
        }
    },
    "list_hyper_parameter_tuning_jobs": {
        "NextToken": {
            "Description": "If the result of the previous ListHyperParameterTuningJobs request was truncated, the response includes a NextToken . To retrieve the next set of tuning jobs, use the token in the next request.",
            "Type": "string",
            "Required": false
        },
        "MaxResults": {
            "Description": "The maximum number of tuning jobs to return. The default value is 10.",
            "Type": "integer",
            "Required": false
        },
        "SortBy": {
            "Description": "The field to sort results by. The default is Name .",
            "Type": "string",
            "Required": false
        },
        "SortOrder": {
            "Description": "The sort order for results. The default is Ascending .",
            "Type": "string",
            "Required": false
        },
        "NameContains": {
            "Description": "A string in the tuning job name. This filter returns only tuning jobs whose name contains the specified string.",
            "Type": "string",
            "Required": false
        },
        "CreationTimeAfter": {
            "Description": "A filter that returns only tuning jobs that were created after the specified time.",
            "Type": "datetime",
            "Required": false
        },
        "CreationTimeBefore": {
            "Description": "A filter that returns only tuning jobs that were created before the specified time.",
            "Type": "datetime",
            "Required": false
        },
        "LastModifiedTimeAfter": {
            "Description": "A filter that returns only tuning jobs that were modified after the specified time.",
            "Type": "datetime",
            "Required": false
        },
        "LastModifiedTimeBefore": {
            "Description": "A filter that returns only tuning jobs that were modified before the specified time.",
            "Type": "datetime",
            "Required": false
        },
        "StatusEquals": {
            "Description": "A filter that returns only tuning jobs with the specified status.",
            "Type": "string",
            "Required": false
        }
    },
    "list_image_versions": {
        "CreationTimeAfter": {
            "Description": "A filter that returns only versions created on or after the specified time.",
            "Type": "datetime",
            "Required": false
        },
        "CreationTimeBefore": {
            "Description": "A filter that returns only versions created on or before the specified time.",
            "Type": "datetime",
            "Required": false
        },
        "ImageName": {
            "Description": "The name of the image to list the versions of.",
            "Type": "string",
            "Required": true
        },
        "LastModifiedTimeAfter": {
            "Description": "A filter that returns only versions modified on or after the specified time.",
            "Type": "datetime",
            "Required": false
        },
        "LastModifiedTimeBefore": {
            "Description": "A filter that returns only versions modified on or before the specified time.",
            "Type": "datetime",
            "Required": false
        },
        "MaxResults": {
            "Description": "The maximum number of versions to return in the response. The default value is 10.",
            "Type": "integer",
            "Required": false
        },
        "NextToken": {
            "Description": "If the previous call to ListImageVersions didn't return the full set of versions, the call returns a token for getting the next set of versions.",
            "Type": "string",
            "Required": false
        },
        "SortBy": {
            "Description": "The property used to sort results. The default value is CREATION_TIME .",
            "Type": "string",
            "Required": false
        },
        "SortOrder": {
            "Description": "The sort order. The default value is DESCENDING .",
            "Type": "string",
            "Required": false
        }
    },
    "list_images": {
        "CreationTimeAfter": {
            "Description": "A filter that returns only images created on or after the specified time.",
            "Type": "datetime",
            "Required": false
        },
        "CreationTimeBefore": {
            "Description": "A filter that returns only images created on or before the specified time.",
            "Type": "datetime",
            "Required": false
        },
        "LastModifiedTimeAfter": {
            "Description": "A filter that returns only images modified on or after the specified time.",
            "Type": "datetime",
            "Required": false
        },
        "LastModifiedTimeBefore": {
            "Description": "A filter that returns only images modified on or before the specified time.",
            "Type": "datetime",
            "Required": false
        },
        "MaxResults": {
            "Description": "The maximum number of images to return in the response. The default value is 10.",
            "Type": "integer",
            "Required": false
        },
        "NameContains": {
            "Description": "A filter that returns only images whose name contains the specified string.",
            "Type": "string",
            "Required": false
        },
        "NextToken": {
            "Description": "If the previous call to ListImages didn't return the full set of images, the call returns a token for getting the next set of images.",
            "Type": "string",
            "Required": false
        },
        "SortBy": {
            "Description": "The property used to sort results. The default value is CREATION_TIME .",
            "Type": "string",
            "Required": false
        },
        "SortOrder": {
            "Description": "The sort order. The default value is DESCENDING .",
            "Type": "string",
            "Required": false
        }
    },
    "list_inference_recommendations_jobs": {
        "CreationTimeAfter": {
            "Description": "A filter that returns only jobs created after the specified time (timestamp).",
            "Type": "datetime",
            "Required": false
        },
        "CreationTimeBefore": {
            "Description": "A filter that returns only jobs created before the specified time (timestamp).",
            "Type": "datetime",
            "Required": false
        },
        "LastModifiedTimeAfter": {
            "Description": "A filter that returns only jobs that were last modified after the specified time (timestamp).",
            "Type": "datetime",
            "Required": false
        },
        "LastModifiedTimeBefore": {
            "Description": "A filter that returns only jobs that were last modified before the specified time (timestamp).",
            "Type": "datetime",
            "Required": false
        },
        "NameContains": {
            "Description": "A string in the job name. This filter returns only recommendations whose name contains the specified string.",
            "Type": "string",
            "Required": false
        },
        "StatusEquals": {
            "Description": "A filter that retrieves only inference recommendations jobs with a specific status.",
            "Type": "string",
            "Required": false
        },
        "SortBy": {
            "Description": "The parameter by which to sort the results.",
            "Type": "string",
            "Required": false
        },
        "SortOrder": {
            "Description": "The sort order for the results.",
            "Type": "string",
            "Required": false
        },
        "NextToken": {
            "Description": "If the response to a previous ListInferenceRecommendationsJobsRequest request was truncated, the response includes a NextToken . To retrieve the next set of recommendations, use the token in the next request.",
            "Type": "string",
            "Required": false
        },
        "MaxResults": {
            "Description": "The maximum number of recommendations to return in the response.",
            "Type": "integer",
            "Required": false
        }
    },
    "list_labeling_jobs": {
        "CreationTimeAfter": {
            "Description": "A filter that returns only labeling jobs created after the specified time (timestamp).",
            "Type": "datetime",
            "Required": false
        },
        "CreationTimeBefore": {
            "Description": "A filter that returns only labeling jobs created before the specified time (timestamp).",
            "Type": "datetime",
            "Required": false
        },
        "LastModifiedTimeAfter": {
            "Description": "A filter that returns only labeling jobs modified after the specified time (timestamp).",
            "Type": "datetime",
            "Required": false
        },
        "LastModifiedTimeBefore": {
            "Description": "A filter that returns only labeling jobs modified before the specified time (timestamp).",
            "Type": "datetime",
            "Required": false
        },
        "MaxResults": {
            "Description": "The maximum number of labeling jobs to return in each page of the response.",
            "Type": "integer",
            "Required": false
        },
        "NextToken": {
            "Description": "If the result of the previous ListLabelingJobs request was truncated, the response includes a NextToken . To retrieve the next set of labeling jobs, use the token in the next request.",
            "Type": "string",
            "Required": false
        },
        "NameContains": {
            "Description": "A string in the labeling job name. This filter returns only labeling jobs whose name contains the specified string.",
            "Type": "string",
            "Required": false
        },
        "SortBy": {
            "Description": "The field to sort results by. The default is CreationTime .",
            "Type": "string",
            "Required": false
        },
        "SortOrder": {
            "Description": "The sort order for results. The default is Ascending .",
            "Type": "string",
            "Required": false
        },
        "StatusEquals": {
            "Description": "A filter that retrieves only labeling jobs with a specific status.",
            "Type": "string",
            "Required": false
        }
    },
    "list_labeling_jobs_for_workteam": {
        "WorkteamArn": {
            "Description": "The Amazon Resource Name (ARN) of the work team for which you want to see labeling jobs for.",
            "Type": "string",
            "Required": true
        },
        "MaxResults": {
            "Description": "The maximum number of labeling jobs to return in each page of the response.",
            "Type": "integer",
            "Required": false
        },
        "NextToken": {
            "Description": "If the result of the previous ListLabelingJobsForWorkteam request was truncated, the response includes a NextToken . To retrieve the next set of labeling jobs, use the token in the next request.",
            "Type": "string",
            "Required": false
        },
        "CreationTimeAfter": {
            "Description": "A filter that returns only labeling jobs created after the specified time (timestamp).",
            "Type": "datetime",
            "Required": false
        },
        "CreationTimeBefore": {
            "Description": "A filter that returns only labeling jobs created before the specified time (timestamp).",
            "Type": "datetime",
            "Required": false
        },
        "JobReferenceCodeContains": {
            "Description": "A filter the limits jobs to only the ones whose job reference code contains the specified string.",
            "Type": "string",
            "Required": false
        },
        "SortBy": {
            "Description": "The field to sort results by. The default is CreationTime .",
            "Type": "string",
            "Required": false
        },
        "SortOrder": {
            "Description": "The sort order for results. The default is Ascending .",
            "Type": "string",
            "Required": false
        }
    },
    "list_lineage_groups": {
        "CreatedAfter": {
            "Description": "A timestamp to filter against lineage groups created after a certain point in time.",
            "Type": "datetime",
            "Required": false
        },
        "CreatedBefore": {
            "Description": "A timestamp to filter against lineage groups created before a certain point in time.",
            "Type": "datetime",
            "Required": false
        },
        "SortBy": {
            "Description": "The parameter by which to sort the results. The default is CreationTime .",
            "Type": "string",
            "Required": false
        },
        "SortOrder": {
            "Description": "The sort order for the results. The default is Ascending .",
            "Type": "string",
            "Required": false
        },
        "NextToken": {
            "Description": "If the response is truncated, SageMaker returns this token. To retrieve the next set of algorithms, use it in the subsequent request.",
            "Type": "string",
            "Required": false
        },
        "MaxResults": {
            "Description": "The maximum number of endpoints to return in the response. This value defaults to 10.",
            "Type": "integer",
            "Required": false
        }
    },
    "list_model_bias_job_definitions": {
        "EndpointName": {
            "Description": "Name of the endpoint to monitor for model bias.",
            "Type": "string",
            "Required": false
        },
        "SortBy": {
            "Description": "Whether to sort results by the Name or CreationTime field. The default is CreationTime .",
            "Type": "string",
            "Required": false
        },
        "SortOrder": {
            "Description": "Whether to sort the results in Ascending or Descending order. The default is Descending .",
            "Type": "string",
            "Required": false
        },
        "NextToken": {
            "Description": "The token returned if the response is truncated. To retrieve the next set of job executions, use it in the next request.",
            "Type": "string",
            "Required": false
        },
        "MaxResults": {
            "Description": "The maximum number of model bias jobs to return in the response. The default value is 10.",
            "Type": "integer",
            "Required": false
        },
        "NameContains": {
            "Description": "Filter for model bias jobs whose name contains a specified string.",
            "Type": "string",
            "Required": false
        },
        "CreationTimeBefore": {
            "Description": "A filter that returns only model bias jobs created before a specified time.",
            "Type": "datetime",
            "Required": false
        },
        "CreationTimeAfter": {
            "Description": "A filter that returns only model bias jobs created after a specified time.",
            "Type": "datetime",
            "Required": false
        }
    },
    "list_model_explainability_job_definitions": {
        "EndpointName": {
            "Description": "Name of the endpoint to monitor for model explainability.",
            "Type": "string",
            "Required": false
        },
        "SortBy": {
            "Description": "Whether to sort results by the Name or CreationTime field. The default is CreationTime .",
            "Type": "string",
            "Required": false
        },
        "SortOrder": {
            "Description": "Whether to sort the results in Ascending or Descending order. The default is Descending .",
            "Type": "string",
            "Required": false
        },
        "NextToken": {
            "Description": "The token returned if the response is truncated. To retrieve the next set of job executions, use it in the next request.",
            "Type": "string",
            "Required": false
        },
        "MaxResults": {
            "Description": "The maximum number of jobs to return in the response. The default value is 10.",
            "Type": "integer",
            "Required": false
        },
        "NameContains": {
            "Description": "Filter for model explainability jobs whose name contains a specified string.",
            "Type": "string",
            "Required": false
        },
        "CreationTimeBefore": {
            "Description": "A filter that returns only model explainability jobs created before a specified time.",
            "Type": "datetime",
            "Required": false
        },
        "CreationTimeAfter": {
            "Description": "A filter that returns only model explainability jobs created after a specified time.",
            "Type": "datetime",
            "Required": false
        }
    },
    "list_model_metadata": {
        "SearchExpression": {
            "Description": "One or more filters that searches for the specified resource or resources in a search. All resource objects that satisfy the expression's condition are included in the search results. Specify the Framework, FrameworkVersion, Domain or Task to filter supported. Filter names and values are case-sensitive.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "NextToken": {
            "Description": "If the response to a previous ListModelMetadataResponse request was truncated, the response includes a NextToken. To retrieve the next set of model metadata, use the token in the next request.",
            "Type": "string",
            "Required": false
        },
        "MaxResults": {
            "Description": "The maximum number of models to return in the response.",
            "Type": "integer",
            "Required": false
        }
    },
    "list_model_package_groups": {
        "CreationTimeAfter": {
            "Description": "A filter that returns only model groups created after the specified time.",
            "Type": "datetime",
            "Required": false
        },
        "CreationTimeBefore": {
            "Description": "A filter that returns only model groups created before the specified time.",
            "Type": "datetime",
            "Required": false
        },
        "MaxResults": {
            "Description": "The maximum number of results to return in the response.",
            "Type": "integer",
            "Required": false
        },
        "NameContains": {
            "Description": "A string in the model group name. This filter returns only model groups whose name contains the specified string.",
            "Type": "string",
            "Required": false
        },
        "NextToken": {
            "Description": "If the result of the previous ListModelPackageGroups request was truncated, the response includes a NextToken . To retrieve the next set of model groups, use the token in the next request.",
            "Type": "string",
            "Required": false
        },
        "SortBy": {
            "Description": "The field to sort results by. The default is CreationTime .",
            "Type": "string",
            "Required": false
        },
        "SortOrder": {
            "Description": "The sort order for results. The default is Ascending .",
            "Type": "string",
            "Required": false
        }
    },
    "list_model_packages": {
        "CreationTimeAfter": {
            "Description": "A filter that returns only model packages created after the specified time (timestamp).",
            "Type": "datetime",
            "Required": false
        },
        "CreationTimeBefore": {
            "Description": "A filter that returns only model packages created before the specified time (timestamp).",
            "Type": "datetime",
            "Required": false
        },
        "MaxResults": {
            "Description": "The maximum number of model packages to return in the response.",
            "Type": "integer",
            "Required": false
        },
        "NameContains": {
            "Description": "A string in the model package name. This filter returns only model packages whose name contains the specified string.",
            "Type": "string",
            "Required": false
        },
        "ModelApprovalStatus": {
            "Description": "A filter that returns only the model packages with the specified approval status.",
            "Type": "string",
            "Required": false
        },
        "ModelPackageGroupName": {
            "Description": "A filter that returns only model versions that belong to the specified model group.",
            "Type": "string",
            "Required": false
        },
        "ModelPackageType": {
            "Description": "A filter that returns only the model packages of the specified type. This can be one of the following values.",
            "Type": "string",
            "Required": false,
            "string variables": {}
        },
        "NextToken": {
            "Description": "If the response to a previous ListModelPackages request was truncated, the response includes a NextToken . To retrieve the next set of model packages, use the token in the next request.",
            "Type": "string",
            "Required": false
        },
        "SortBy": {
            "Description": "The parameter by which to sort the results. The default is CreationTime .",
            "Type": "string",
            "Required": false
        },
        "SortOrder": {
            "Description": "The sort order for the results. The default is Ascending .",
            "Type": "string",
            "Required": false
        }
    },
    "list_model_quality_job_definitions": {
        "EndpointName": {
            "Description": "A filter that returns only model quality monitoring job definitions that are associated with the specified endpoint.",
            "Type": "string",
            "Required": false
        },
        "SortBy": {
            "Description": "The field to sort results by. The default is CreationTime .",
            "Type": "string",
            "Required": false
        },
        "SortOrder": {
            "Description": "The sort order for results. The default is Descending .",
            "Type": "string",
            "Required": false
        },
        "NextToken": {
            "Description": "If the result of the previous ListModelQualityJobDefinitions request was truncated, the response includes a NextToken . To retrieve the next set of model quality monitoring job definitions, use the token in the next request.",
            "Type": "string",
            "Required": false
        },
        "MaxResults": {
            "Description": "The maximum number of results to return in a call to ListModelQualityJobDefinitions .",
            "Type": "integer",
            "Required": false
        },
        "NameContains": {
            "Description": "A string in the transform job name. This filter returns only model quality monitoring job definitions whose name contains the specified string.",
            "Type": "string",
            "Required": false
        },
        "CreationTimeBefore": {
            "Description": "A filter that returns only model quality monitoring job definitions created before the specified time.",
            "Type": "datetime",
            "Required": false
        },
        "CreationTimeAfter": {
            "Description": "A filter that returns only model quality monitoring job definitions created after the specified time.",
            "Type": "datetime",
            "Required": false
        }
    },
    "list_models": {
        "SortBy": {
            "Description": "Sorts the list of results. The default is CreationTime .",
            "Type": "string",
            "Required": false
        },
        "SortOrder": {
            "Description": "The sort order for results. The default is Descending .",
            "Type": "string",
            "Required": false
        },
        "NextToken": {
            "Description": "If the response to a previous ListModels request was truncated, the response includes a NextToken . To retrieve the next set of models, use the token in the next request.",
            "Type": "string",
            "Required": false
        },
        "MaxResults": {
            "Description": "The maximum number of models to return in the response.",
            "Type": "integer",
            "Required": false
        },
        "NameContains": {
            "Description": "A string in the model name. This filter returns only models whose name contains the specified string.",
            "Type": "string",
            "Required": false
        },
        "CreationTimeBefore": {
            "Description": "A filter that returns only models created before the specified time (timestamp).",
            "Type": "datetime",
            "Required": false
        },
        "CreationTimeAfter": {
            "Description": "A filter that returns only models with a creation time greater than or equal to the specified time (timestamp).",
            "Type": "datetime",
            "Required": false
        }
    },
    "list_monitoring_executions": {
        "MonitoringScheduleName": {
            "Description": "Name of a specific schedule to fetch jobs for.",
            "Type": "string",
            "Required": false
        },
        "EndpointName": {
            "Description": "Name of a specific endpoint to fetch jobs for.",
            "Type": "string",
            "Required": false
        },
        "SortBy": {
            "Description": "Whether to sort results by Status , CreationTime , ScheduledTime field. The default is CreationTime .",
            "Type": "string",
            "Required": false
        },
        "SortOrder": {
            "Description": "Whether to sort the results in Ascending or Descending order. The default is Descending .",
            "Type": "string",
            "Required": false
        },
        "NextToken": {
            "Description": "The token returned if the response is truncated. To retrieve the next set of job executions, use it in the next request.",
            "Type": "string",
            "Required": false
        },
        "MaxResults": {
            "Description": "The maximum number of jobs to return in the response. The default value is 10.",
            "Type": "integer",
            "Required": false
        },
        "ScheduledTimeBefore": {
            "Description": "Filter for jobs scheduled before a specified time.",
            "Type": "datetime",
            "Required": false
        },
        "ScheduledTimeAfter": {
            "Description": "Filter for jobs scheduled after a specified time.",
            "Type": "datetime",
            "Required": false
        },
        "CreationTimeBefore": {
            "Description": "A filter that returns only jobs created before a specified time.",
            "Type": "datetime",
            "Required": false
        },
        "CreationTimeAfter": {
            "Description": "A filter that returns only jobs created after a specified time.",
            "Type": "datetime",
            "Required": false
        },
        "LastModifiedTimeBefore": {
            "Description": "A filter that returns only jobs modified after a specified time.",
            "Type": "datetime",
            "Required": false
        },
        "LastModifiedTimeAfter": {
            "Description": "A filter that returns only jobs modified before a specified time.",
            "Type": "datetime",
            "Required": false
        },
        "StatusEquals": {
            "Description": "A filter that retrieves only jobs with a specific status.",
            "Type": "string",
            "Required": false
        },
        "MonitoringJobDefinitionName": {
            "Description": "Gets a list of the monitoring job runs of the specified monitoring job definitions.",
            "Type": "string",
            "Required": false
        },
        "MonitoringTypeEquals": {
            "Description": "A filter that returns only the monitoring job runs of the specified monitoring type.",
            "Type": "string",
            "Required": false
        }
    },
    "list_monitoring_schedules": {
        "EndpointName": {
            "Description": "Name of a specific endpoint to fetch schedules for.",
            "Type": "string",
            "Required": false
        },
        "SortBy": {
            "Description": "Whether to sort results by Status , CreationTime , ScheduledTime field. The default is CreationTime .",
            "Type": "string",
            "Required": false
        },
        "SortOrder": {
            "Description": "Whether to sort the results in Ascending or Descending order. The default is Descending .",
            "Type": "string",
            "Required": false
        },
        "NextToken": {
            "Description": "The token returned if the response is truncated. To retrieve the next set of job executions, use it in the next request.",
            "Type": "string",
            "Required": false
        },
        "MaxResults": {
            "Description": "The maximum number of jobs to return in the response. The default value is 10.",
            "Type": "integer",
            "Required": false
        },
        "NameContains": {
            "Description": "Filter for monitoring schedules whose name contains a specified string.",
            "Type": "string",
            "Required": false
        },
        "CreationTimeBefore": {
            "Description": "A filter that returns only monitoring schedules created before a specified time.",
            "Type": "datetime",
            "Required": false
        },
        "CreationTimeAfter": {
            "Description": "A filter that returns only monitoring schedules created after a specified time.",
            "Type": "datetime",
            "Required": false
        },
        "LastModifiedTimeBefore": {
            "Description": "A filter that returns only monitoring schedules modified before a specified time.",
            "Type": "datetime",
            "Required": false
        },
        "LastModifiedTimeAfter": {
            "Description": "A filter that returns only monitoring schedules modified after a specified time.",
            "Type": "datetime",
            "Required": false
        },
        "StatusEquals": {
            "Description": "A filter that returns only monitoring schedules modified before a specified time.",
            "Type": "string",
            "Required": false
        },
        "MonitoringJobDefinitionName": {
            "Description": "Gets a list of the monitoring schedules for the specified monitoring job definition.",
            "Type": "string",
            "Required": false
        },
        "MonitoringTypeEquals": {
            "Description": "A filter that returns only the monitoring schedules for the specified monitoring type.",
            "Type": "string",
            "Required": false
        }
    },
    "list_notebook_instance_lifecycle_configs": {
        "NextToken": {
            "Description": "If the result of a ListNotebookInstanceLifecycleConfigs request was truncated, the response includes a NextToken . To get the next set of lifecycle configurations, use the token in the next request.",
            "Type": "string",
            "Required": false
        },
        "MaxResults": {
            "Description": "The maximum number of lifecycle configurations to return in the response.",
            "Type": "integer",
            "Required": false
        },
        "SortBy": {
            "Description": "Sorts the list of results. The default is CreationTime .",
            "Type": "string",
            "Required": false
        },
        "SortOrder": {
            "Description": "The sort order for results.",
            "Type": "string",
            "Required": false
        },
        "NameContains": {
            "Description": "A string in the lifecycle configuration name. This filter returns only lifecycle configurations whose name contains the specified string.",
            "Type": "string",
            "Required": false
        },
        "CreationTimeBefore": {
            "Description": "A filter that returns only lifecycle configurations that were created before the specified time (timestamp).",
            "Type": "datetime",
            "Required": false
        },
        "CreationTimeAfter": {
            "Description": "A filter that returns only lifecycle configurations that were created after the specified time (timestamp).",
            "Type": "datetime",
            "Required": false
        },
        "LastModifiedTimeBefore": {
            "Description": "A filter that returns only lifecycle configurations that were modified before the specified time (timestamp).",
            "Type": "datetime",
            "Required": false
        },
        "LastModifiedTimeAfter": {
            "Description": "A filter that returns only lifecycle configurations that were modified after the specified time (timestamp).",
            "Type": "datetime",
            "Required": false
        }
    },
    "list_notebook_instances": {
        "NextToken": {
            "Description": "If the previous call to the ListNotebookInstances is truncated, the response includes a NextToken. You can use this token in your subsequent ListNotebookInstances request to fetch the next set of notebook instances.",
            "Type": "string",
            "Required": false
        },
        "MaxResults": {
            "Description": "The maximum number of notebook instances to return.",
            "Type": "integer",
            "Required": false
        },
        "SortBy": {
            "Description": "The field to sort results by. The default is Name .",
            "Type": "string",
            "Required": false
        },
        "SortOrder": {
            "Description": "The sort order for results.",
            "Type": "string",
            "Required": false
        },
        "NameContains": {
            "Description": "A string in the notebook instances' name. This filter returns only notebook instances whose name contains the specified string.",
            "Type": "string",
            "Required": false
        },
        "CreationTimeBefore": {
            "Description": "A filter that returns only notebook instances that were created before the specified time (timestamp).",
            "Type": "datetime",
            "Required": false
        },
        "CreationTimeAfter": {
            "Description": "A filter that returns only notebook instances that were created after the specified time (timestamp).",
            "Type": "datetime",
            "Required": false
        },
        "LastModifiedTimeBefore": {
            "Description": "A filter that returns only notebook instances that were modified before the specified time (timestamp).",
            "Type": "datetime",
            "Required": false
        },
        "LastModifiedTimeAfter": {
            "Description": "A filter that returns only notebook instances that were modified after the specified time (timestamp).",
            "Type": "datetime",
            "Required": false
        },
        "StatusEquals": {
            "Description": "A filter that returns only notebook instances with the specified status.",
            "Type": "string",
            "Required": false
        },
        "NotebookInstanceLifecycleConfigNameContains": {
            "Description": "A string in the name of a notebook instances lifecycle configuration associated with this notebook instance. This filter returns only notebook instances associated with a lifecycle configuration with a name that contains the specified string.",
            "Type": "string",
            "Required": false
        },
        "DefaultCodeRepositoryContains": {
            "Description": "A string in the name or URL of a Git repository associated with this notebook instance. This filter returns only notebook instances associated with a git repository with a name that contains the specified string.",
            "Type": "string",
            "Required": false
        },
        "AdditionalCodeRepositoryEquals": {
            "Description": "A filter that returns only notebook instances with associated with the specified git repository.",
            "Type": "string",
            "Required": false
        }
    },
    "list_pipeline_execution_steps": {
        "PipelineExecutionArn": {
            "Description": "The Amazon Resource Name (ARN) of the pipeline execution.",
            "Type": "string",
            "Required": false
        },
        "NextToken": {
            "Description": "If the result of the previous ListPipelineExecutionSteps request was truncated, the response includes a NextToken . To retrieve the next set of pipeline execution steps, use the token in the next request.",
            "Type": "string",
            "Required": false
        },
        "MaxResults": {
            "Description": "The maximum number of pipeline execution steps to return in the response.",
            "Type": "integer",
            "Required": false
        },
        "SortOrder": {
            "Description": "The field by which to sort results. The default is CreatedTime .",
            "Type": "string",
            "Required": false
        }
    },
    "list_pipeline_executions": {
        "PipelineName": {
            "Description": "The name of the pipeline.",
            "Type": "string",
            "Required": true
        },
        "CreatedAfter": {
            "Description": "A filter that returns the pipeline executions that were created after a specified time.",
            "Type": "datetime",
            "Required": false
        },
        "CreatedBefore": {
            "Description": "A filter that returns the pipeline executions that were created before a specified time.",
            "Type": "datetime",
            "Required": false
        },
        "SortBy": {
            "Description": "The field by which to sort results. The default is CreatedTime .",
            "Type": "string",
            "Required": false
        },
        "SortOrder": {
            "Description": "The sort order for results.",
            "Type": "string",
            "Required": false
        },
        "NextToken": {
            "Description": "If the result of the previous ListPipelineExecutions request was truncated, the response includes a NextToken . To retrieve the next set of pipeline executions, use the token in the next request.",
            "Type": "string",
            "Required": false
        },
        "MaxResults": {
            "Description": "The maximum number of pipeline executions to return in the response.",
            "Type": "integer",
            "Required": false
        }
    },
    "list_pipeline_parameters_for_execution": {
        "PipelineExecutionArn": {
            "Description": "The Amazon Resource Name (ARN) of the pipeline execution.",
            "Type": "string",
            "Required": true
        },
        "NextToken": {
            "Description": "If the result of the previous ListPipelineParametersForExecution request was truncated, the response includes a NextToken . To retrieve the next set of parameters, use the token in the next request.",
            "Type": "string",
            "Required": false
        },
        "MaxResults": {
            "Description": "The maximum number of parameters to return in the response.",
            "Type": "integer",
            "Required": false
        }
    },
    "list_pipelines": {
        "PipelineNamePrefix": {
            "Description": "The prefix of the pipeline name.",
            "Type": "string",
            "Required": false
        },
        "CreatedAfter": {
            "Description": "A filter that returns the pipelines that were created after a specified time.",
            "Type": "datetime",
            "Required": false
        },
        "CreatedBefore": {
            "Description": "A filter that returns the pipelines that were created before a specified time.",
            "Type": "datetime",
            "Required": false
        },
        "SortBy": {
            "Description": "The field by which to sort results. The default is CreatedTime .",
            "Type": "string",
            "Required": false
        },
        "SortOrder": {
            "Description": "The sort order for results.",
            "Type": "string",
            "Required": false
        },
        "NextToken": {
            "Description": "If the result of the previous ListPipelines request was truncated, the response includes a NextToken . To retrieve the next set of pipelines, use the token in the next request.",
            "Type": "string",
            "Required": false
        },
        "MaxResults": {
            "Description": "The maximum number of pipelines to return in the response.",
            "Type": "integer",
            "Required": false
        }
    },
    "list_processing_jobs": {
        "CreationTimeAfter": {
            "Description": "A filter that returns only processing jobs created after the specified time.",
            "Type": "datetime",
            "Required": false
        },
        "CreationTimeBefore": {
            "Description": "A filter that returns only processing jobs created after the specified time.",
            "Type": "datetime",
            "Required": false
        },
        "LastModifiedTimeAfter": {
            "Description": "A filter that returns only processing jobs modified after the specified time.",
            "Type": "datetime",
            "Required": false
        },
        "LastModifiedTimeBefore": {
            "Description": "A filter that returns only processing jobs modified before the specified time.",
            "Type": "datetime",
            "Required": false
        },
        "NameContains": {
            "Description": "A string in the processing job name. This filter returns only processing jobs whose name contains the specified string.",
            "Type": "string",
            "Required": false
        },
        "StatusEquals": {
            "Description": "A filter that retrieves only processing jobs with a specific status.",
            "Type": "string",
            "Required": false
        },
        "SortBy": {
            "Description": "The field to sort results by. The default is CreationTime .",
            "Type": "string",
            "Required": false
        },
        "SortOrder": {
            "Description": "The sort order for results. The default is Ascending .",
            "Type": "string",
            "Required": false
        },
        "NextToken": {
            "Description": "If the result of the previous ListProcessingJobs request was truncated, the response includes a NextToken . To retrieve the next set of processing jobs, use the token in the next request.",
            "Type": "string",
            "Required": false
        },
        "MaxResults": {
            "Description": "The maximum number of processing jobs to return in the response.",
            "Type": "integer",
            "Required": false
        }
    },
    "list_projects": {
        "CreationTimeAfter": {
            "Description": "A filter that returns the projects that were created after a specified time.",
            "Type": "datetime",
            "Required": false
        },
        "CreationTimeBefore": {
            "Description": "A filter that returns the projects that were created before a specified time.",
            "Type": "datetime",
            "Required": false
        },
        "MaxResults": {
            "Description": "The maximum number of projects to return in the response.",
            "Type": "integer",
            "Required": false
        },
        "NameContains": {
            "Description": "A filter that returns the projects whose name contains a specified string.",
            "Type": "string",
            "Required": false
        },
        "NextToken": {
            "Description": "If the result of the previous ListProjects request was truncated, the response includes a NextToken . To retrieve the next set of projects, use the token in the next request.",
            "Type": "string",
            "Required": false
        },
        "SortBy": {
            "Description": "The field by which to sort results. The default is CreationTime .",
            "Type": "string",
            "Required": false
        },
        "SortOrder": {
            "Description": "The sort order for results. The default is Ascending .",
            "Type": "string",
            "Required": false
        }
    },
    "list_stage_devices": {
        "NextToken": {
            "Description": "The response from the last list when returning a list large enough to neeed tokening.",
            "Type": "string",
            "Required": false
        },
        "MaxResults": {
            "Description": "The maximum number of requests to select.",
            "Type": "integer",
            "Required": false
        },
        "EdgeDeploymentPlanName": {
            "Description": "The name of the edge deployment plan.",
            "Type": "string",
            "Required": true
        },
        "ExcludeDevicesDeployedInOtherStage": {
            "Description": "Toggle for excluding devices deployed in other stages.",
            "Type": "boolean",
            "Required": false
        },
        "StageName": {
            "Description": "The name of the stage in the deployment.",
            "Type": "string",
            "Required": true
        }
    },
    "list_studio_lifecycle_configs": {
        "MaxResults": {
            "Description": "The maximum number of Studio Lifecycle Configurations to return in the response. The default value is 10.",
            "Type": "integer",
            "Required": false
        },
        "NextToken": {
            "Description": "If the previous call to ListStudioLifecycleConfigs didn't return the full set of Lifecycle Configurations, the call returns a token for getting the next set of Lifecycle Configurations.",
            "Type": "string",
            "Required": false
        },
        "NameContains": {
            "Description": "A string in the Lifecycle Configuration name. This filter returns only Lifecycle Configurations whose name contains the specified string.",
            "Type": "string",
            "Required": false
        },
        "AppTypeEquals": {
            "Description": "A parameter to search for the App Type to which the Lifecycle Configuration is attached.",
            "Type": "string",
            "Required": false
        },
        "CreationTimeBefore": {
            "Description": "A filter that returns only Lifecycle Configurations created on or before the specified time.",
            "Type": "datetime",
            "Required": false
        },
        "CreationTimeAfter": {
            "Description": "A filter that returns only Lifecycle Configurations created on or after the specified time.",
            "Type": "datetime",
            "Required": false
        },
        "ModifiedTimeBefore": {
            "Description": "A filter that returns only Lifecycle Configurations modified before the specified time.",
            "Type": "datetime",
            "Required": false
        },
        "ModifiedTimeAfter": {
            "Description": "A filter that returns only Lifecycle Configurations modified after the specified time.",
            "Type": "datetime",
            "Required": false
        },
        "SortBy": {
            "Description": "The property used to sort results. The default value is CreationTime.",
            "Type": "string",
            "Required": false
        },
        "SortOrder": {
            "Description": "The sort order. The default value is Descending.",
            "Type": "string",
            "Required": false
        }
    },
    "list_subscribed_workteams": {
        "NameContains": {
            "Description": "A string in the work team name. This filter returns only work teams whose name contains the specified string.",
            "Type": "string",
            "Required": false
        },
        "NextToken": {
            "Description": "If the result of the previous ListSubscribedWorkteams request was truncated, the response includes a NextToken . To retrieve the next set of labeling jobs, use the token in the next request.",
            "Type": "string",
            "Required": false
        },
        "MaxResults": {
            "Description": "The maximum number of work teams to return in each page of the response.",
            "Type": "integer",
            "Required": false
        }
    },
    "list_tags": {
        "ResourceArn": {
            "Description": "The Amazon Resource Name (ARN) of the resource whose tags you want to retrieve.",
            "Type": "string",
            "Required": true
        },
        "NextToken": {
            "Description": "If the response to the previous ListTags request is truncated, SageMaker returns this token. To retrieve the next set of tags, use it in the subsequent request.",
            "Type": "string",
            "Required": false
        },
        "MaxResults": {
            "Description": "Maximum number of tags to return.",
            "Type": "integer",
            "Required": false
        }
    },
    "list_training_jobs": {
        "NextToken": {
            "Description": "If the result of the previous ListTrainingJobs request was truncated, the response includes a NextToken . To retrieve the next set of training jobs, use the token in the next request.",
            "Type": "string",
            "Required": false
        },
        "MaxResults": {
            "Description": "The maximum number of training jobs to return in the response.",
            "Type": "integer",
            "Required": false
        },
        "CreationTimeAfter": {
            "Description": "A filter that returns only training jobs created after the specified time (timestamp).",
            "Type": "datetime",
            "Required": false
        },
        "CreationTimeBefore": {
            "Description": "A filter that returns only training jobs created before the specified time (timestamp).",
            "Type": "datetime",
            "Required": false
        },
        "LastModifiedTimeAfter": {
            "Description": "A filter that returns only training jobs modified after the specified time (timestamp).",
            "Type": "datetime",
            "Required": false
        },
        "LastModifiedTimeBefore": {
            "Description": "A filter that returns only training jobs modified before the specified time (timestamp).",
            "Type": "datetime",
            "Required": false
        },
        "NameContains": {
            "Description": "A string in the training job name. This filter returns only training jobs whose name contains the specified string.",
            "Type": "string",
            "Required": false
        },
        "StatusEquals": {
            "Description": "A filter that retrieves only training jobs with a specific status.",
            "Type": "string",
            "Required": false
        },
        "SortBy": {
            "Description": "The field to sort results by. The default is CreationTime .",
            "Type": "string",
            "Required": false
        },
        "SortOrder": {
            "Description": "The sort order for results. The default is Ascending .",
            "Type": "string",
            "Required": false
        }
    },
    "list_training_jobs_for_hyper_parameter_tuning_job": {
        "HyperParameterTuningJobName": {
            "Description": "The name of the tuning job whose training jobs you want to list.",
            "Type": "string",
            "Required": true
        },
        "NextToken": {
            "Description": "If the result of the previous ListTrainingJobsForHyperParameterTuningJob request was truncated, the response includes a NextToken . To retrieve the next set of training jobs, use the token in the next request.",
            "Type": "string",
            "Required": false
        },
        "MaxResults": {
            "Description": "The maximum number of training jobs to return. The default value is 10.",
            "Type": "integer",
            "Required": false
        },
        "StatusEquals": {
            "Description": "A filter that returns only training jobs with the specified status.",
            "Type": "string",
            "Required": false
        },
        "SortBy": {
            "Description": "The field to sort results by. The default is Name .\nIf the value of this field is FinalObjectiveMetricValue, any training jobs that did not return an objective metric are not listed.",
            "Type": "string",
            "Required": false
        },
        "SortOrder": {
            "Description": "The sort order for results. The default is Ascending .",
            "Type": "string",
            "Required": false
        }
    },
    "list_transform_jobs": {
        "CreationTimeAfter": {
            "Description": "A filter that returns only transform jobs created after the specified time.",
            "Type": "datetime",
            "Required": false
        },
        "CreationTimeBefore": {
            "Description": "A filter that returns only transform jobs created before the specified time.",
            "Type": "datetime",
            "Required": false
        },
        "LastModifiedTimeAfter": {
            "Description": "A filter that returns only transform jobs modified after the specified time.",
            "Type": "datetime",
            "Required": false
        },
        "LastModifiedTimeBefore": {
            "Description": "A filter that returns only transform jobs modified before the specified time.",
            "Type": "datetime",
            "Required": false
        },
        "NameContains": {
            "Description": "A string in the transform job name. This filter returns only transform jobs whose name contains the specified string.",
            "Type": "string",
            "Required": false
        },
        "StatusEquals": {
            "Description": "A filter that retrieves only transform jobs with a specific status.",
            "Type": "string",
            "Required": false
        },
        "SortBy": {
            "Description": "The field to sort results by. The default is CreationTime .",
            "Type": "string",
            "Required": false
        },
        "SortOrder": {
            "Description": "The sort order for results. The default is Descending .",
            "Type": "string",
            "Required": false
        },
        "NextToken": {
            "Description": "If the result of the previous ListTransformJobs request was truncated, the response includes a NextToken . To retrieve the next set of transform jobs, use the token in the next request.",
            "Type": "string",
            "Required": false
        },
        "MaxResults": {
            "Description": "The maximum number of transform jobs to return in the response. The default value is 10 .",
            "Type": "integer",
            "Required": false
        }
    },
    "list_trial_components": {
        "ExperimentName": {
            "Description": "A filter that returns only components that are part of the specified experiment. If you specify ExperimentName , you can't filter by SourceArn or TrialName .",
            "Type": "string",
            "Required": false
        },
        "TrialName": {
            "Description": "A filter that returns only components that are part of the specified trial. If you specify TrialName , you can't filter by ExperimentName or SourceArn .",
            "Type": "string",
            "Required": false
        },
        "SourceArn": {
            "Description": "A filter that returns only components that have the specified source Amazon Resource Name (ARN). If you specify SourceArn , you can't filter by ExperimentName or TrialName .",
            "Type": "string",
            "Required": false
        },
        "CreatedAfter": {
            "Description": "A filter that returns only components created after the specified time.",
            "Type": "datetime",
            "Required": false
        },
        "CreatedBefore": {
            "Description": "A filter that returns only components created before the specified time.",
            "Type": "datetime",
            "Required": false
        },
        "SortBy": {
            "Description": "The property used to sort results. The default value is CreationTime .",
            "Type": "string",
            "Required": false
        },
        "SortOrder": {
            "Description": "The sort order. The default value is Descending .",
            "Type": "string",
            "Required": false
        },
        "MaxResults": {
            "Description": "The maximum number of components to return in the response. The default value is 10.",
            "Type": "integer",
            "Required": false
        },
        "NextToken": {
            "Description": "If the previous call to ListTrialComponents didn't return the full set of components, the call returns a token for getting the next set of components.",
            "Type": "string",
            "Required": false
        }
    },
    "list_trials": {
        "ExperimentName": {
            "Description": "A filter that returns only trials that are part of the specified experiment.",
            "Type": "string",
            "Required": false
        },
        "TrialComponentName": {
            "Description": "A filter that returns only trials that are associated with the specified trial component.",
            "Type": "string",
            "Required": false
        },
        "CreatedAfter": {
            "Description": "A filter that returns only trials created after the specified time.",
            "Type": "datetime",
            "Required": false
        },
        "CreatedBefore": {
            "Description": "A filter that returns only trials created before the specified time.",
            "Type": "datetime",
            "Required": false
        },
        "SortBy": {
            "Description": "The property used to sort results. The default value is CreationTime .",
            "Type": "string",
            "Required": false
        },
        "SortOrder": {
            "Description": "The sort order. The default value is Descending .",
            "Type": "string",
            "Required": false
        },
        "MaxResults": {
            "Description": "The maximum number of trials to return in the response. The default value is 10.",
            "Type": "integer",
            "Required": false
        },
        "NextToken": {
            "Description": "If the previous call to ListTrials didn't return the full set of trials, the call returns a token for getting the next set of trials.",
            "Type": "string",
            "Required": false
        }
    },
    "list_user_profiles": {
        "NextToken": {
            "Description": "If the previous response was truncated, you will receive this token. Use it in your next request to receive the next set of results.",
            "Type": "string",
            "Required": false
        },
        "MaxResults": {
            "Description": "Returns a list up to a specified limit.",
            "Type": "integer",
            "Required": false
        },
        "SortOrder": {
            "Description": "The sort order for the results. The default is Ascending.",
            "Type": "string",
            "Required": false
        },
        "SortBy": {
            "Description": "The parameter by which to sort the results. The default is CreationTime.",
            "Type": "string",
            "Required": false
        },
        "DomainIdEquals": {
            "Description": "A parameter by which to filter the results.",
            "Type": "string",
            "Required": false
        },
        "UserProfileNameContains": {
            "Description": "A parameter by which to filter the results.",
            "Type": "string",
            "Required": false
        }
    },
    "list_workforces": {
        "SortBy": {
            "Description": "Sort workforces using the workforce name or creation date.",
            "Type": "string",
            "Required": false
        },
        "SortOrder": {
            "Description": "Sort workforces in ascending or descending order.",
            "Type": "string",
            "Required": false
        },
        "NameContains": {
            "Description": "A filter you can use to search for workforces using part of the workforce name.",
            "Type": "string",
            "Required": false
        },
        "NextToken": {
            "Description": "A token to resume pagination.",
            "Type": "string",
            "Required": false
        },
        "MaxResults": {
            "Description": "The maximum number of workforces returned in the response.",
            "Type": "integer",
            "Required": false
        }
    },
    "list_workteams": {
        "SortBy": {
            "Description": "The field to sort results by. The default is CreationTime .",
            "Type": "string",
            "Required": false
        },
        "SortOrder": {
            "Description": "The sort order for results. The default is Ascending .",
            "Type": "string",
            "Required": false
        },
        "NameContains": {
            "Description": "A string in the work team's name. This filter returns only work teams whose name contains the specified string.",
            "Type": "string",
            "Required": false
        },
        "NextToken": {
            "Description": "If the result of the previous ListWorkteams request was truncated, the response includes a NextToken . To retrieve the next set of labeling jobs, use the token in the next request.",
            "Type": "string",
            "Required": false
        },
        "MaxResults": {
            "Description": "The maximum number of work teams to return in each page of the response.",
            "Type": "integer",
            "Required": false
        }
    },
    "put_model_package_group_policy": {
        "ModelPackageGroupName": {
            "Description": "The name of the model group to add a resource policy to.",
            "Type": "string",
            "Required": true
        },
        "ResourcePolicy": {
            "Description": "The resource policy for the model group.",
            "Type": "string",
            "Required": true
        }
    },
    "query_lineage": {
        "StartArns": {
            "Description": "A list of resource Amazon Resource Name (ARN) that represent the starting point for your lineage query.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "Direction": {
            "Description": "Associations between lineage entities have a direction. This parameter determines the direction from the StartArn(s) that the query traverses.",
            "Type": "string",
            "Required": false
        },
        "IncludeEdges": {
            "Description": "Setting this value to True retrieves not only the entities of interest but also the Associations and lineage entities on the path. Set to False to only return lineage entities that match your query.",
            "Type": "boolean",
            "Required": false
        },
        "Filters": {
            "Description": "A set of filtering parameters that allow you to specify which entities should be returned.",
            "Type": "dict",
            "Required": false,
            "dict variables": [
                {},
                {}
            ]
        },
        "MaxDepth": {
            "Description": "The maximum depth in lineage relationships from the StartArns that are traversed. Depth is a measure of the number of Associations from the StartArn entity to the matched results.",
            "Type": "integer",
            "Required": false
        },
        "MaxResults": {
            "Description": "Limits the number of vertices in the results. Use the NextToken in a response to to retrieve the next page of results.",
            "Type": "integer",
            "Required": false
        },
        "NextToken": {
            "Description": "Limits the number of vertices in the request. Use the NextToken in a response to to retrieve the next page of results.",
            "Type": "string",
            "Required": false
        }
    },
    "register_devices": {
        "DeviceFleetName": {
            "Description": "The name of the fleet.",
            "Type": "string",
            "Required": true
        },
        "Devices": {
            "Description": "A list of devices to register with SageMaker Edge Manager.",
            "Type": "list",
            "Required": true,
            "list variables": {}
        },
        "Tags": {
            "Description": "The tags associated with devices.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        }
    },
    "render_ui_template": {
        "UiTemplate": {
            "Description": "A Template object containing the worker UI template to render.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "Task": {
            "Description": "A RenderableTask object containing a representative task to render.",
            "Type": "dict",
            "Required": true,
            "dict variables": {}
        },
        "RoleArn": {
            "Description": "The Amazon Resource Name (ARN) that has access to the S3 objects that are used by the template.",
            "Type": "string",
            "Required": true
        },
        "HumanTaskUiArn": {
            "Description": "The HumanTaskUiArn of the worker UI that you want to render. Do not provide a HumanTaskUiArn if you use the UiTemplate parameter.\nSee a list of available Human Ui Amazon Resource Names (ARNs) in  UiConfig .",
            "Type": "string",
            "Required": false
        }
    },
    "retry_pipeline_execution": {
        "PipelineExecutionArn": {
            "Description": "The Amazon Resource Name (ARN) of the pipeline execution.",
            "Type": "string",
            "Required": true
        },
        "ClientRequestToken": {
            "Description": "A unique, case-sensitive identifier that you provide to ensure the idempotency of the operation. An idempotent operation completes no more than once.\nThis field is autopopulated if not provided.",
            "Type": "string",
            "Required": true
        },
        "ParallelismConfiguration": {
            "Description": "This configuration, if specified, overrides the parallelism configuration of the parent pipeline.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        }
    },
    "search": {
        "Resource": {
            "Description": "The name of the Amazon SageMaker resource to search for.",
            "Type": "string",
            "Required": true
        },
        "SearchExpression": {
            "Description": "A Boolean conditional statement. Resources must satisfy this condition to be included in search results. You must provide at least one subexpression, filter, or nested filter. The maximum number of recursive SubExpressions, NestedFilters, and Filters that can be included in a SearchExpression object is 50.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "SortBy": {
            "Description": "The name of the resource property used to sort the SearchResults . The default is LastModifiedTime .",
            "Type": "string",
            "Required": false
        },
        "SortOrder": {
            "Description": "How SearchResults are ordered. Valid values are Ascending or Descending . The default is Descending .",
            "Type": "string",
            "Required": false
        },
        "NextToken": {
            "Description": "If more than MaxResults resources match the specified SearchExpression , the response includes a NextToken . The NextToken can be passed to the next SearchRequest to continue retrieving results.",
            "Type": "string",
            "Required": false
        },
        "MaxResults": {
            "Description": "The maximum number of results to return.",
            "Type": "integer",
            "Required": false
        }
    },
    "send_pipeline_execution_step_failure": {
        "CallbackToken": {
            "Description": "The pipeline generated token from the Amazon SQS queue.",
            "Type": "string",
            "Required": true
        },
        "FailureReason": {
            "Description": "A message describing why the step failed.",
            "Type": "string",
            "Required": false
        },
        "ClientRequestToken": {
            "Description": "A unique, case-sensitive identifier that you provide to ensure the idempotency of the operation. An idempotent operation completes no more than one time.\nThis field is autopopulated if not provided.",
            "Type": "string",
            "Required": false
        }
    },
    "send_pipeline_execution_step_success": {
        "CallbackToken": {
            "Description": "The pipeline generated token from the Amazon SQS queue.",
            "Type": "string",
            "Required": true
        },
        "OutputParameters": {
            "Description": "A list of the output parameters of the callback step.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "ClientRequestToken": {
            "Description": "A unique, case-sensitive identifier that you provide to ensure the idempotency of the operation. An idempotent operation completes no more than one time.\nThis field is autopopulated if not provided.",
            "Type": "string",
            "Required": false
        }
    },
    "start_edge_deployment_stage": {
        "EdgeDeploymentPlanName": {
            "Description": "The name of the edge deployment plan to start.",
            "Type": "string",
            "Required": true
        },
        "StageName": {
            "Description": "The name of the stage to start.",
            "Type": "string",
            "Required": true
        }
    },
    "start_monitoring_schedule": {
        "MonitoringScheduleName": {
            "Description": "The name of the schedule to start.",
            "Type": "string",
            "Required": true
        }
    },
    "start_notebook_instance": {
        "NotebookInstanceName": {
            "Description": "The name of the notebook instance to start.",
            "Type": "string",
            "Required": true
        }
    },
    "start_pipeline_execution": {
        "PipelineName": {
            "Description": "The name of the pipeline.",
            "Type": "string",
            "Required": true
        },
        "PipelineExecutionDisplayName": {
            "Description": "The display name of the pipeline execution.",
            "Type": "string",
            "Required": false
        },
        "PipelineParameters": {
            "Description": "Contains a list of pipeline parameters. This list can be empty.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "PipelineExecutionDescription": {
            "Description": "The description of the pipeline execution.",
            "Type": "string",
            "Required": false
        },
        "ClientRequestToken": {
            "Description": "A unique, case-sensitive identifier that you provide to ensure the idempotency of the operation. An idempotent operation completes no more than once.\nThis field is autopopulated if not provided.",
            "Type": "string",
            "Required": true
        },
        "ParallelismConfiguration": {
            "Description": "This configuration, if specified, overrides the parallelism configuration of the parent pipeline for this specific run.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        }
    },
    "stop_auto_ml_job": {
        "AutoMLJobName": {
            "Description": "The name of the object you are requesting.",
            "Type": "string",
            "Required": true
        }
    },
    "stop_compilation_job": {
        "CompilationJobName": {
            "Description": "The name of the model compilation job to stop.",
            "Type": "string",
            "Required": true
        }
    },
    "stop_edge_deployment_stage": {
        "EdgeDeploymentPlanName": {
            "Description": "The name of the edge deployment plan to stop.",
            "Type": "string",
            "Required": true
        },
        "StageName": {
            "Description": "The name of the stage to stop.",
            "Type": "string",
            "Required": true
        }
    },
    "stop_edge_packaging_job": {
        "EdgePackagingJobName": {
            "Description": "The name of the edge packaging job.",
            "Type": "string",
            "Required": true
        }
    },
    "stop_hyper_parameter_tuning_job": {
        "HyperParameterTuningJobName": {
            "Description": "The name of the tuning job to stop.",
            "Type": "string",
            "Required": true
        }
    },
    "stop_inference_recommendations_job": {
        "JobName": {
            "Description": "The name of the job you want to stop.",
            "Type": "string",
            "Required": true
        }
    },
    "stop_labeling_job": {
        "LabelingJobName": {
            "Description": "The name of the labeling job to stop.",
            "Type": "string",
            "Required": true
        }
    },
    "stop_monitoring_schedule": {
        "MonitoringScheduleName": {
            "Description": "The name of the schedule to stop.",
            "Type": "string",
            "Required": true
        }
    },
    "stop_notebook_instance": {
        "NotebookInstanceName": {
            "Description": "The name of the notebook instance to terminate.",
            "Type": "string",
            "Required": true
        }
    },
    "stop_pipeline_execution": {
        "PipelineExecutionArn": {
            "Description": "The Amazon Resource Name (ARN) of the pipeline execution.",
            "Type": "string",
            "Required": true
        },
        "ClientRequestToken": {
            "Description": "A unique, case-sensitive identifier that you provide to ensure the idempotency of the operation. An idempotent operation completes no more than once.\nThis field is autopopulated if not provided.",
            "Type": "string",
            "Required": true
        }
    },
    "stop_processing_job": {
        "ProcessingJobName": {
            "Description": "The name of the processing job to stop.",
            "Type": "string",
            "Required": true
        }
    },
    "stop_training_job": {
        "TrainingJobName": {
            "Description": "The name of the training job to stop.",
            "Type": "string",
            "Required": true
        }
    },
    "stop_transform_job": {
        "TransformJobName": {
            "Description": "The name of the batch transform job to stop.",
            "Type": "string",
            "Required": true
        }
    },
    "update_action": {
        "ActionName": {
            "Description": "The name of the action to update.",
            "Type": "string",
            "Required": true
        },
        "Description": {
            "Description": "The new description for the action.",
            "Type": "string",
            "Required": false
        },
        "Status": {
            "Description": "The new status for the action.",
            "Type": "string",
            "Required": false
        },
        "Properties": {
            "Description": "The new list of properties. Overwrites the current property list.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "PropertiesToRemove": {
            "Description": "A list of properties to remove.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        }
    },
    "update_app_image_config": {
        "AppImageConfigName": {
            "Description": "The name of the AppImageConfig to update.",
            "Type": "string",
            "Required": true
        },
        "KernelGatewayImageConfig": {
            "Description": "The new KernelGateway app to run on the image.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        }
    },
    "update_artifact": {
        "ArtifactArn": {
            "Description": "The Amazon Resource Name (ARN) of the artifact to update.",
            "Type": "string",
            "Required": true
        },
        "ArtifactName": {
            "Description": "The new name for the artifact.",
            "Type": "string",
            "Required": false
        },
        "Properties": {
            "Description": "The new list of properties. Overwrites the current property list.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "PropertiesToRemove": {
            "Description": "A list of properties to remove.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        }
    },
    "update_code_repository": {
        "CodeRepositoryName": {
            "Description": "The name of the Git repository to update.",
            "Type": "string",
            "Required": true
        },
        "GitConfig": {
            "Description": "The configuration of the git repository, including the URL and the Amazon Resource Name (ARN) of the Amazon Web Services Secrets Manager secret that contains the credentials used to access the repository. The secret must have a staging label of AWSCURRENT and must be in the following format:",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        }
    },
    "update_context": {
        "ContextName": {
            "Description": "The name of the context to update.",
            "Type": "string",
            "Required": true
        },
        "Description": {
            "Description": "The new description for the context.",
            "Type": "string",
            "Required": false
        },
        "Properties": {
            "Description": "The new list of properties. Overwrites the current property list.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "PropertiesToRemove": {
            "Description": "A list of properties to remove.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        }
    },
    "update_device_fleet": {
        "DeviceFleetName": {
            "Description": "The name of the fleet.",
            "Type": "string",
            "Required": true
        },
        "RoleArn": {
            "Description": "The Amazon Resource Name (ARN) of the device.",
            "Type": "string",
            "Required": false
        },
        "Description": {
            "Description": "Description of the fleet.",
            "Type": "string",
            "Required": false
        },
        "OutputConfig": {
            "Description": "Output configuration for storing sample data collected by the fleet.",
            "Type": "dict",
            "Required": true,
            "dict variables": {}
        },
        "EnableIotRoleAlias": {
            "Description": "Whether to create an Amazon Web Services IoT Role Alias during device fleet creation. The name of the role alias generated will match this pattern: \"SageMakerEdge-{DeviceFleetName}\".\nFor example, if your device fleet is called \"demo-fleet\", the name of the role alias will be \"SageMakerEdge-demo-fleet\".",
            "Type": "boolean",
            "Required": false
        }
    },
    "update_devices": {
        "DeviceFleetName": {
            "Description": "The name of the fleet the devices belong to.",
            "Type": "string",
            "Required": true
        },
        "Devices": {
            "Description": "List of devices to register with Edge Manager agent.",
            "Type": "list",
            "Required": true,
            "list variables": {}
        }
    },
    "update_domain": {
        "DomainId": {
            "Description": "The ID of the domain to be updated.",
            "Type": "string",
            "Required": true
        },
        "DefaultUserSettings": {
            "Description": "A collection of settings.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "DomainSettingsForUpdate": {
            "Description": "A collection of DomainSettings configuration values to update.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        }
    },
    "update_endpoint": {
        "EndpointName": {
            "Description": "The name of the endpoint whose configuration you want to update.",
            "Type": "string",
            "Required": true
        },
        "EndpointConfigName": {
            "Description": "The name of the new endpoint configuration.",
            "Type": "string",
            "Required": true
        },
        "RetainAllVariantProperties": {
            "Description": "When updating endpoint resources, enables or disables the retention of variant properties , such as the instance count or the variant weight. To retain the variant properties of an endpoint when updating it, set RetainAllVariantProperties to true . To use the variant properties specified in a new EndpointConfig call when updating an endpoint, set RetainAllVariantProperties to false . The default is false .",
            "Type": "boolean",
            "Required": false
        },
        "ExcludeRetainedVariantProperties": {
            "Description": "When you are updating endpoint resources with  UpdateEndpointInput$RetainAllVariantProperties, whose value is set to true, ExcludeRetainedVariantProperties specifies the list of type  VariantProperty to override with the values provided by EndpointConfig. If you don't specify a value for ExcludeAllVariantProperties, no variant properties are overridden.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "DeploymentConfig": {
            "Description": "The deployment configuration for an endpoint, which contains the desired deployment strategy and rollback configurations.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "RetainDeploymentConfig": {
            "Description": "Specifies whether to reuse the last deployment configuration. The default value is false (the configuration is not reused).",
            "Type": "boolean",
            "Required": false
        }
    },
    "update_endpoint_weights_and_capacities": {
        "EndpointName": {
            "Description": "The name of an existing SageMaker endpoint.",
            "Type": "string",
            "Required": true
        },
        "DesiredWeightsAndCapacities": {
            "Description": "An object that provides new capacity and weight values for a variant.",
            "Type": "list",
            "Required": true,
            "list variables": {}
        }
    },
    "update_experiment": {
        "ExperimentName": {
            "Description": "The name of the experiment to update.",
            "Type": "string",
            "Required": true
        },
        "DisplayName": {
            "Description": "The name of the experiment as displayed. The name doesn't need to be unique. If DisplayName isn't specified, ExperimentName is displayed.",
            "Type": "string",
            "Required": false
        },
        "Description": {
            "Description": "The description of the experiment.",
            "Type": "string",
            "Required": false
        }
    },
    "update_feature_group": {
        "FeatureGroupName": {
            "Description": "The name of the feature group that you're updating.",
            "Type": "string",
            "Required": true
        },
        "FeatureAdditions": {
            "Description": "Updates the feature group. Updating a feature group is an asynchronous operation. When you get an HTTP 200 response, you've made a valid request. It takes some time after you've made a valid request for Feature Store to update the feature group.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        }
    },
    "update_feature_metadata": {
        "FeatureGroupName": {
            "Description": "The name of the feature group containing the feature that you're updating.",
            "Type": "string",
            "Required": true
        },
        "FeatureName": {
            "Description": "The name of the feature that you're updating.",
            "Type": "string",
            "Required": true
        },
        "Description": {
            "Description": "A description that you can write to better describe the feature.",
            "Type": "string",
            "Required": false
        },
        "ParameterAdditions": {
            "Description": "A list of key-value pairs that you can add to better describe the feature.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "ParameterRemovals": {
            "Description": "A list of parameter keys that you can specify to remove parameters that describe your feature.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        }
    },
    "update_image": {
        "DeleteProperties": {
            "Description": "A list of properties to delete. Only the Description and DisplayName properties can be deleted.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "Description": {
            "Description": "The new description for the image.",
            "Type": "string",
            "Required": false
        },
        "DisplayName": {
            "Description": "The new display name for the image.",
            "Type": "string",
            "Required": false
        },
        "ImageName": {
            "Description": "The name of the image to update.",
            "Type": "string",
            "Required": true
        },
        "RoleArn": {
            "Description": "The new Amazon Resource Name (ARN) for the IAM role that enables Amazon SageMaker to perform tasks on your behalf.",
            "Type": "string",
            "Required": false
        }
    },
    "update_model_package": {
        "ModelPackageArn": {
            "Description": "The Amazon Resource Name (ARN) of the model package.",
            "Type": "string",
            "Required": true
        },
        "ModelApprovalStatus": {
            "Description": "The approval status of the model.",
            "Type": "string",
            "Required": false
        },
        "ApprovalDescription": {
            "Description": "A description for the approval status of the model.",
            "Type": "string",
            "Required": false
        },
        "CustomerMetadataProperties": {
            "Description": "The metadata properties associated with the model package versions.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "CustomerMetadataPropertiesToRemove": {
            "Description": "The metadata properties associated with the model package versions to remove.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "AdditionalInferenceSpecificationsToAdd": {
            "Description": "An array of additional Inference Specification objects to be added to the existing array additional Inference Specification. Total number of additional Inference Specifications can not exceed 15. Each additional Inference Specification specifies artifacts based on this model package that can be used on inference endpoints. Generally used with SageMaker Neo to store the compiled artifacts.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        }
    },
    "update_monitoring_schedule": {
        "MonitoringScheduleName": {
            "Description": "The name of the monitoring schedule. The name must be unique within an Amazon Web Services Region within an Amazon Web Services account.",
            "Type": "string",
            "Required": true
        },
        "MonitoringScheduleConfig": {
            "Description": "The configuration object that specifies the monitoring schedule and defines the monitoring job.",
            "Type": "dict",
            "Required": true,
            "dict variables": {}
        }
    },
    "update_notebook_instance": {
        "NotebookInstanceName": {
            "Description": "The name of the notebook instance to update.",
            "Type": "string",
            "Required": true
        },
        "InstanceType": {
            "Description": "The Amazon ML compute instance type.",
            "Type": "string",
            "Required": false
        },
        "RoleArn": {
            "Description": "The Amazon Resource Name (ARN) of the IAM role that SageMaker can assume to access the notebook instance. For more information, see SageMaker Roles .",
            "Type": "string",
            "Required": false
        },
        "LifecycleConfigName": {
            "Description": "The name of a lifecycle configuration to associate with the notebook instance. For information about lifestyle configurations, see Step 2.1: (Optional) Customize a Notebook Instance .",
            "Type": "string",
            "Required": false
        },
        "DisassociateLifecycleConfig": {
            "Description": "Set to true to remove the notebook instance lifecycle configuration currently associated with the notebook instance. This operation is idempotent. If you specify a lifecycle configuration that is not associated with the notebook instance when you call this method, it does not throw an error.",
            "Type": "boolean",
            "Required": false
        },
        "VolumeSizeInGB": {
            "Description": "The size, in GB, of the ML storage volume to attach to the notebook instance. The default value is 5 GB. ML storage volumes are encrypted, so SageMaker can't determine the amount of available free space on the volume. Because of this, you can increase the volume size when you update a notebook instance, but you can't decrease the volume size. If you want to decrease the size of the ML storage volume in use, create a new notebook instance with the desired size.",
            "Type": "integer",
            "Required": false
        },
        "DefaultCodeRepository": {
            "Description": "The Git repository to associate with the notebook instance as its default code repository. This can be either the name of a Git repository stored as a resource in your account, or the URL of a Git repository in Amazon Web Services CodeCommit or in any other Git repository. When you open a notebook instance, it opens in the directory that contains this repository. For more information, see Associating Git Repositories with SageMaker Notebook Instances .",
            "Type": "string",
            "Required": false
        },
        "AdditionalCodeRepositories": {
            "Description": "An array of up to three Git repositories to associate with the notebook instance. These can be either the names of Git repositories stored as resources in your account, or the URL of Git repositories in Amazon Web Services CodeCommit or in any other Git repository. These repositories are cloned at the same level as the default repository of your notebook instance. For more information, see Associating Git Repositories with SageMaker Notebook Instances .",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "AcceleratorTypes": {
            "Description": "A list of the Elastic Inference (EI) instance types to associate with this notebook instance. Currently only one EI instance type can be associated with a notebook instance. For more information, see Using Elastic Inference in Amazon SageMaker .",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "DisassociateAcceleratorTypes": {
            "Description": "A list of the Elastic Inference (EI) instance types to remove from this notebook instance. This operation is idempotent. If you specify an accelerator type that is not associated with the notebook instance when you call this method, it does not throw an error.",
            "Type": "boolean",
            "Required": false
        },
        "DisassociateDefaultCodeRepository": {
            "Description": "The name or URL of the default Git repository to remove from this notebook instance. This operation is idempotent. If you specify a Git repository that is not associated with the notebook instance when you call this method, it does not throw an error.",
            "Type": "boolean",
            "Required": false
        },
        "DisassociateAdditionalCodeRepositories": {
            "Description": "A list of names or URLs of the default Git repositories to remove from this notebook instance. This operation is idempotent. If you specify a Git repository that is not associated with the notebook instance when you call this method, it does not throw an error.",
            "Type": "boolean",
            "Required": false
        },
        "RootAccess": {
            "Description": "Whether root access is enabled or disabled for users of the notebook instance. The default value is Enabled .",
            "Type": "string",
            "Required": false
        },
        "InstanceMetadataServiceConfiguration": {
            "Description": "Information on the IMDS configuration of the notebook instance",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        }
    },
    "update_notebook_instance_lifecycle_config": {
        "NotebookInstanceLifecycleConfigName": {
            "Description": "The name of the lifecycle configuration.",
            "Type": "string",
            "Required": true
        },
        "OnCreate": {
            "Description": "The shell script that runs only once, when you create a notebook instance. The shell script must be a base64-encoded string.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "OnStart": {
            "Description": "The shell script that runs every time you start a notebook instance, including when you create the notebook instance. The shell script must be a base64-encoded string.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        }
    },
    "update_pipeline": {
        "PipelineName": {
            "Description": "The name of the pipeline to update.",
            "Type": "string",
            "Required": true
        },
        "PipelineDisplayName": {
            "Description": "The display name of the pipeline.",
            "Type": "string",
            "Required": false
        },
        "PipelineDefinition": {
            "Description": "The JSON pipeline definition.",
            "Type": "string",
            "Required": false
        },
        "PipelineDefinitionS3Location": {
            "Description": "The location of the pipeline definition stored in Amazon S3. If specified, SageMaker will retrieve the pipeline definition from this location.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "PipelineDescription": {
            "Description": "The description of the pipeline.",
            "Type": "string",
            "Required": false
        },
        "RoleArn": {
            "Description": "The Amazon Resource Name (ARN) that the pipeline uses to execute.",
            "Type": "string",
            "Required": false
        },
        "ParallelismConfiguration": {
            "Description": "If specified, it applies to all executions of this pipeline by default.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        }
    },
    "update_pipeline_execution": {
        "PipelineExecutionArn": {
            "Description": "The Amazon Resource Name (ARN) of the pipeline execution.",
            "Type": "string",
            "Required": true
        },
        "PipelineExecutionDescription": {
            "Description": "The description of the pipeline execution.",
            "Type": "string",
            "Required": false
        },
        "PipelineExecutionDisplayName": {
            "Description": "The display name of the pipeline execution.",
            "Type": "string",
            "Required": false
        },
        "ParallelismConfiguration": {
            "Description": "This configuration, if specified, overrides the parallelism configuration of the parent pipeline for this specific run.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        }
    },
    "update_project": {
        "ProjectName": {
            "Description": "The name of the project.",
            "Type": "string",
            "Required": true
        },
        "ProjectDescription": {
            "Description": "The description for the project.",
            "Type": "string",
            "Required": false
        },
        "ServiceCatalogProvisioningUpdateDetails": {
            "Description": "The product ID and provisioning artifact ID to provision a service catalog. The provisioning artifact ID will default to the latest provisioning artifact ID of the product, if you don't provide the provisioning artifact ID. For more information, see What is Amazon Web Services Service Catalog .",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "Tags": {
            "Description": "An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in different ways, for example, by purpose, owner, or environment. For more information, see Tagging Amazon Web Services Resources. In addition, the project must have tag update constraints set in order to include this parameter in the request. For more information, see Amazon Web Services Service Catalog Tag Update Constraints .",
            "Type": "list",
            "Required": false,
            "list variables": {}
        }
    },
    "update_training_job": {
        "TrainingJobName": {
            "Description": "The name of a training job to update the Debugger profiling configuration.",
            "Type": "string",
            "Required": true
        },
        "ProfilerConfig": {
            "Description": "Configuration information for Debugger system monitoring, framework profiling, and storage paths.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "ProfilerRuleConfigurations": {
            "Description": "Configuration information for Debugger rules for profiling system and framework metrics.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        }
    },
    "update_trial": {
        "TrialName": {
            "Description": "The name of the trial to update.",
            "Type": "string",
            "Required": true
        },
        "DisplayName": {
            "Description": "The name of the trial as displayed. The name doesn't need to be unique. If DisplayName isn't specified, TrialName is displayed.",
            "Type": "string",
            "Required": false
        }
    },
    "update_trial_component": {
        "TrialComponentName": {
            "Description": "The name of the component to update.",
            "Type": "string",
            "Required": true
        },
        "DisplayName": {
            "Description": "The name of the component as displayed. The name doesn't need to be unique. If DisplayName isn't specified, TrialComponentName is displayed.",
            "Type": "string",
            "Required": false
        },
        "Status": {
            "Description": "The new status of the component.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "StartTime": {
            "Description": "When the component started.",
            "Type": "datetime",
            "Required": false
        },
        "EndTime": {
            "Description": "When the component ended.",
            "Type": "datetime",
            "Required": false
        },
        "Parameters": {
            "Description": "Replaces all of the component's hyperparameters with the specified hyperparameters.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "ParametersToRemove": {
            "Description": "The hyperparameters to remove from the component.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "InputArtifacts": {
            "Description": "Replaces all of the component's input artifacts with the specified artifacts.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "InputArtifactsToRemove": {
            "Description": "The input artifacts to remove from the component.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "OutputArtifacts": {
            "Description": "Replaces all of the component's output artifacts with the specified artifacts.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "OutputArtifactsToRemove": {
            "Description": "The output artifacts to remove from the component.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        }
    },
    "update_user_profile": {
        "DomainId": {
            "Description": "The domain ID.",
            "Type": "string",
            "Required": true
        },
        "UserProfileName": {
            "Description": "The user profile name.",
            "Type": "string",
            "Required": true
        },
        "UserSettings": {
            "Description": "A collection of settings.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        }
    },
    "update_workforce": {
        "WorkforceName": {
            "Description": "The name of the private workforce that you want to update. You can find your workforce name by using the operation.",
            "Type": "string",
            "Required": true
        },
        "SourceIpConfig": {
            "Description": "A list of one to ten worker IP address ranges (CIDRs ) that can be used to access tasks assigned to this workforce.\nMaximum: Ten CIDR values",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "OidcConfig": {
            "Description": "Use this parameter to update your OIDC Identity Provider (IdP) configuration for a workforce made using your own IdP.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "WorkforceVpcConfig": {
            "Description": "Use this parameter to update your VPC configuration for a workforce.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        }
    },
    "update_workteam": {
        "WorkteamName": {
            "Description": "The name of the work team to update.",
            "Type": "string",
            "Required": true
        },
        "MemberDefinitions": {
            "Description": "A list of MemberDefinition objects that contains objects that identify the workers that make up the work team.\nWorkforces can be created using Amazon Cognito or your own OIDC Identity Provider (IdP). For private workforces created using Amazon Cognito use CognitoMemberDefinition. For workforces created using your own OIDC identity provider (IdP) use OidcMemberDefinition. You should not provide input for both of these parameters in a single request.\nFor workforces created using Amazon Cognito, private work teams correspond to Amazon Cognito user groups within the user pool used to create a workforce. All of the CognitoMemberDefinition objects that make up the member definition must have the same ClientId and UserPool values. To add a Amazon Cognito user group to an existing worker pool, see Adding groups to a User Pool. For more information about user pools, see `Amazon Cognito User Pools .\nFor workforces created using your own OIDC IdP, specify the user groups that you want to include in your private work team in OidcMemberDefinition by listing those groups in Groups. Be aware that user groups that are already in the work team must also be listed in Groups when you make this request to remain on the work team. If you do not include these user groups, they will no longer be associated with the work team you update.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "Description": {
            "Description": "An updated description for the work team.",
            "Type": "string",
            "Required": false
        },
        "NotificationConfiguration": {
            "Description": "Configures SNS topic notifications for available or expiring work items",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        }
    },
    "paginate": {
        "Resource": {
            "Description": "The name of the Amazon SageMaker resource to search for.",
            "Type": "string",
            "Required": true
        },
        "SearchExpression": {
            "Description": "A Boolean conditional statement. Resources must satisfy this condition to be included in search results. You must provide at least one subexpression, filter, or nested filter. The maximum number of recursive SubExpressions, NestedFilters, and Filters that can be included in a SearchExpression object is 50.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "SortBy": {
            "Description": "The name of the resource property used to sort the SearchResults . The default is LastModifiedTime .",
            "Type": "string",
            "Required": false
        },
        "SortOrder": {
            "Description": "How SearchResults are ordered. Valid values are Ascending or Descending . The default is Descending .",
            "Type": "string",
            "Required": false
        },
        "PaginationConfig": {
            "Description": "A dictionary that provides parameters to control pagination.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        }
    },
    "wait": {
        "TransformJobName": {
            "Description": "The name of the transform job that you want to view details of.",
            "Type": "string",
            "Required": true
        },
        "WaiterConfig": {
            "Description": "A dictionary that provides parameters to control waiting behavior.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        }
    }
}