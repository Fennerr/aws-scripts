{
    "batch_create_partition": {
        "CatalogId": {
            "Description": "The ID of the catalog in which the partition is to be created. Currently, this should be the Amazon Web Services account ID.",
            "Type": "string",
            "Required": false
        },
        "DatabaseName": {
            "Description": "The name of the metadata database in which the partition is to be created.",
            "Type": "string",
            "Required": true
        },
        "TableName": {
            "Description": "The name of the metadata table in which the partition is to be created.",
            "Type": "string",
            "Required": true
        },
        "PartitionInputList": {
            "Description": "A list of PartitionInput structures that define the partitions to be created.",
            "Type": "list",
            "Required": true,
            "list variables": {}
        }
    },
    "batch_delete_connection": {
        "CatalogId": {
            "Description": "The ID of the Data Catalog in which the connections reside. If none is provided, the Amazon Web Services account ID is used by default.",
            "Type": "string",
            "Required": false
        },
        "ConnectionNameList": {
            "Description": "A list of names of the connections to delete.",
            "Type": "list",
            "Required": true,
            "list variables": {}
        }
    },
    "batch_delete_partition": {
        "CatalogId": {
            "Description": "The ID of the Data Catalog where the partition to be deleted resides. If none is provided, the Amazon Web Services account ID is used by default.",
            "Type": "string",
            "Required": false
        },
        "DatabaseName": {
            "Description": "The name of the catalog database in which the table in question resides.",
            "Type": "string",
            "Required": true
        },
        "TableName": {
            "Description": "The name of the table that contains the partitions to be deleted.",
            "Type": "string",
            "Required": true
        },
        "PartitionsToDelete": {
            "Description": "A list of PartitionInput structures that define the partitions to be deleted.",
            "Type": "list",
            "Required": true,
            "list variables": {}
        }
    },
    "batch_delete_table": {
        "CatalogId": {
            "Description": "The ID of the Data Catalog where the table resides. If none is provided, the Amazon Web Services account ID is used by default.",
            "Type": "string",
            "Required": false
        },
        "DatabaseName": {
            "Description": "The name of the catalog database in which the tables to delete reside. For Hive compatibility, this name is entirely lowercase.",
            "Type": "string",
            "Required": true
        },
        "TablesToDelete": {
            "Description": "A list of the table to delete.",
            "Type": "list",
            "Required": true,
            "list variables": {}
        },
        "TransactionId": {
            "Description": "The transaction ID at which to delete the table contents.",
            "Type": "string",
            "Required": false
        }
    },
    "batch_delete_table_version": {
        "CatalogId": {
            "Description": "The ID of the Data Catalog where the tables reside. If none is provided, the Amazon Web Services account ID is used by default.",
            "Type": "string",
            "Required": false
        },
        "DatabaseName": {
            "Description": "The database in the catalog in which the table resides. For Hive compatibility, this name is entirely lowercase.",
            "Type": "string",
            "Required": true
        },
        "TableName": {
            "Description": "The name of the table. For Hive compatibility, this name is entirely lowercase.",
            "Type": "string",
            "Required": true
        },
        "VersionIds": {
            "Description": "A list of the IDs of versions to be deleted. A VersionId is a string representation of an integer. Each version is incremented by 1.",
            "Type": "list",
            "Required": true,
            "list variables": {}
        }
    },
    "batch_get_blueprints": {
        "Names": {
            "Description": "A list of blueprint names.",
            "Type": "list",
            "Required": true,
            "list variables": {}
        },
        "IncludeBlueprint": {
            "Description": "Specifies whether or not to include the blueprint in the response.",
            "Type": "boolean",
            "Required": false
        },
        "IncludeParameterSpec": {
            "Description": "Specifies whether or not to include the parameters, as a JSON string, for the blueprint in the response.",
            "Type": "boolean",
            "Required": false
        }
    },
    "batch_get_crawlers": {
        "CrawlerNames": {
            "Description": "A list of crawler names, which might be the names returned from the ListCrawlers operation.",
            "Type": "list",
            "Required": true,
            "list variables": {}
        }
    },
    "batch_get_custom_entity_types": {
        "Names": {
            "Description": "A list of names of the custom patterns that you want to retrieve.",
            "Type": "list",
            "Required": true,
            "list variables": {}
        }
    },
    "batch_get_dev_endpoints": {
        "DevEndpointNames": {
            "Description": "The list of DevEndpoint names, which might be the names returned from the ListDevEndpoint operation.",
            "Type": "list",
            "Required": true,
            "list variables": {}
        }
    },
    "batch_get_jobs": {
        "JobNames": {
            "Description": "A list of job names, which might be the names returned from the ListJobs operation.",
            "Type": "list",
            "Required": true,
            "list variables": {}
        }
    },
    "batch_get_partition": {
        "CatalogId": {
            "Description": "The ID of the Data Catalog where the partitions in question reside. If none is supplied, the Amazon Web Services account ID is used by default.",
            "Type": "string",
            "Required": false
        },
        "DatabaseName": {
            "Description": "The name of the catalog database where the partitions reside.",
            "Type": "string",
            "Required": true
        },
        "TableName": {
            "Description": "The name of the partitions' table.",
            "Type": "string",
            "Required": true
        },
        "PartitionsToGet": {
            "Description": "A list of partition values identifying the partitions to retrieve.",
            "Type": "list",
            "Required": true,
            "list variables": {}
        }
    },
    "batch_get_triggers": {
        "TriggerNames": {
            "Description": "A list of trigger names, which may be the names returned from the ListTriggers operation.",
            "Type": "list",
            "Required": true,
            "list variables": {}
        }
    },
    "batch_get_workflows": {
        "Names": {
            "Description": "A list of workflow names, which may be the names returned from the ListWorkflows operation.",
            "Type": "list",
            "Required": true,
            "list variables": {}
        },
        "IncludeGraph": {
            "Description": "Specifies whether to include a graph when returning the workflow resource metadata.",
            "Type": "boolean",
            "Required": false
        }
    },
    "batch_stop_job_run": {
        "JobName": {
            "Description": "The name of the job definition for which to stop job runs.",
            "Type": "string",
            "Required": true
        },
        "JobRunIds": {
            "Description": "A list of the JobRunIds that should be stopped for that job definition.",
            "Type": "list",
            "Required": true,
            "list variables": {}
        }
    },
    "batch_update_partition": {
        "CatalogId": {
            "Description": "The ID of the catalog in which the partition is to be updated. Currently, this should be the Amazon Web Services account ID.",
            "Type": "string",
            "Required": false
        },
        "DatabaseName": {
            "Description": "The name of the metadata database in which the partition is to be updated.",
            "Type": "string",
            "Required": true
        },
        "TableName": {
            "Description": "The name of the metadata table in which the partition is to be updated.",
            "Type": "string",
            "Required": true
        },
        "Entries": {
            "Description": "A list of up to 100 BatchUpdatePartitionRequestEntry objects to update.",
            "Type": "list",
            "Required": true,
            "list variables": {}
        }
    },
    "cancel_ml_task_run": {
        "TransformId": {
            "Description": "The unique identifier of the machine learning transform.",
            "Type": "string",
            "Required": true
        },
        "TaskRunId": {
            "Description": "A unique identifier for the task run.",
            "Type": "string",
            "Required": true
        }
    },
    "cancel_statement": {
        "SessionId": {
            "Description": "The Session ID of the statement to be cancelled.",
            "Type": "string",
            "Required": true
        },
        "Id": {
            "Description": "The ID of the statement to be cancelled.",
            "Type": "integer",
            "Required": true
        },
        "RequestOrigin": {
            "Description": "The origin of the request to cancel the statement.",
            "Type": "string",
            "Required": false
        }
    },
    "check_schema_version_validity": {
        "DataFormat": {
            "Description": "The data format of the schema definition. Currently AVRO, JSON and PROTOBUF are supported.",
            "Type": "string",
            "Required": true
        },
        "SchemaDefinition": {
            "Description": "The definition of the schema that has to be validated.",
            "Type": "string",
            "Required": true
        }
    },
    "create_blueprint": {
        "Name": {
            "Description": "The name of the blueprint.",
            "Type": "string",
            "Required": true
        },
        "Description": {
            "Description": "A description of the blueprint.",
            "Type": "string",
            "Required": false
        },
        "BlueprintLocation": {
            "Description": "Specifies a path in Amazon S3 where the blueprint is published.",
            "Type": "string",
            "Required": true
        },
        "Tags": {
            "Description": "The tags to be applied to this blueprint.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        }
    },
    "create_classifier": {
        "GrokClassifier": {
            "Description": "A GrokClassifier object specifying the classifier to create.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "XMLClassifier": {
            "Description": "An XMLClassifier object specifying the classifier to create.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "JsonClassifier": {
            "Description": "A JsonClassifier object specifying the classifier to create.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "CsvClassifier": {
            "Description": "A CsvClassifier object specifying the classifier to create.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        }
    },
    "create_connection": {
        "CatalogId": {
            "Description": "The ID of the Data Catalog in which to create the connection. If none is provided, the Amazon Web Services account ID is used by default.",
            "Type": "string",
            "Required": false
        },
        "ConnectionInput": {
            "Description": "A ConnectionInput object defining the connection to create.",
            "Type": "dict",
            "Required": true,
            "dict variables": {}
        },
        "Tags": {
            "Description": "The tags you assign to the connection.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        }
    },
    "create_crawler": {
        "Name": {
            "Description": "Name of the new crawler.",
            "Type": "string",
            "Required": true
        },
        "Role": {
            "Description": "The IAM role or Amazon Resource Name (ARN) of an IAM role used by the new crawler to access customer resources.",
            "Type": "string",
            "Required": true
        },
        "DatabaseName": {
            "Description": "The Glue database where results are written, such as: arn:aws:daylight:us-east-1::database/sometable/* .",
            "Type": "string",
            "Required": false
        },
        "Description": {
            "Description": "A description of the new crawler.",
            "Type": "string",
            "Required": false
        },
        "Targets": {
            "Description": "A list of collection of targets to crawl.",
            "Type": "dict",
            "Required": true,
            "dict variables": {}
        },
        "Schedule": {
            "Description": "A cron expression used to specify the schedule (see Time-Based Schedules for Jobs and Crawlers . For example, to run something every day at 12:15 UTC, you would specify: cron(15 12 * * ? *) .",
            "Type": "string",
            "Required": false
        },
        "Classifiers": {
            "Description": "A list of custom classifiers that the user has registered. By default, all built-in classifiers are included in a crawl, but these custom classifiers always override the default classifiers for a given classification.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "TablePrefix": {
            "Description": "The table prefix used for catalog tables that are created.",
            "Type": "string",
            "Required": false
        },
        "SchemaChangePolicy": {
            "Description": "The policy for the crawler's update and deletion behavior.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "RecrawlPolicy": {
            "Description": "A policy that specifies whether to crawl the entire dataset again, or to crawl only folders that were added since the last crawler run.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "LineageConfiguration": {
            "Description": "Specifies data lineage configuration settings for the crawler.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "LakeFormationConfiguration": {
            "Description": "Specifies Lake Formation configuration settings for the crawler.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "Configuration": {
            "Description": "Crawler configuration information. This versioned JSON string allows users to specify aspects of a crawler's behavior. For more information, see Configuring a Crawler .",
            "Type": "string",
            "Required": false
        },
        "CrawlerSecurityConfiguration": {
            "Description": "The name of the SecurityConfiguration structure to be used by this crawler.",
            "Type": "string",
            "Required": false
        },
        "Tags": {
            "Description": "The tags to use with this crawler request. You may use tags to limit access to the crawler. For more information about tags in Glue, see Amazon Web Services Tags in Glue in the developer guide.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        }
    },
    "create_custom_entity_type": {
        "Name": {
            "Description": "A name for the custom pattern that allows it to be retrieved or deleted later. This name must be unique per Amazon Web Services account.",
            "Type": "string",
            "Required": true
        },
        "RegexString": {
            "Description": "A regular expression string that is used for detecting sensitive data in a custom pattern.",
            "Type": "string",
            "Required": true
        },
        "ContextWords": {
            "Description": "A list of context words. If none of these context words are found within the vicinity of the regular expression the data will not be detected as sensitive data.\nIf no context words are passed only a regular expression is checked.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        }
    },
    "create_database": {
        "CatalogId": {
            "Description": "The ID of the Data Catalog in which to create the database. If none is provided, the Amazon Web Services account ID is used by default.",
            "Type": "string",
            "Required": false
        },
        "DatabaseInput": {
            "Description": "The metadata for the database.",
            "Type": "dict",
            "Required": true,
            "dict variables": {}
        },
        "Tags": {
            "Description": "The tags you assign to the database.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        }
    },
    "create_dev_endpoint": {
        "EndpointName": {
            "Description": "The name to be assigned to the new DevEndpoint .",
            "Type": "string",
            "Required": true
        },
        "RoleArn": {
            "Description": "The IAM role for the DevEndpoint .",
            "Type": "string",
            "Required": true
        },
        "SecurityGroupIds": {
            "Description": "Security group IDs for the security groups to be used by the new DevEndpoint .",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "SubnetId": {
            "Description": "The subnet ID for the new DevEndpoint to use.",
            "Type": "string",
            "Required": false
        },
        "PublicKey": {
            "Description": "The public key to be used by this DevEndpoint for authentication. This attribute is provided for backward compatibility because the recommended attribute to use is public keys.",
            "Type": "string",
            "Required": false
        },
        "PublicKeys": {
            "Description": "A list of public keys to be used by the development endpoints for authentication. The use of this attribute is preferred over a single public key because the public keys allow you to have a different private key per client.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "NumberOfNodes": {
            "Description": "The number of Glue Data Processing Units (DPUs) to allocate to this DevEndpoint .",
            "Type": "integer",
            "Required": false
        },
        "WorkerType": {
            "Description": "The type of predefined worker that is allocated to the development endpoint. Accepts a value of Standard, G.1X, or G.2X.\nKnown issue: when a development endpoint is created with the G.2X WorkerType configuration, the Spark drivers for the development endpoint will run on 4 vCPU, 16 GB of memory, and a 64 GB disk.",
            "Type": "string",
            "Required": false,
            "string variables": {}
        },
        "GlueVersion": {
            "Description": "Glue version determines the versions of Apache Spark and Python that Glue supports. The Python version indicates the version supported for running your ETL scripts on development endpoints.\nFor more information about the available Glue versions and corresponding Spark and Python versions, see Glue version in the developer guide.\nDevelopment endpoints that are created without specifying a Glue version default to Glue 0.9.\nYou can specify a version of Python support for development endpoints by using the Arguments parameter in the CreateDevEndpoint or UpdateDevEndpoint APIs. If no arguments are provided, the version defaults to Python 2.",
            "Type": "string",
            "Required": false
        },
        "NumberOfWorkers": {
            "Description": "The number of workers of a defined workerType that are allocated to the development endpoint.\nThe maximum number of workers you can define are 299 for G.1X, and 149 for G.2X .",
            "Type": "integer",
            "Required": false
        },
        "ExtraPythonLibsS3Path": {
            "Description": "The paths to one or more Python libraries in an Amazon S3 bucket that should be loaded in your DevEndpoint. Multiple values must be complete paths separated by a comma.",
            "Type": "string",
            "Required": false
        },
        "ExtraJarsS3Path": {
            "Description": "The path to one or more Java .jar files in an S3 bucket that should be loaded in your DevEndpoint .",
            "Type": "string",
            "Required": false
        },
        "SecurityConfiguration": {
            "Description": "The name of the SecurityConfiguration structure to be used with this DevEndpoint .",
            "Type": "string",
            "Required": false
        },
        "Tags": {
            "Description": "The tags to use with this DevEndpoint. You may use tags to limit access to the DevEndpoint. For more information about tags in Glue, see Amazon Web Services Tags in Glue in the developer guide.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "Arguments": {
            "Description": "A map of arguments used to configure the DevEndpoint .",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        }
    },
    "create_job": {
        "Name": {
            "Description": "The name you assign to this job definition. It must be unique in your account.",
            "Type": "string",
            "Required": true
        },
        "Description": {
            "Description": "Description of the job being defined.",
            "Type": "string",
            "Required": false
        },
        "LogUri": {
            "Description": "This field is reserved for future use.",
            "Type": "string",
            "Required": false
        },
        "Role": {
            "Description": "The name or Amazon Resource Name (ARN) of the IAM role associated with this job.",
            "Type": "string",
            "Required": true
        },
        "ExecutionProperty": {
            "Description": "An ExecutionProperty specifying the maximum number of concurrent runs allowed for this job.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "Command": {
            "Description": "The JobCommand that runs this job.",
            "Type": "dict",
            "Required": true,
            "dict variables": {}
        },
        "DefaultArguments": {
            "Description": "The default arguments for this job.\nYou can specify arguments here that your own job-execution script consumes, as well as arguments that Glue itself consumes.\nJob arguments may be logged. Do not pass plaintext secrets as arguments. Retrieve secrets from a Glue Connection, Secrets Manager or other secret management mechanism if you intend to keep them within the Job.\nFor information about how to specify and consume your own Job arguments, see the Calling Glue APIs in Python topic in the developer guide.\nFor information about the key-value pairs that Glue consumes to set up your job, see the Special Parameters Used by Glue topic in the developer guide.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "NonOverridableArguments": {
            "Description": "Non-overridable arguments for this job, specified as name-value pairs.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "Connections": {
            "Description": "The connections used for this job.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "MaxRetries": {
            "Description": "The maximum number of times to retry this job if it fails.",
            "Type": "integer",
            "Required": false
        },
        "AllocatedCapacity": {
            "Description": "This parameter is deprecated. Use MaxCapacity instead.\nThe number of Glue data processing units (DPUs) to allocate to this Job. You can allocate a minimum of 2 DPUs; the default is 10. A DPU is a relative measure of processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory. For more information, see the Glue pricing page .",
            "Type": "integer",
            "Required": false
        },
        "Timeout": {
            "Description": "The job timeout in minutes. This is the maximum time that a job run can consume resources before it is terminated and enters TIMEOUT status. The default is 2,880 minutes (48 hours).",
            "Type": "integer",
            "Required": false
        },
        "MaxCapacity": {
            "Description": "For Glue version 1.0 or earlier jobs, using the standard worker type, the number of Glue data processing units (DPUs) that can be allocated when this job runs. A DPU is a relative measure of processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory. For more information, see the Glue pricing page .\nDo not set Max Capacity if using WorkerType and NumberOfWorkers .\nThe value that can be allocated for MaxCapacity depends on whether you are running a Python shell job or an Apache Spark ETL job:\nFor Glue version 2.0 jobs, you cannot instead specify a Maximum capacity. Instead, you should specify a Worker type and the Number of workers .",
            "Type": "float",
            "Required": false,
            "float variables": {}
        },
        "SecurityConfiguration": {
            "Description": "The name of the SecurityConfiguration structure to be used with this job.",
            "Type": "string",
            "Required": false
        },
        "Tags": {
            "Description": "The tags to use with this job. You may use tags to limit access to the job. For more information about tags in Glue, see Amazon Web Services Tags in Glue in the developer guide.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "NotificationProperty": {
            "Description": "Specifies configuration properties of a job notification.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "GlueVersion": {
            "Description": "Glue version determines the versions of Apache Spark and Python that Glue supports. The Python version indicates the version supported for jobs of type Spark.\nFor more information about the available Glue versions and corresponding Spark and Python versions, see Glue version in the developer guide.\nJobs that are created without specifying a Glue version default to Glue 0.9.",
            "Type": "string",
            "Required": false
        },
        "NumberOfWorkers": {
            "Description": "The number of workers of a defined workerType that are allocated when a job runs.",
            "Type": "integer",
            "Required": false
        },
        "WorkerType": {
            "Description": "The type of predefined worker that is allocated when a job runs. Accepts a value of Standard, G.1X, G.2X, or G.025X.",
            "Type": "string",
            "Required": false,
            "string variables": {}
        },
        "CodeGenConfigurationNodes": {
            "Description": "The representation of a directed acyclic graph on which both the Glue Studio visual component and Glue Studio code generation is based.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "ExecutionClass": {
            "Description": "Indicates whether the job is run with a standard or flexible execution class. The standard execution-class is ideal for time-sensitive workloads that require fast job startup and dedicated resources.\nThe flexible execution class is appropriate for time-insensitive jobs whose start and completion times may vary.\nOnly jobs with Glue version 3.0 and above and command type glueetl will be allowed to set ExecutionClass to FLEX. The flexible execution class is available for Spark jobs.",
            "Type": "string",
            "Required": false
        }
    },
    "create_ml_transform": {
        "Name": {
            "Description": "The unique name that you give the transform when you create it.",
            "Type": "string",
            "Required": true
        },
        "Description": {
            "Description": "A description of the machine learning transform that is being defined. The default is an empty string.",
            "Type": "string",
            "Required": false
        },
        "InputRecordTables": {
            "Description": "A list of Glue table definitions used by the transform.",
            "Type": "list",
            "Required": true,
            "list variables": {}
        },
        "Parameters": {
            "Description": "The algorithmic parameters that are specific to the transform type used. Conditionally dependent on the transform type.",
            "Type": "dict",
            "Required": true,
            "dict variables": {}
        },
        "Role": {
            "Description": "The name or Amazon Resource Name (ARN) of the IAM role with the required permissions. The required permissions include both Glue service role permissions to Glue resources, and Amazon S3 permissions required by the transform.",
            "Type": "string",
            "Required": true,
            "string variables": {}
        },
        "GlueVersion": {
            "Description": "This value determines which version of Glue this machine learning transform is compatible with. Glue 1.0 is recommended for most customers. If the value is not set, the Glue compatibility defaults to Glue 0.9. For more information, see Glue Versions in the developer guide.",
            "Type": "string",
            "Required": false
        },
        "MaxCapacity": {
            "Description": "The number of Glue data processing units (DPUs) that are allocated to task runs for this transform. You can allocate from 2 to 100 DPUs; the default is 10. A DPU is a relative measure of processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory. For more information, see the Glue pricing page .\nWhen the WorkerType field is set to a value other than Standard, the MaxCapacity field is set automatically and becomes read-only.\nWhen the WorkerType field is set to a value other than Standard, the MaxCapacity field is set automatically and becomes read-only.",
            "Type": "float",
            "Required": false,
            "float variables": {}
        },
        "WorkerType": {
            "Description": "The type of predefined worker that is allocated when this task runs. Accepts a value of Standard, G.1X, or G.2X.",
            "Type": "string",
            "Required": false,
            "string variables": [
                {},
                {}
            ]
        },
        "NumberOfWorkers": {
            "Description": "The number of workers of a defined workerType that are allocated when this task runs.\nIf WorkerType is set, then NumberOfWorkers is required (and vice versa).",
            "Type": "integer",
            "Required": false
        },
        "Timeout": {
            "Description": "The timeout of the task run for this transform in minutes. This is the maximum time that a task run for this transform can consume resources before it is terminated and enters TIMEOUT status. The default is 2,880 minutes (48 hours).",
            "Type": "integer",
            "Required": false
        },
        "MaxRetries": {
            "Description": "The maximum number of times to retry a task for this transform after a task run fails.",
            "Type": "integer",
            "Required": false
        },
        "Tags": {
            "Description": "The tags to use with this machine learning transform. You may use tags to limit access to the machine learning transform. For more information about tags in Glue, see Amazon Web Services Tags in Glue in the developer guide.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "TransformEncryption": {
            "Description": "The encryption-at-rest settings of the transform that apply to accessing user data. Machine learning transforms can access user data encrypted in Amazon S3 using KMS.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        }
    },
    "create_partition": {
        "CatalogId": {
            "Description": "The Amazon Web Services account ID of the catalog in which the partition is to be created.",
            "Type": "string",
            "Required": false
        },
        "DatabaseName": {
            "Description": "The name of the metadata database in which the partition is to be created.",
            "Type": "string",
            "Required": true
        },
        "TableName": {
            "Description": "The name of the metadata table in which the partition is to be created.",
            "Type": "string",
            "Required": true
        },
        "PartitionInput": {
            "Description": "A PartitionInput structure defining the partition to be created.",
            "Type": "dict",
            "Required": true,
            "dict variables": {}
        }
    },
    "create_partition_index": {
        "CatalogId": {
            "Description": "The catalog ID where the table resides.",
            "Type": "string",
            "Required": false
        },
        "DatabaseName": {
            "Description": "Specifies the name of a database in which you want to create a partition index.",
            "Type": "string",
            "Required": true
        },
        "TableName": {
            "Description": "Specifies the name of a table in which you want to create a partition index.",
            "Type": "string",
            "Required": true
        },
        "PartitionIndex": {
            "Description": "Specifies a PartitionIndex structure to create a partition index in an existing table.",
            "Type": "dict",
            "Required": true,
            "dict variables": {}
        }
    },
    "create_registry": {
        "RegistryName": {
            "Description": "Name of the registry to be created of max length of 255, and may only contain letters, numbers, hyphen, underscore, dollar sign, or hash mark. No whitespace.",
            "Type": "string",
            "Required": true
        },
        "Description": {
            "Description": "A description of the registry. If description is not provided, there will not be any default value for this.",
            "Type": "string",
            "Required": false
        },
        "Tags": {
            "Description": "Amazon Web Services tags that contain a key value pair and may be searched by console, command line, or API.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        }
    },
    "create_schema": {
        "RegistryId": {
            "Description": "This is a wrapper shape to contain the registry identity fields. If this is not provided, the default registry will be used. The ARN format for the same will be: arn:aws:glue:us-east-2:&lt;customer id&gt;:registry/default-registry:random-5-letter-id .",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "SchemaName": {
            "Description": "Name of the schema to be created of max length of 255, and may only contain letters, numbers, hyphen, underscore, dollar sign, or hash mark. No whitespace.",
            "Type": "string",
            "Required": true
        },
        "DataFormat": {
            "Description": "The data format of the schema definition. Currently AVRO, JSON and PROTOBUF are supported.",
            "Type": "string",
            "Required": true
        },
        "Compatibility": {
            "Description": "The compatibility mode of the schema. The possible values are:",
            "Type": "string",
            "Required": false,
            "string variables": {}
        },
        "Description": {
            "Description": "An optional description of the schema. If description is not provided, there will not be any automatic default value for this.",
            "Type": "string",
            "Required": false
        },
        "Tags": {
            "Description": "Amazon Web Services tags that contain a key value pair and may be searched by console, command line, or API. If specified, follows the Amazon Web Services tags-on-create pattern.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "SchemaDefinition": {
            "Description": "The schema definition using the DataFormat setting for SchemaName .",
            "Type": "string",
            "Required": false
        }
    },
    "create_script": {
        "DagNodes": {
            "Description": "A list of the nodes in the DAG.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "DagEdges": {
            "Description": "A list of the edges in the DAG.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "Language": {
            "Description": "The programming language of the resulting code from the DAG.",
            "Type": "string",
            "Required": false
        }
    },
    "create_security_configuration": {
        "Name": {
            "Description": "The name for the new security configuration.",
            "Type": "string",
            "Required": true
        },
        "EncryptionConfiguration": {
            "Description": "The encryption configuration for the new security configuration.",
            "Type": "dict",
            "Required": true,
            "dict variables": {}
        }
    },
    "create_session": {
        "Id": {
            "Description": "The ID of the session request.",
            "Type": "string",
            "Required": true
        },
        "Description": {
            "Description": "The description of the session.",
            "Type": "string",
            "Required": false
        },
        "Role": {
            "Description": "The IAM Role ARN",
            "Type": "string",
            "Required": true
        },
        "Command": {
            "Description": "The SessionCommand that runs the job.",
            "Type": "dict",
            "Required": true,
            "dict variables": {}
        },
        "Timeout": {
            "Description": "The number of seconds before request times out.",
            "Type": "integer",
            "Required": false
        },
        "IdleTimeout": {
            "Description": "The number of seconds when idle before request times out.",
            "Type": "integer",
            "Required": false
        },
        "DefaultArguments": {
            "Description": "A map array of key-value pairs. Max is 75 pairs.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "Connections": {
            "Description": "The number of connections to use for the session.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "MaxCapacity": {
            "Description": "The number of Glue data processing units (DPUs) that can be allocated when the job runs. A DPU is a relative measure of processing power that consists of 4 vCPUs of compute capacity and 16 GB memory.",
            "Type": "float",
            "Required": false
        },
        "NumberOfWorkers": {
            "Description": "The number of workers of a defined WorkerType to use for the session.",
            "Type": "integer",
            "Required": false
        },
        "WorkerType": {
            "Description": "The type of predefined worker that is allocated to use for the session. Accepts a value of Standard, G.1X, G.2X, or G.025X.",
            "Type": "string",
            "Required": false,
            "string variables": {}
        },
        "SecurityConfiguration": {
            "Description": "The name of the SecurityConfiguration structure to be used with the session",
            "Type": "string",
            "Required": false
        },
        "GlueVersion": {
            "Description": "The Glue version determines the versions of Apache Spark and Python that Glue supports. The GlueVersion must be greater than 2.0.",
            "Type": "string",
            "Required": false
        },
        "Tags": {
            "Description": "The map of key value pairs (tags) belonging to the session.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "RequestOrigin": {
            "Description": "The origin of the request.",
            "Type": "string",
            "Required": false
        }
    },
    "create_table": {
        "CatalogId": {
            "Description": "The ID of the Data Catalog in which to create the Table . If none is supplied, the Amazon Web Services account ID is used by default.",
            "Type": "string",
            "Required": false
        },
        "DatabaseName": {
            "Description": "The catalog database in which to create the new table. For Hive compatibility, this name is entirely lowercase.",
            "Type": "string",
            "Required": true
        },
        "TableInput": {
            "Description": "The TableInput object that defines the metadata table to create in the catalog.",
            "Type": "dict",
            "Required": true,
            "dict variables": {}
        },
        "PartitionIndexes": {
            "Description": "A list of partition indexes, PartitionIndex structures, to create in the table.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "TransactionId": {
            "Description": "The ID of the transaction.",
            "Type": "string",
            "Required": false
        }
    },
    "create_trigger": {
        "Name": {
            "Description": "The name of the trigger.",
            "Type": "string",
            "Required": true
        },
        "WorkflowName": {
            "Description": "The name of the workflow associated with the trigger.",
            "Type": "string",
            "Required": false
        },
        "Type": {
            "Description": "The type of the new trigger.",
            "Type": "string",
            "Required": true
        },
        "Schedule": {
            "Description": "A cron expression used to specify the schedule (see Time-Based Schedules for Jobs and Crawlers. For example, to run something every day at 12:15 UTC, you would specify: cron(15 12 * * ? *) .\nThis field is required when the trigger type is SCHEDULED.",
            "Type": "string",
            "Required": false
        },
        "Predicate": {
            "Description": "A predicate to specify when the new trigger should fire.\nThis field is required when the trigger type is CONDITIONAL .",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "Actions": {
            "Description": "The actions initiated by this trigger when it fires.",
            "Type": "list",
            "Required": true,
            "list variables": {}
        },
        "Description": {
            "Description": "A description of the new trigger.",
            "Type": "string",
            "Required": false
        },
        "StartOnCreation": {
            "Description": "Set to true to start SCHEDULED and CONDITIONAL triggers when created. True is not supported for ON_DEMAND triggers.",
            "Type": "boolean",
            "Required": false
        },
        "Tags": {
            "Description": "The tags to use with this trigger. You may use tags to limit access to the trigger. For more information about tags in Glue, see Amazon Web Services Tags in Glue in the developer guide.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "EventBatchingCondition": {
            "Description": "Batch condition that must be met (specified number of events received or batch time window expired) before EventBridge event trigger fires.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        }
    },
    "create_user_defined_function": {
        "CatalogId": {
            "Description": "The ID of the Data Catalog in which to create the function. If none is provided, the Amazon Web Services account ID is used by default.",
            "Type": "string",
            "Required": false
        },
        "DatabaseName": {
            "Description": "The name of the catalog database in which to create the function.",
            "Type": "string",
            "Required": true
        },
        "FunctionInput": {
            "Description": "A FunctionInput object that defines the function to create in the Data Catalog.",
            "Type": "dict",
            "Required": true,
            "dict variables": {}
        }
    },
    "create_workflow": {
        "Name": {
            "Description": "The name to be assigned to the workflow. It should be unique within your account.",
            "Type": "string",
            "Required": true
        },
        "Description": {
            "Description": "A description of the workflow.",
            "Type": "string",
            "Required": false
        },
        "DefaultRunProperties": {
            "Description": "A collection of properties to be used as part of each execution of the workflow.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "Tags": {
            "Description": "The tags to be used with this workflow.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "MaxConcurrentRuns": {
            "Description": "You can use this parameter to prevent unwanted multiple updates to data, to control costs, or in some cases, to prevent exceeding the maximum number of concurrent runs of any of the component jobs. If you leave this parameter blank, there is no limit to the number of concurrent workflow runs.",
            "Type": "integer",
            "Required": false
        }
    },
    "delete_blueprint": {
        "Name": {
            "Description": "The name of the blueprint to delete.",
            "Type": "string",
            "Required": true
        }
    },
    "delete_classifier": {
        "Name": {
            "Description": "Name of the classifier to remove.",
            "Type": "string",
            "Required": true
        }
    },
    "delete_column_statistics_for_partition": {
        "CatalogId": {
            "Description": "The ID of the Data Catalog where the partitions in question reside. If none is supplied, the Amazon Web Services account ID is used by default.",
            "Type": "string",
            "Required": false
        },
        "DatabaseName": {
            "Description": "The name of the catalog database where the partitions reside.",
            "Type": "string",
            "Required": true
        },
        "TableName": {
            "Description": "The name of the partitions' table.",
            "Type": "string",
            "Required": true
        },
        "PartitionValues": {
            "Description": "A list of partition values identifying the partition.",
            "Type": "list",
            "Required": true,
            "list variables": {}
        },
        "ColumnName": {
            "Description": "Name of the column.",
            "Type": "string",
            "Required": true
        }
    },
    "delete_column_statistics_for_table": {
        "CatalogId": {
            "Description": "The ID of the Data Catalog where the partitions in question reside. If none is supplied, the Amazon Web Services account ID is used by default.",
            "Type": "string",
            "Required": false
        },
        "DatabaseName": {
            "Description": "The name of the catalog database where the partitions reside.",
            "Type": "string",
            "Required": true
        },
        "TableName": {
            "Description": "The name of the partitions' table.",
            "Type": "string",
            "Required": true
        },
        "ColumnName": {
            "Description": "The name of the column.",
            "Type": "string",
            "Required": true
        }
    },
    "delete_connection": {
        "CatalogId": {
            "Description": "The ID of the Data Catalog in which the connection resides. If none is provided, the Amazon Web Services account ID is used by default.",
            "Type": "string",
            "Required": false
        },
        "ConnectionName": {
            "Description": "The name of the connection to delete.",
            "Type": "string",
            "Required": true
        }
    },
    "delete_crawler": {
        "Name": {
            "Description": "The name of the crawler to remove.",
            "Type": "string",
            "Required": true
        }
    },
    "delete_custom_entity_type": {
        "Name": {
            "Description": "The name of the custom pattern that you want to delete.",
            "Type": "string",
            "Required": true
        }
    },
    "delete_database": {
        "CatalogId": {
            "Description": "The ID of the Data Catalog in which the database resides. If none is provided, the Amazon Web Services account ID is used by default.",
            "Type": "string",
            "Required": false
        },
        "Name": {
            "Description": "The name of the database to delete. For Hive compatibility, this must be all lowercase.",
            "Type": "string",
            "Required": true
        }
    },
    "delete_dev_endpoint": {
        "EndpointName": {
            "Description": "The name of the DevEndpoint .",
            "Type": "string",
            "Required": true
        }
    },
    "delete_job": {
        "JobName": {
            "Description": "The name of the job definition to delete.",
            "Type": "string",
            "Required": true
        }
    },
    "delete_ml_transform": {
        "TransformId": {
            "Description": "The unique identifier of the transform to delete.",
            "Type": "string",
            "Required": true
        }
    },
    "delete_partition": {
        "CatalogId": {
            "Description": "The ID of the Data Catalog where the partition to be deleted resides. If none is provided, the Amazon Web Services account ID is used by default.",
            "Type": "string",
            "Required": false
        },
        "DatabaseName": {
            "Description": "The name of the catalog database in which the table in question resides.",
            "Type": "string",
            "Required": true
        },
        "TableName": {
            "Description": "The name of the table that contains the partition to be deleted.",
            "Type": "string",
            "Required": true
        },
        "PartitionValues": {
            "Description": "The values that define the partition.",
            "Type": "list",
            "Required": true,
            "list variables": {}
        }
    },
    "delete_partition_index": {
        "CatalogId": {
            "Description": "The catalog ID where the table resides.",
            "Type": "string",
            "Required": false
        },
        "DatabaseName": {
            "Description": "Specifies the name of a database from which you want to delete a partition index.",
            "Type": "string",
            "Required": true
        },
        "TableName": {
            "Description": "Specifies the name of a table from which you want to delete a partition index.",
            "Type": "string",
            "Required": true
        },
        "IndexName": {
            "Description": "The name of the partition index to be deleted.",
            "Type": "string",
            "Required": true
        }
    },
    "delete_registry": {
        "RegistryId": {
            "Description": "This is a wrapper structure that may contain the registry name and Amazon Resource Name (ARN).",
            "Type": "dict",
            "Required": true,
            "dict variables": {}
        }
    },
    "delete_resource_policy": {
        "PolicyHashCondition": {
            "Description": "The hash value returned when this policy was set.",
            "Type": "string",
            "Required": false
        },
        "ResourceArn": {
            "Description": "The ARN of the Glue resource for the resource policy to be deleted.",
            "Type": "string",
            "Required": false
        }
    },
    "delete_schema": {
        "SchemaId": {
            "Description": "This is a wrapper structure that may contain the schema name and Amazon Resource Name (ARN).",
            "Type": "dict",
            "Required": true,
            "dict variables": {}
        }
    },
    "delete_schema_versions": {
        "SchemaId": {
            "Description": "This is a wrapper structure that may contain the schema name and Amazon Resource Name (ARN).",
            "Type": "dict",
            "Required": true,
            "dict variables": {}
        },
        "Versions": {
            "Description": "A version range may be supplied which may be of the format:",
            "Type": "string",
            "Required": true,
            "string variables": {}
        }
    },
    "delete_security_configuration": {
        "Name": {
            "Description": "The name of the security configuration to delete.",
            "Type": "string",
            "Required": true
        }
    },
    "delete_session": {
        "Id": {
            "Description": "The ID of the session to be deleted.",
            "Type": "string",
            "Required": true
        },
        "RequestOrigin": {
            "Description": "The name of the origin of the delete session request.",
            "Type": "string",
            "Required": false
        }
    },
    "delete_table": {
        "CatalogId": {
            "Description": "The ID of the Data Catalog where the table resides. If none is provided, the Amazon Web Services account ID is used by default.",
            "Type": "string",
            "Required": false
        },
        "DatabaseName": {
            "Description": "The name of the catalog database in which the table resides. For Hive compatibility, this name is entirely lowercase.",
            "Type": "string",
            "Required": true
        },
        "Name": {
            "Description": "The name of the table to be deleted. For Hive compatibility, this name is entirely lowercase.",
            "Type": "string",
            "Required": true
        },
        "TransactionId": {
            "Description": "The transaction ID at which to delete the table contents.",
            "Type": "string",
            "Required": false
        }
    },
    "delete_table_version": {
        "CatalogId": {
            "Description": "The ID of the Data Catalog where the tables reside. If none is provided, the Amazon Web Services account ID is used by default.",
            "Type": "string",
            "Required": false
        },
        "DatabaseName": {
            "Description": "The database in the catalog in which the table resides. For Hive compatibility, this name is entirely lowercase.",
            "Type": "string",
            "Required": true
        },
        "TableName": {
            "Description": "The name of the table. For Hive compatibility, this name is entirely lowercase.",
            "Type": "string",
            "Required": true
        },
        "VersionId": {
            "Description": "The ID of the table version to be deleted. A VersionID is a string representation of an integer. Each version is incremented by 1.",
            "Type": "string",
            "Required": true
        }
    },
    "delete_trigger": {
        "Name": {
            "Description": "The name of the trigger to delete.",
            "Type": "string",
            "Required": true
        }
    },
    "delete_user_defined_function": {
        "CatalogId": {
            "Description": "The ID of the Data Catalog where the function to be deleted is located. If none is supplied, the Amazon Web Services account ID is used by default.",
            "Type": "string",
            "Required": false
        },
        "DatabaseName": {
            "Description": "The name of the catalog database where the function is located.",
            "Type": "string",
            "Required": true
        },
        "FunctionName": {
            "Description": "The name of the function definition to be deleted.",
            "Type": "string",
            "Required": true
        }
    },
    "delete_workflow": {
        "Name": {
            "Description": "Name of the workflow to be deleted.",
            "Type": "string",
            "Required": true
        }
    },
    "get_blueprint": {
        "Name": {
            "Description": "The name of the blueprint.",
            "Type": "string",
            "Required": true
        },
        "IncludeBlueprint": {
            "Description": "Specifies whether or not to include the blueprint in the response.",
            "Type": "boolean",
            "Required": false
        },
        "IncludeParameterSpec": {
            "Description": "Specifies whether or not to include the parameter specification.",
            "Type": "boolean",
            "Required": false
        }
    },
    "get_blueprint_run": {
        "BlueprintName": {
            "Description": "The name of the blueprint.",
            "Type": "string",
            "Required": true
        },
        "RunId": {
            "Description": "The run ID for the blueprint run you want to retrieve.",
            "Type": "string",
            "Required": true
        }
    },
    "get_blueprint_runs": {
        "BlueprintName": {
            "Description": "The name of the blueprint.",
            "Type": "string",
            "Required": true
        },
        "NextToken": {
            "Description": "A continuation token, if this is a continuation request.",
            "Type": "string",
            "Required": false
        },
        "MaxResults": {
            "Description": "The maximum size of a list to return.",
            "Type": "integer",
            "Required": false
        }
    },
    "get_catalog_import_status": {
        "CatalogId": {
            "Description": "The ID of the catalog to migrate. Currently, this should be the Amazon Web Services account ID.",
            "Type": "string",
            "Required": false
        }
    },
    "get_classifier": {
        "Name": {
            "Description": "Name of the classifier to retrieve.",
            "Type": "string",
            "Required": true
        }
    },
    "get_classifiers": {
        "MaxResults": {
            "Description": "The size of the list to return (optional).",
            "Type": "integer",
            "Required": false
        },
        "NextToken": {
            "Description": "An optional continuation token.",
            "Type": "string",
            "Required": false
        }
    },
    "get_column_statistics_for_partition": {
        "CatalogId": {
            "Description": "The ID of the Data Catalog where the partitions in question reside. If none is supplied, the Amazon Web Services account ID is used by default.",
            "Type": "string",
            "Required": false
        },
        "DatabaseName": {
            "Description": "The name of the catalog database where the partitions reside.",
            "Type": "string",
            "Required": true
        },
        "TableName": {
            "Description": "The name of the partitions' table.",
            "Type": "string",
            "Required": true
        },
        "PartitionValues": {
            "Description": "A list of partition values identifying the partition.",
            "Type": "list",
            "Required": true,
            "list variables": {}
        },
        "ColumnNames": {
            "Description": "A list of the column names.",
            "Type": "list",
            "Required": true,
            "list variables": {}
        }
    },
    "get_column_statistics_for_table": {
        "CatalogId": {
            "Description": "The ID of the Data Catalog where the partitions in question reside. If none is supplied, the Amazon Web Services account ID is used by default.",
            "Type": "string",
            "Required": false
        },
        "DatabaseName": {
            "Description": "The name of the catalog database where the partitions reside.",
            "Type": "string",
            "Required": true
        },
        "TableName": {
            "Description": "The name of the partitions' table.",
            "Type": "string",
            "Required": true
        },
        "ColumnNames": {
            "Description": "A list of the column names.",
            "Type": "list",
            "Required": true,
            "list variables": {}
        }
    },
    "get_connection": {
        "CatalogId": {
            "Description": "The ID of the Data Catalog in which the connection resides. If none is provided, the Amazon Web Services account ID is used by default.",
            "Type": "string",
            "Required": false
        },
        "Name": {
            "Description": "The name of the connection definition to retrieve.",
            "Type": "string",
            "Required": true
        },
        "HidePassword": {
            "Description": "Allows you to retrieve the connection metadata without returning the password. For instance, the Glue console uses this flag to retrieve the connection, and does not display the password. Set this parameter when the caller might not have permission to use the KMS key to decrypt the password, but it does have permission to access the rest of the connection properties.",
            "Type": "boolean",
            "Required": false
        }
    },
    "get_connections": {
        "CatalogId": {
            "Description": "The ID of the Data Catalog in which the connections reside. If none is provided, the Amazon Web Services account ID is used by default.",
            "Type": "string",
            "Required": false
        },
        "Filter": {
            "Description": "A filter that controls which connections are returned.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "HidePassword": {
            "Description": "Allows you to retrieve the connection metadata without returning the password. For instance, the Glue console uses this flag to retrieve the connection, and does not display the password. Set this parameter when the caller might not have permission to use the KMS key to decrypt the password, but it does have permission to access the rest of the connection properties.",
            "Type": "boolean",
            "Required": false
        },
        "NextToken": {
            "Description": "A continuation token, if this is a continuation call.",
            "Type": "string",
            "Required": false
        },
        "MaxResults": {
            "Description": "The maximum number of connections to return in one response.",
            "Type": "integer",
            "Required": false
        }
    },
    "get_crawler": {
        "Name": {
            "Description": "The name of the crawler to retrieve metadata for.",
            "Type": "string",
            "Required": true
        }
    },
    "get_crawler_metrics": {
        "CrawlerNameList": {
            "Description": "A list of the names of crawlers about which to retrieve metrics.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "MaxResults": {
            "Description": "The maximum size of a list to return.",
            "Type": "integer",
            "Required": false
        },
        "NextToken": {
            "Description": "A continuation token, if this is a continuation call.",
            "Type": "string",
            "Required": false
        }
    },
    "get_crawlers": {
        "MaxResults": {
            "Description": "The number of crawlers to return on each call.",
            "Type": "integer",
            "Required": false
        },
        "NextToken": {
            "Description": "A continuation token, if this is a continuation request.",
            "Type": "string",
            "Required": false
        }
    },
    "get_custom_entity_type": {
        "Name": {
            "Description": "The name of the custom pattern that you want to retrieve.",
            "Type": "string",
            "Required": true
        }
    },
    "get_data_catalog_encryption_settings": {
        "CatalogId": {
            "Description": "The ID of the Data Catalog to retrieve the security configuration for. If none is provided, the Amazon Web Services account ID is used by default.",
            "Type": "string",
            "Required": false
        }
    },
    "get_database": {
        "CatalogId": {
            "Description": "The ID of the Data Catalog in which the database resides. If none is provided, the Amazon Web Services account ID is used by default.",
            "Type": "string",
            "Required": false
        },
        "Name": {
            "Description": "The name of the database to retrieve. For Hive compatibility, this should be all lowercase.",
            "Type": "string",
            "Required": true
        }
    },
    "get_databases": {
        "CatalogId": {
            "Description": "The ID of the Data Catalog from which to retrieve Databases . If none is provided, the Amazon Web Services account ID is used by default.",
            "Type": "string",
            "Required": false
        },
        "NextToken": {
            "Description": "A continuation token, if this is a continuation call.",
            "Type": "string",
            "Required": false
        },
        "MaxResults": {
            "Description": "The maximum number of databases to return in one response.",
            "Type": "integer",
            "Required": false
        },
        "ResourceShareType": {
            "Description": "Allows you to specify that you want to list the databases shared with your account. The allowable values are FOREIGN or ALL .",
            "Type": "string",
            "Required": false,
            "string variables": {}
        }
    },
    "get_dataflow_graph": {
        "PythonScript": {
            "Description": "The Python script to transform.",
            "Type": "string",
            "Required": false
        }
    },
    "get_dev_endpoint": {
        "EndpointName": {
            "Description": "Name of the DevEndpoint to retrieve information for.",
            "Type": "string",
            "Required": true
        }
    },
    "get_dev_endpoints": {
        "MaxResults": {
            "Description": "The maximum size of information to return.",
            "Type": "integer",
            "Required": false
        },
        "NextToken": {
            "Description": "A continuation token, if this is a continuation call.",
            "Type": "string",
            "Required": false
        }
    },
    "get_job": {
        "JobName": {
            "Description": "The name of the job definition to retrieve.",
            "Type": "string",
            "Required": true
        }
    },
    "get_job_bookmark": {
        "JobName": {
            "Description": "The name of the job in question.",
            "Type": "string",
            "Required": true
        },
        "RunId": {
            "Description": "The unique run identifier associated with this job run.",
            "Type": "string",
            "Required": false
        }
    },
    "get_job_run": {
        "JobName": {
            "Description": "Name of the job definition being run.",
            "Type": "string",
            "Required": true
        },
        "RunId": {
            "Description": "The ID of the job run.",
            "Type": "string",
            "Required": true
        },
        "PredecessorsIncluded": {
            "Description": "True if a list of predecessor runs should be returned.",
            "Type": "boolean",
            "Required": false
        }
    },
    "get_job_runs": {
        "JobName": {
            "Description": "The name of the job definition for which to retrieve all job runs.",
            "Type": "string",
            "Required": true
        },
        "NextToken": {
            "Description": "A continuation token, if this is a continuation call.",
            "Type": "string",
            "Required": false
        },
        "MaxResults": {
            "Description": "The maximum size of the response.",
            "Type": "integer",
            "Required": false
        }
    },
    "get_jobs": {
        "NextToken": {
            "Description": "A continuation token, if this is a continuation call.",
            "Type": "string",
            "Required": false
        },
        "MaxResults": {
            "Description": "The maximum size of the response.",
            "Type": "integer",
            "Required": false
        }
    },
    "get_mapping": {
        "Source": {
            "Description": "Specifies the source table.",
            "Type": "dict",
            "Required": true,
            "dict variables": {}
        },
        "Sinks": {
            "Description": "A list of target tables.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "Location": {
            "Description": "Parameters for the mapping.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        }
    },
    "get_ml_task_run": {
        "TransformId": {
            "Description": "The unique identifier of the machine learning transform.",
            "Type": "string",
            "Required": true
        },
        "TaskRunId": {
            "Description": "The unique identifier of the task run.",
            "Type": "string",
            "Required": true
        }
    },
    "get_ml_task_runs": {
        "TransformId": {
            "Description": "The unique identifier of the machine learning transform.",
            "Type": "string",
            "Required": true
        },
        "NextToken": {
            "Description": "A token for pagination of the results. The default is empty.",
            "Type": "string",
            "Required": false
        },
        "MaxResults": {
            "Description": "The maximum number of results to return.",
            "Type": "integer",
            "Required": false
        },
        "Filter": {
            "Description": "The filter criteria, in the TaskRunFilterCriteria structure, for the task run.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "Sort": {
            "Description": "The sorting criteria, in the TaskRunSortCriteria structure, for the task run.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        }
    },
    "get_ml_transform": {
        "TransformId": {
            "Description": "The unique identifier of the transform, generated at the time that the transform was created.",
            "Type": "string",
            "Required": true
        }
    },
    "get_ml_transforms": {
        "NextToken": {
            "Description": "A paginated token to offset the results.",
            "Type": "string",
            "Required": false
        },
        "MaxResults": {
            "Description": "The maximum number of results to return.",
            "Type": "integer",
            "Required": false
        },
        "Filter": {
            "Description": "The filter transformation criteria.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "Sort": {
            "Description": "The sorting criteria.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        }
    },
    "get_partition": {
        "CatalogId": {
            "Description": "The ID of the Data Catalog where the partition in question resides. If none is provided, the Amazon Web Services account ID is used by default.",
            "Type": "string",
            "Required": false
        },
        "DatabaseName": {
            "Description": "The name of the catalog database where the partition resides.",
            "Type": "string",
            "Required": true
        },
        "TableName": {
            "Description": "The name of the partition's table.",
            "Type": "string",
            "Required": true
        },
        "PartitionValues": {
            "Description": "The values that define the partition.",
            "Type": "list",
            "Required": true,
            "list variables": {}
        }
    },
    "get_partition_indexes": {
        "CatalogId": {
            "Description": "The catalog ID where the table resides.",
            "Type": "string",
            "Required": false
        },
        "DatabaseName": {
            "Description": "Specifies the name of a database from which you want to retrieve partition indexes.",
            "Type": "string",
            "Required": true
        },
        "TableName": {
            "Description": "Specifies the name of a table for which you want to retrieve the partition indexes.",
            "Type": "string",
            "Required": true
        },
        "NextToken": {
            "Description": "A continuation token, included if this is a continuation call.",
            "Type": "string",
            "Required": false
        }
    },
    "get_partitions": {
        "CatalogId": {
            "Description": "The ID of the Data Catalog where the partitions in question reside. If none is provided, the Amazon Web Services account ID is used by default.",
            "Type": "string",
            "Required": false
        },
        "DatabaseName": {
            "Description": "The name of the catalog database where the partitions reside.",
            "Type": "string",
            "Required": true
        },
        "TableName": {
            "Description": "The name of the partitions' table.",
            "Type": "string",
            "Required": true
        },
        "Expression": {
            "Description": "An expression that filters the partitions to be returned.\nThe expression uses SQL syntax similar to the SQL WHERE filter clause. The SQL statement parser JSQLParser parses the expression.\nChecks whether the values of the two operands are equal; if yes, then the condition becomes true.\nExample: Assume 'variable a' holds 10 and 'variable b' holds 20.\n(a = b) is not true.\nChecks whether the values of two operands are equal; if the values are not equal, then the condition becomes true.\nExample: (a &lt; &gt; b) is true.\nChecks whether the value of the left operand is greater than the value of the right operand; if yes, then the condition becomes true.\nExample: (a &gt; b) is not true.\nChecks whether the value of the left operand is less than the value of the right operand; if yes, then the condition becomes true.\nExample: (a &lt; b) is true.\nChecks whether the value of the left operand is greater than or equal to the value of the right operand; if yes, then the condition becomes true.\nExample: (a &gt;= b) is not true.\nChecks whether the value of the left operand is less than or equal to the value of the right operand; if yes, then the condition becomes true.\nExample: (a &lt;= b) is true.\nLogical operators.\nIf an type is encountered that is not valid, an exception is thrown.\nThe following list shows the valid operators on each type. When you define a crawler, the partitionKey type is created as a STRING, to be compatible with the catalog partitions.",
            "Type": "string",
            "Required": false,
            "string variables": {}
        },
        "NextToken": {
            "Description": "A continuation token, if this is not the first call to retrieve these partitions.",
            "Type": "string",
            "Required": false
        },
        "Segment": {
            "Description": "The segment of the table's partitions to scan in this request.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "MaxResults": {
            "Description": "The maximum number of partitions to return in a single response.",
            "Type": "integer",
            "Required": false
        },
        "ExcludeColumnSchema": {
            "Description": "When true, specifies not returning the partition column schema. Useful when you are interested only in other partition attributes such as partition values or location. This approach avoids the problem of a large response by not returning duplicate data.",
            "Type": "boolean",
            "Required": false
        },
        "TransactionId": {
            "Description": "The transaction ID at which to read the partition contents.",
            "Type": "string",
            "Required": false
        },
        "QueryAsOfTime": {
            "Description": "The time as of when to read the partition contents. If not set, the most recent transaction commit time will be used. Cannot be specified along with TransactionId .",
            "Type": "datetime",
            "Required": false
        }
    },
    "get_plan": {
        "Mapping": {
            "Description": "The list of mappings from a source table to target tables.",
            "Type": "list",
            "Required": true,
            "list variables": {}
        },
        "Source": {
            "Description": "The source table.",
            "Type": "dict",
            "Required": true,
            "dict variables": {}
        },
        "Sinks": {
            "Description": "The target tables.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "Location": {
            "Description": "The parameters for the mapping.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "Language": {
            "Description": "The programming language of the code to perform the mapping.",
            "Type": "string",
            "Required": false
        },
        "AdditionalPlanOptionsMap": {
            "Description": "A map to hold additional optional key-value parameters.\nCurrently, these key-value pairs are supported:",
            "Type": "dict",
            "Required": false,
            "dict variables": [
                {},
                {}
            ]
        }
    },
    "get_registry": {
        "RegistryId": {
            "Description": "This is a wrapper structure that may contain the registry name and Amazon Resource Name (ARN).",
            "Type": "dict",
            "Required": true,
            "dict variables": {}
        }
    },
    "get_resource_policies": {
        "NextToken": {
            "Description": "A continuation token, if this is a continuation request.",
            "Type": "string",
            "Required": false
        },
        "MaxResults": {
            "Description": "The maximum size of a list to return.",
            "Type": "integer",
            "Required": false
        }
    },
    "get_resource_policy": {
        "ResourceArn": {
            "Description": "The ARN of the Glue resource for which to retrieve the resource policy. If not supplied, the Data Catalog resource policy is returned. Use GetResourcePolicies to view all existing resource policies. For more information see Specifying Glue Resource ARNs .",
            "Type": "string",
            "Required": false
        }
    },
    "get_schema": {
        "SchemaId": {
            "Description": "This is a wrapper structure to contain schema identity fields. The structure contains:",
            "Type": "dict",
            "Required": true,
            "dict variables": [
                {},
                {}
            ]
        }
    },
    "get_schema_by_definition": {
        "SchemaId": {
            "Description": "This is a wrapper structure to contain schema identity fields. The structure contains:",
            "Type": "dict",
            "Required": true,
            "dict variables": [
                {},
                {}
            ]
        },
        "SchemaDefinition": {
            "Description": "The definition of the schema for which schema details are required.",
            "Type": "string",
            "Required": true
        }
    },
    "get_schema_version": {
        "SchemaId": {
            "Description": "This is a wrapper structure to contain schema identity fields. The structure contains:",
            "Type": "dict",
            "Required": false,
            "dict variables": [
                {},
                {}
            ]
        },
        "SchemaVersionId": {
            "Description": "The SchemaVersionId of the schema version. This field is required for fetching by schema ID. Either this or the SchemaId wrapper has to be provided.",
            "Type": "string",
            "Required": false
        },
        "SchemaVersionNumber": {
            "Description": "The version number of the schema.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        }
    },
    "get_schema_versions_diff": {
        "SchemaId": {
            "Description": "This is a wrapper structure to contain schema identity fields. The structure contains:",
            "Type": "dict",
            "Required": true,
            "dict variables": [
                {},
                {}
            ]
        },
        "FirstSchemaVersionNumber": {
            "Description": "The first of the two schema versions to be compared.",
            "Type": "dict",
            "Required": true,
            "dict variables": {}
        },
        "SecondSchemaVersionNumber": {
            "Description": "The second of the two schema versions to be compared.",
            "Type": "dict",
            "Required": true,
            "dict variables": {}
        },
        "SchemaDiffType": {
            "Description": "Refers to SYNTAX_DIFF, which is the currently supported diff type.",
            "Type": "string",
            "Required": true
        }
    },
    "get_security_configuration": {
        "Name": {
            "Description": "The name of the security configuration to retrieve.",
            "Type": "string",
            "Required": true
        }
    },
    "get_security_configurations": {
        "MaxResults": {
            "Description": "The maximum number of results to return.",
            "Type": "integer",
            "Required": false
        },
        "NextToken": {
            "Description": "A continuation token, if this is a continuation call.",
            "Type": "string",
            "Required": false
        }
    },
    "get_session": {
        "Id": {
            "Description": "The ID of the session.",
            "Type": "string",
            "Required": true
        },
        "RequestOrigin": {
            "Description": "The origin of the request.",
            "Type": "string",
            "Required": false
        }
    },
    "get_statement": {
        "SessionId": {
            "Description": "The Session ID of the statement.",
            "Type": "string",
            "Required": true
        },
        "Id": {
            "Description": "The Id of the statement.",
            "Type": "integer",
            "Required": true
        },
        "RequestOrigin": {
            "Description": "The origin of the request.",
            "Type": "string",
            "Required": false
        }
    },
    "get_table": {
        "CatalogId": {
            "Description": "The ID of the Data Catalog where the table resides. If none is provided, the Amazon Web Services account ID is used by default.",
            "Type": "string",
            "Required": false
        },
        "DatabaseName": {
            "Description": "The name of the database in the catalog in which the table resides. For Hive compatibility, this name is entirely lowercase.",
            "Type": "string",
            "Required": true
        },
        "Name": {
            "Description": "The name of the table for which to retrieve the definition. For Hive compatibility, this name is entirely lowercase.",
            "Type": "string",
            "Required": true
        },
        "TransactionId": {
            "Description": "The transaction ID at which to read the table contents.",
            "Type": "string",
            "Required": false
        },
        "QueryAsOfTime": {
            "Description": "The time as of when to read the table contents. If not set, the most recent transaction commit time will be used. Cannot be specified along with TransactionId .",
            "Type": "datetime",
            "Required": false
        }
    },
    "get_table_version": {
        "CatalogId": {
            "Description": "The ID of the Data Catalog where the tables reside. If none is provided, the Amazon Web Services account ID is used by default.",
            "Type": "string",
            "Required": false
        },
        "DatabaseName": {
            "Description": "The database in the catalog in which the table resides. For Hive compatibility, this name is entirely lowercase.",
            "Type": "string",
            "Required": true
        },
        "TableName": {
            "Description": "The name of the table. For Hive compatibility, this name is entirely lowercase.",
            "Type": "string",
            "Required": true
        },
        "VersionId": {
            "Description": "The ID value of the table version to be retrieved. A VersionID is a string representation of an integer. Each version is incremented by 1.",
            "Type": "string",
            "Required": false
        }
    },
    "get_table_versions": {
        "CatalogId": {
            "Description": "The ID of the Data Catalog where the tables reside. If none is provided, the Amazon Web Services account ID is used by default.",
            "Type": "string",
            "Required": false
        },
        "DatabaseName": {
            "Description": "The database in the catalog in which the table resides. For Hive compatibility, this name is entirely lowercase.",
            "Type": "string",
            "Required": true
        },
        "TableName": {
            "Description": "The name of the table. For Hive compatibility, this name is entirely lowercase.",
            "Type": "string",
            "Required": true
        },
        "NextToken": {
            "Description": "A continuation token, if this is not the first call.",
            "Type": "string",
            "Required": false
        },
        "MaxResults": {
            "Description": "The maximum number of table versions to return in one response.",
            "Type": "integer",
            "Required": false
        }
    },
    "get_tables": {
        "CatalogId": {
            "Description": "The ID of the Data Catalog where the tables reside. If none is provided, the Amazon Web Services account ID is used by default.",
            "Type": "string",
            "Required": false
        },
        "DatabaseName": {
            "Description": "The database in the catalog whose tables to list. For Hive compatibility, this name is entirely lowercase.",
            "Type": "string",
            "Required": true
        },
        "Expression": {
            "Description": "A regular expression pattern. If present, only those tables whose names match the pattern are returned.",
            "Type": "string",
            "Required": false
        },
        "NextToken": {
            "Description": "A continuation token, included if this is a continuation call.",
            "Type": "string",
            "Required": false
        },
        "MaxResults": {
            "Description": "The maximum number of tables to return in a single response.",
            "Type": "integer",
            "Required": false
        },
        "TransactionId": {
            "Description": "The transaction ID at which to read the table contents.",
            "Type": "string",
            "Required": false
        },
        "QueryAsOfTime": {
            "Description": "The time as of when to read the table contents. If not set, the most recent transaction commit time will be used. Cannot be specified along with TransactionId .",
            "Type": "datetime",
            "Required": false
        }
    },
    "get_tags": {
        "ResourceArn": {
            "Description": "The Amazon Resource Name (ARN) of the resource for which to retrieve tags.",
            "Type": "string",
            "Required": true
        }
    },
    "get_trigger": {
        "Name": {
            "Description": "The name of the trigger to retrieve.",
            "Type": "string",
            "Required": true
        }
    },
    "get_triggers": {
        "NextToken": {
            "Description": "A continuation token, if this is a continuation call.",
            "Type": "string",
            "Required": false
        },
        "DependentJobName": {
            "Description": "The name of the job to retrieve triggers for. The trigger that can start this job is returned, and if there is no such trigger, all triggers are returned.",
            "Type": "string",
            "Required": false
        },
        "MaxResults": {
            "Description": "The maximum size of the response.",
            "Type": "integer",
            "Required": false
        }
    },
    "get_unfiltered_partition_metadata": {
        "CatalogId": {
            "Description": "[REQUIRED]",
            "Type": "string",
            "Required": false
        },
        "DatabaseName": {
            "Description": "[REQUIRED]",
            "Type": "string",
            "Required": false
        },
        "TableName": {
            "Description": "[REQUIRED]",
            "Type": "string",
            "Required": false
        },
        "PartitionValues": {
            "Description": "[REQUIRED]\n\n(string) --\n\n",
            "Type": "list",
            "Required": true,
            "list variables": {}
        },
        "AuditContext": {
            "Description": "A structure containing information for audit.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "SupportedPermissionTypes": {
            "Description": "[REQUIRED]\n\n(string) --\n\n",
            "Type": "list",
            "Required": true,
            "list variables": {}
        }
    },
    "get_unfiltered_partitions_metadata": {
        "CatalogId": {
            "Description": "[REQUIRED]",
            "Type": "string",
            "Required": false
        },
        "DatabaseName": {
            "Description": "[REQUIRED]",
            "Type": "string",
            "Required": false
        },
        "TableName": {
            "Description": "[REQUIRED]",
            "Type": "string",
            "Required": false
        },
        "Expression": {
            "Description": "",
            "Type": "string",
            "Required": false
        },
        "AuditContext": {
            "Description": "A structure containing information for audit.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "SupportedPermissionTypes": {
            "Description": "[REQUIRED]\n\n(string) --\n\n",
            "Type": "list",
            "Required": true,
            "list variables": {}
        },
        "NextToken": {
            "Description": "",
            "Type": "string",
            "Required": false
        },
        "Segment": {
            "Description": "Defines a non-overlapping region of a table's partitions, allowing multiple requests to be run in parallel.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "MaxResults": {
            "Description": "",
            "Type": "integer",
            "Required": false
        }
    },
    "get_unfiltered_table_metadata": {
        "CatalogId": {
            "Description": "[REQUIRED]",
            "Type": "string",
            "Required": false
        },
        "DatabaseName": {
            "Description": "[REQUIRED]",
            "Type": "string",
            "Required": false
        },
        "Name": {
            "Description": "[REQUIRED]",
            "Type": "string",
            "Required": false
        },
        "AuditContext": {
            "Description": "A structure containing information for audit.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "SupportedPermissionTypes": {
            "Description": "[REQUIRED]\n\n(string) --\n\n",
            "Type": "list",
            "Required": true,
            "list variables": {}
        }
    },
    "get_user_defined_function": {
        "CatalogId": {
            "Description": "The ID of the Data Catalog where the function to be retrieved is located. If none is provided, the Amazon Web Services account ID is used by default.",
            "Type": "string",
            "Required": false
        },
        "DatabaseName": {
            "Description": "The name of the catalog database where the function is located.",
            "Type": "string",
            "Required": true
        },
        "FunctionName": {
            "Description": "The name of the function.",
            "Type": "string",
            "Required": true
        }
    },
    "get_user_defined_functions": {
        "CatalogId": {
            "Description": "The ID of the Data Catalog where the functions to be retrieved are located. If none is provided, the Amazon Web Services account ID is used by default.",
            "Type": "string",
            "Required": false
        },
        "DatabaseName": {
            "Description": "The name of the catalog database where the functions are located. If none is provided, functions from all the databases across the catalog will be returned.",
            "Type": "string",
            "Required": false
        },
        "Pattern": {
            "Description": "An optional function-name pattern string that filters the function definitions returned.",
            "Type": "string",
            "Required": true
        },
        "NextToken": {
            "Description": "A continuation token, if this is a continuation call.",
            "Type": "string",
            "Required": false
        },
        "MaxResults": {
            "Description": "The maximum number of functions to return in one response.",
            "Type": "integer",
            "Required": false
        }
    },
    "get_workflow": {
        "Name": {
            "Description": "The name of the workflow to retrieve.",
            "Type": "string",
            "Required": true
        },
        "IncludeGraph": {
            "Description": "Specifies whether to include a graph when returning the workflow resource metadata.",
            "Type": "boolean",
            "Required": false
        }
    },
    "get_workflow_run": {
        "Name": {
            "Description": "Name of the workflow being run.",
            "Type": "string",
            "Required": true
        },
        "RunId": {
            "Description": "The ID of the workflow run.",
            "Type": "string",
            "Required": true
        },
        "IncludeGraph": {
            "Description": "Specifies whether to include the workflow graph in response or not.",
            "Type": "boolean",
            "Required": false
        }
    },
    "get_workflow_run_properties": {
        "Name": {
            "Description": "Name of the workflow which was run.",
            "Type": "string",
            "Required": true
        },
        "RunId": {
            "Description": "The ID of the workflow run whose run properties should be returned.",
            "Type": "string",
            "Required": true
        }
    },
    "get_workflow_runs": {
        "Name": {
            "Description": "Name of the workflow whose metadata of runs should be returned.",
            "Type": "string",
            "Required": true
        },
        "IncludeGraph": {
            "Description": "Specifies whether to include the workflow graph in response or not.",
            "Type": "boolean",
            "Required": false
        },
        "NextToken": {
            "Description": "The maximum size of the response.",
            "Type": "string",
            "Required": false
        },
        "MaxResults": {
            "Description": "The maximum number of workflow runs to be included in the response.",
            "Type": "integer",
            "Required": false
        }
    },
    "import_catalog_to_glue": {
        "CatalogId": {
            "Description": "The ID of the catalog to import. Currently, this should be the Amazon Web Services account ID.",
            "Type": "string",
            "Required": false
        }
    },
    "list_blueprints": {
        "NextToken": {
            "Description": "A continuation token, if this is a continuation request.",
            "Type": "string",
            "Required": false
        },
        "MaxResults": {
            "Description": "The maximum size of a list to return.",
            "Type": "integer",
            "Required": false
        },
        "Tags": {
            "Description": "Filters the list by an Amazon Web Services resource tag.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        }
    },
    "list_crawlers": {
        "MaxResults": {
            "Description": "The maximum size of a list to return.",
            "Type": "integer",
            "Required": false
        },
        "NextToken": {
            "Description": "A continuation token, if this is a continuation request.",
            "Type": "string",
            "Required": false
        },
        "Tags": {
            "Description": "Specifies to return only these tagged resources.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        }
    },
    "list_crawls": {
        "CrawlerName": {
            "Description": "The name of the crawler whose runs you want to retrieve.",
            "Type": "string",
            "Required": true
        },
        "MaxResults": {
            "Description": "The maximum number of results to return. The default is 20, and maximum is 100.",
            "Type": "integer",
            "Required": false
        },
        "Filters": {
            "Description": "Filters the crawls by the criteria you specify in a list of CrawlsFilter objects.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "NextToken": {
            "Description": "A continuation token, if this is a continuation call.",
            "Type": "string",
            "Required": false
        }
    },
    "list_custom_entity_types": {
        "NextToken": {
            "Description": "A paginated token to offset the results.",
            "Type": "string",
            "Required": false
        },
        "MaxResults": {
            "Description": "The maximum number of results to return.",
            "Type": "integer",
            "Required": false
        }
    },
    "list_dev_endpoints": {
        "NextToken": {
            "Description": "A continuation token, if this is a continuation request.",
            "Type": "string",
            "Required": false
        },
        "MaxResults": {
            "Description": "The maximum size of a list to return.",
            "Type": "integer",
            "Required": false
        },
        "Tags": {
            "Description": "Specifies to return only these tagged resources.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        }
    },
    "list_jobs": {
        "NextToken": {
            "Description": "A continuation token, if this is a continuation request.",
            "Type": "string",
            "Required": false
        },
        "MaxResults": {
            "Description": "The maximum size of a list to return.",
            "Type": "integer",
            "Required": false
        },
        "Tags": {
            "Description": "Specifies to return only these tagged resources.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        }
    },
    "list_ml_transforms": {
        "NextToken": {
            "Description": "A continuation token, if this is a continuation request.",
            "Type": "string",
            "Required": false
        },
        "MaxResults": {
            "Description": "The maximum size of a list to return.",
            "Type": "integer",
            "Required": false
        },
        "Filter": {
            "Description": "A TransformFilterCriteria used to filter the machine learning transforms.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "Sort": {
            "Description": "A TransformSortCriteria used to sort the machine learning transforms.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "Tags": {
            "Description": "Specifies to return only these tagged resources.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        }
    },
    "list_registries": {
        "MaxResults": {
            "Description": "Maximum number of results required per page. If the value is not supplied, this will be defaulted to 25 per page.",
            "Type": "integer",
            "Required": false
        },
        "NextToken": {
            "Description": "A continuation token, if this is a continuation call.",
            "Type": "string",
            "Required": false
        }
    },
    "list_schema_versions": {
        "SchemaId": {
            "Description": "This is a wrapper structure to contain schema identity fields. The structure contains:",
            "Type": "dict",
            "Required": true,
            "dict variables": [
                {},
                {}
            ]
        },
        "MaxResults": {
            "Description": "Maximum number of results required per page. If the value is not supplied, this will be defaulted to 25 per page.",
            "Type": "integer",
            "Required": false
        },
        "NextToken": {
            "Description": "A continuation token, if this is a continuation call.",
            "Type": "string",
            "Required": false
        }
    },
    "list_schemas": {
        "RegistryId": {
            "Description": "A wrapper structure that may contain the registry name and Amazon Resource Name (ARN).",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "MaxResults": {
            "Description": "Maximum number of results required per page. If the value is not supplied, this will be defaulted to 25 per page.",
            "Type": "integer",
            "Required": false
        },
        "NextToken": {
            "Description": "A continuation token, if this is a continuation call.",
            "Type": "string",
            "Required": false
        }
    },
    "list_sessions": {
        "NextToken": {
            "Description": "The token for the next set of results, or null if there are no more result.",
            "Type": "string",
            "Required": false
        },
        "MaxResults": {
            "Description": "The maximum number of results.",
            "Type": "integer",
            "Required": false
        },
        "Tags": {
            "Description": "Tags belonging to the session.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "RequestOrigin": {
            "Description": "The origin of the request.",
            "Type": "string",
            "Required": false
        }
    },
    "list_statements": {
        "SessionId": {
            "Description": "The Session ID of the statements.",
            "Type": "string",
            "Required": true
        },
        "RequestOrigin": {
            "Description": "The origin of the request to list statements.",
            "Type": "string",
            "Required": false
        },
        "NextToken": {
            "Description": "A continuation token, if this is a continuation call.",
            "Type": "string",
            "Required": false
        }
    },
    "list_triggers": {
        "NextToken": {
            "Description": "A continuation token, if this is a continuation request.",
            "Type": "string",
            "Required": false
        },
        "DependentJobName": {
            "Description": "The name of the job for which to retrieve triggers. The trigger that can start this job is returned. If there is no such trigger, all triggers are returned.",
            "Type": "string",
            "Required": false
        },
        "MaxResults": {
            "Description": "The maximum size of a list to return.",
            "Type": "integer",
            "Required": false
        },
        "Tags": {
            "Description": "Specifies to return only these tagged resources.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        }
    },
    "list_workflows": {
        "NextToken": {
            "Description": "A continuation token, if this is a continuation request.",
            "Type": "string",
            "Required": false
        },
        "MaxResults": {
            "Description": "The maximum size of a list to return.",
            "Type": "integer",
            "Required": false
        }
    },
    "put_data_catalog_encryption_settings": {
        "CatalogId": {
            "Description": "The ID of the Data Catalog to set the security configuration for. If none is provided, the Amazon Web Services account ID is used by default.",
            "Type": "string",
            "Required": false
        },
        "DataCatalogEncryptionSettings": {
            "Description": "The security configuration to set.",
            "Type": "dict",
            "Required": true,
            "dict variables": {}
        }
    },
    "put_resource_policy": {
        "PolicyInJson": {
            "Description": "Contains the policy document to set, in JSON format.",
            "Type": "string",
            "Required": true
        },
        "ResourceArn": {
            "Description": "Do not use. For internal use only.",
            "Type": "string",
            "Required": false
        },
        "PolicyHashCondition": {
            "Description": "The hash value returned when the previous policy was set using PutResourcePolicy . Its purpose is to prevent concurrent modifications of a policy. Do not use this parameter if no previous policy has been set.",
            "Type": "string",
            "Required": false
        },
        "PolicyExistsCondition": {
            "Description": "A value of MUST_EXIST is used to update a policy. A value of NOT_EXIST is used to create a new policy. If a value of NONE or a null value is used, the call does not depend on the existence of a policy.",
            "Type": "string",
            "Required": false
        },
        "EnableHybrid": {
            "Description": "If 'TRUE', indicates that you are using both methods to grant cross-account access to Data Catalog resources:\nMust be set to 'TRUE' if you have already used the Management Console to grant cross-account access, otherwise the call fails. Default is 'FALSE'.",
            "Type": "string",
            "Required": false,
            "string variables": {}
        }
    },
    "put_schema_version_metadata": {
        "SchemaId": {
            "Description": "The unique ID for the schema.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "SchemaVersionNumber": {
            "Description": "The version number of the schema.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "SchemaVersionId": {
            "Description": "The unique version ID of the schema version.",
            "Type": "string",
            "Required": false
        },
        "MetadataKeyValue": {
            "Description": "The metadata key's corresponding value.",
            "Type": "dict",
            "Required": true,
            "dict variables": {}
        }
    },
    "put_workflow_run_properties": {
        "Name": {
            "Description": "Name of the workflow which was run.",
            "Type": "string",
            "Required": true
        },
        "RunId": {
            "Description": "The ID of the workflow run for which the run properties should be updated.",
            "Type": "string",
            "Required": true
        },
        "RunProperties": {
            "Description": "The properties to put for the specified run.",
            "Type": "dict",
            "Required": true,
            "dict variables": {}
        }
    },
    "query_schema_version_metadata": {
        "SchemaId": {
            "Description": "A wrapper structure that may contain the schema name and Amazon Resource Name (ARN).",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "SchemaVersionNumber": {
            "Description": "The version number of the schema.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "SchemaVersionId": {
            "Description": "The unique version ID of the schema version.",
            "Type": "string",
            "Required": false
        },
        "MetadataList": {
            "Description": "Search key-value pairs for metadata, if they are not provided all the metadata information will be fetched.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "MaxResults": {
            "Description": "Maximum number of results required per page. If the value is not supplied, this will be defaulted to 25 per page.",
            "Type": "integer",
            "Required": false
        },
        "NextToken": {
            "Description": "A continuation token, if this is a continuation call.",
            "Type": "string",
            "Required": false
        }
    },
    "register_schema_version": {
        "SchemaId": {
            "Description": "This is a wrapper structure to contain schema identity fields. The structure contains:",
            "Type": "dict",
            "Required": true,
            "dict variables": [
                {},
                {}
            ]
        },
        "SchemaDefinition": {
            "Description": "The schema definition using the DataFormat setting for the SchemaName .",
            "Type": "string",
            "Required": true
        }
    },
    "remove_schema_version_metadata": {
        "SchemaId": {
            "Description": "A wrapper structure that may contain the schema name and Amazon Resource Name (ARN).",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "SchemaVersionNumber": {
            "Description": "The version number of the schema.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "SchemaVersionId": {
            "Description": "The unique version ID of the schema version.",
            "Type": "string",
            "Required": false
        },
        "MetadataKeyValue": {
            "Description": "The value of the metadata key.",
            "Type": "dict",
            "Required": true,
            "dict variables": {}
        }
    },
    "reset_job_bookmark": {
        "JobName": {
            "Description": "The name of the job in question.",
            "Type": "string",
            "Required": true
        },
        "RunId": {
            "Description": "The unique run identifier associated with this job run.",
            "Type": "string",
            "Required": false
        }
    },
    "resume_workflow_run": {
        "Name": {
            "Description": "The name of the workflow to resume.",
            "Type": "string",
            "Required": true
        },
        "RunId": {
            "Description": "The ID of the workflow run to resume.",
            "Type": "string",
            "Required": true
        },
        "NodeIds": {
            "Description": "A list of the node IDs for the nodes you want to restart. The nodes that are to be restarted must have a run attempt in the original run.",
            "Type": "list",
            "Required": true,
            "list variables": {}
        }
    },
    "run_statement": {
        "SessionId": {
            "Description": "The Session Id of the statement to be run.",
            "Type": "string",
            "Required": true
        },
        "Code": {
            "Description": "The statement code to be run.",
            "Type": "string",
            "Required": true
        },
        "RequestOrigin": {
            "Description": "The origin of the request.",
            "Type": "string",
            "Required": false
        }
    },
    "search_tables": {
        "CatalogId": {
            "Description": "A unique identifier, consisting of `` account_id `` .",
            "Type": "string",
            "Required": false
        },
        "NextToken": {
            "Description": "A continuation token, included if this is a continuation call.",
            "Type": "string",
            "Required": false
        },
        "Filters": {
            "Description": "A list of key-value pairs, and a comparator used to filter the search results. Returns all entities matching the predicate.\nThe Comparator member of the PropertyPredicate struct is used only for time fields, and can be omitted for other field types. Also, when comparing string values, such as when Key=Name, a fuzzy match algorithm is used. The Key field (for example, the value of the Name field) is split on certain punctuation characters, for example, -, :, #, etc. into tokens. Then each token is exact-match compared with the Value member of PropertyPredicate. For example, if Key=Name and Value=link, tables named customer-link and xx-link-yy are returned, but xxlinkyy is not returned.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "SearchText": {
            "Description": "A string used for a text search.\nSpecifying a value in quotes filters based on an exact match to the value.",
            "Type": "string",
            "Required": false
        },
        "SortCriteria": {
            "Description": "A list of criteria for sorting the results by a field name, in an ascending or descending order.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "MaxResults": {
            "Description": "The maximum number of tables to return in a single response.",
            "Type": "integer",
            "Required": false
        },
        "ResourceShareType": {
            "Description": "Allows you to specify that you want to search the tables shared with your account. The allowable values are FOREIGN or ALL .",
            "Type": "string",
            "Required": false,
            "string variables": {}
        }
    },
    "start_blueprint_run": {
        "BlueprintName": {
            "Description": "The name of the blueprint.",
            "Type": "string",
            "Required": true
        },
        "Parameters": {
            "Description": "Specifies the parameters as a BlueprintParameters object.",
            "Type": "string",
            "Required": false
        },
        "RoleArn": {
            "Description": "Specifies the IAM role used to create the workflow.",
            "Type": "string",
            "Required": true
        }
    },
    "start_crawler": {
        "Name": {
            "Description": "Name of the crawler to start.",
            "Type": "string",
            "Required": true
        }
    },
    "start_crawler_schedule": {
        "CrawlerName": {
            "Description": "Name of the crawler to schedule.",
            "Type": "string",
            "Required": true
        }
    },
    "start_export_labels_task_run": {
        "TransformId": {
            "Description": "The unique identifier of the machine learning transform.",
            "Type": "string",
            "Required": true
        },
        "OutputS3Path": {
            "Description": "The Amazon S3 path where you export the labels.",
            "Type": "string",
            "Required": true
        }
    },
    "start_import_labels_task_run": {
        "TransformId": {
            "Description": "The unique identifier of the machine learning transform.",
            "Type": "string",
            "Required": true
        },
        "InputS3Path": {
            "Description": "The Amazon Simple Storage Service (Amazon S3) path from where you import the labels.",
            "Type": "string",
            "Required": true
        },
        "ReplaceAllLabels": {
            "Description": "Indicates whether to overwrite your existing labels.",
            "Type": "boolean",
            "Required": false
        }
    },
    "start_job_run": {
        "JobName": {
            "Description": "The name of the job definition to use.",
            "Type": "string",
            "Required": true
        },
        "JobRunId": {
            "Description": "The ID of a previous JobRun to retry.",
            "Type": "string",
            "Required": false
        },
        "Arguments": {
            "Description": "The job arguments specifically for this run. For this job run, they replace the default arguments set in the job definition itself.\nYou can specify arguments here that your own job-execution script consumes, as well as arguments that Glue itself consumes.\nJob arguments may be logged. Do not pass plaintext secrets as arguments. Retrieve secrets from a Glue Connection, Secrets Manager or other secret management mechanism if you intend to keep them within the Job.\nFor information about how to specify and consume your own Job arguments, see the Calling Glue APIs in Python topic in the developer guide.\nFor information about the key-value pairs that Glue consumes to set up your job, see the Special Parameters Used by Glue topic in the developer guide.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "AllocatedCapacity": {
            "Description": "This field is deprecated. Use MaxCapacity instead.\nThe number of Glue data processing units (DPUs) to allocate to this JobRun. You can allocate a minimum of 2 DPUs; the default is 10. A DPU is a relative measure of processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory. For more information, see the Glue pricing page .",
            "Type": "integer",
            "Required": false
        },
        "Timeout": {
            "Description": "The JobRun timeout in minutes. This is the maximum time that a job run can consume resources before it is terminated and enters TIMEOUT status. This value overrides the timeout value set in the parent job.\nStreaming jobs do not have a timeout. The default for non-streaming jobs is 2,880 minutes (48 hours).",
            "Type": "integer",
            "Required": false
        },
        "MaxCapacity": {
            "Description": "The number of Glue data processing units (DPUs) that can be allocated when this job runs. A DPU is a relative measure of processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory. For more information, see the Glue pricing page .\nDo not set Max Capacity if using WorkerType and NumberOfWorkers .\nThe value that can be allocated for MaxCapacity depends on whether you are running a Python shell job, or an Apache Spark ETL job:",
            "Type": "float",
            "Required": false,
            "float variables": {}
        },
        "SecurityConfiguration": {
            "Description": "The name of the SecurityConfiguration structure to be used with this job run.",
            "Type": "string",
            "Required": false
        },
        "NotificationProperty": {
            "Description": "Specifies configuration properties of a job run notification.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "WorkerType": {
            "Description": "The type of predefined worker that is allocated when a job runs. Accepts a value of Standard, G.1X, G.2X, or G.025X.",
            "Type": "string",
            "Required": false,
            "string variables": {}
        },
        "NumberOfWorkers": {
            "Description": "The number of workers of a defined workerType that are allocated when a job runs.",
            "Type": "integer",
            "Required": false
        },
        "ExecutionClass": {
            "Description": "Indicates whether the job is run with a standard or flexible execution class. The standard execution-class is ideal for time-sensitive workloads that require fast job startup and dedicated resources.\nThe flexible execution class is appropriate for time-insensitive jobs whose start and completion times may vary.\nOnly jobs with Glue version 3.0 and above and command type glueetl will be allowed to set ExecutionClass to FLEX. The flexible execution class is available for Spark jobs.",
            "Type": "string",
            "Required": false
        }
    },
    "start_ml_evaluation_task_run": {
        "TransformId": {
            "Description": "The unique identifier of the machine learning transform.",
            "Type": "string",
            "Required": true
        }
    },
    "start_ml_labeling_set_generation_task_run": {
        "TransformId": {
            "Description": "The unique identifier of the machine learning transform.",
            "Type": "string",
            "Required": true
        },
        "OutputS3Path": {
            "Description": "The Amazon Simple Storage Service (Amazon S3) path where you generate the labeling set.",
            "Type": "string",
            "Required": true
        }
    },
    "start_trigger": {
        "Name": {
            "Description": "The name of the trigger to start.",
            "Type": "string",
            "Required": true
        }
    },
    "start_workflow_run": {
        "Name": {
            "Description": "The name of the workflow to start.",
            "Type": "string",
            "Required": true
        },
        "RunProperties": {
            "Description": "The workflow run properties for the new workflow run.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        }
    },
    "stop_crawler": {
        "Name": {
            "Description": "Name of the crawler to stop.",
            "Type": "string",
            "Required": true
        }
    },
    "stop_crawler_schedule": {
        "CrawlerName": {
            "Description": "Name of the crawler whose schedule state to set.",
            "Type": "string",
            "Required": true
        }
    },
    "stop_session": {
        "Id": {
            "Description": "The ID of the session to be stopped.",
            "Type": "string",
            "Required": true
        },
        "RequestOrigin": {
            "Description": "The origin of the request.",
            "Type": "string",
            "Required": false
        }
    },
    "stop_trigger": {
        "Name": {
            "Description": "The name of the trigger to stop.",
            "Type": "string",
            "Required": true
        }
    },
    "stop_workflow_run": {
        "Name": {
            "Description": "The name of the workflow to stop.",
            "Type": "string",
            "Required": true
        },
        "RunId": {
            "Description": "The ID of the workflow run to stop.",
            "Type": "string",
            "Required": true
        }
    },
    "tag_resource": {
        "ResourceArn": {
            "Description": "The ARN of the Glue resource to which to add the tags. For more information about Glue resource ARNs, see the Glue ARN string pattern .",
            "Type": "string",
            "Required": true
        },
        "TagsToAdd": {
            "Description": "Tags to add to this resource.",
            "Type": "dict",
            "Required": true,
            "dict variables": {}
        }
    },
    "untag_resource": {
        "ResourceArn": {
            "Description": "The Amazon Resource Name (ARN) of the resource from which to remove the tags.",
            "Type": "string",
            "Required": true
        },
        "TagsToRemove": {
            "Description": "Tags to remove from this resource.",
            "Type": "list",
            "Required": true,
            "list variables": {}
        }
    },
    "update_blueprint": {
        "Name": {
            "Description": "The name of the blueprint.",
            "Type": "string",
            "Required": true
        },
        "Description": {
            "Description": "A description of the blueprint.",
            "Type": "string",
            "Required": false
        },
        "BlueprintLocation": {
            "Description": "Specifies a path in Amazon S3 where the blueprint is published.",
            "Type": "string",
            "Required": true
        }
    },
    "update_classifier": {
        "GrokClassifier": {
            "Description": "A GrokClassifier object with updated fields.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "XMLClassifier": {
            "Description": "An XMLClassifier object with updated fields.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "JsonClassifier": {
            "Description": "A JsonClassifier object with updated fields.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "CsvClassifier": {
            "Description": "A CsvClassifier object with updated fields.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        }
    },
    "update_column_statistics_for_partition": {
        "CatalogId": {
            "Description": "The ID of the Data Catalog where the partitions in question reside. If none is supplied, the Amazon Web Services account ID is used by default.",
            "Type": "string",
            "Required": false
        },
        "DatabaseName": {
            "Description": "The name of the catalog database where the partitions reside.",
            "Type": "string",
            "Required": true
        },
        "TableName": {
            "Description": "The name of the partitions' table.",
            "Type": "string",
            "Required": true
        },
        "PartitionValues": {
            "Description": "A list of partition values identifying the partition.",
            "Type": "list",
            "Required": true,
            "list variables": {}
        },
        "ColumnStatisticsList": {
            "Description": "A list of the column statistics.",
            "Type": "list",
            "Required": true,
            "list variables": {}
        }
    },
    "update_column_statistics_for_table": {
        "CatalogId": {
            "Description": "The ID of the Data Catalog where the partitions in question reside. If none is supplied, the Amazon Web Services account ID is used by default.",
            "Type": "string",
            "Required": false
        },
        "DatabaseName": {
            "Description": "The name of the catalog database where the partitions reside.",
            "Type": "string",
            "Required": true
        },
        "TableName": {
            "Description": "The name of the partitions' table.",
            "Type": "string",
            "Required": true
        },
        "ColumnStatisticsList": {
            "Description": "A list of the column statistics.",
            "Type": "list",
            "Required": true,
            "list variables": {}
        }
    },
    "update_connection": {
        "CatalogId": {
            "Description": "The ID of the Data Catalog in which the connection resides. If none is provided, the Amazon Web Services account ID is used by default.",
            "Type": "string",
            "Required": false
        },
        "Name": {
            "Description": "The name of the connection definition to update.",
            "Type": "string",
            "Required": true
        },
        "ConnectionInput": {
            "Description": "A ConnectionInput object that redefines the connection in question.",
            "Type": "dict",
            "Required": true,
            "dict variables": {}
        }
    },
    "update_crawler": {
        "Name": {
            "Description": "Name of the new crawler.",
            "Type": "string",
            "Required": true
        },
        "Role": {
            "Description": "The IAM role or Amazon Resource Name (ARN) of an IAM role that is used by the new crawler to access customer resources.",
            "Type": "string",
            "Required": false
        },
        "DatabaseName": {
            "Description": "The Glue database where results are stored, such as: arn:aws:daylight:us-east-1::database/sometable/* .",
            "Type": "string",
            "Required": false
        },
        "Description": {
            "Description": "A description of the new crawler.",
            "Type": "string",
            "Required": false
        },
        "Targets": {
            "Description": "A list of targets to crawl.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "Schedule": {
            "Description": "A cron expression used to specify the schedule (see Time-Based Schedules for Jobs and Crawlers . For example, to run something every day at 12:15 UTC, you would specify: cron(15 12 * * ? *) .",
            "Type": "string",
            "Required": false
        },
        "Classifiers": {
            "Description": "A list of custom classifiers that the user has registered. By default, all built-in classifiers are included in a crawl, but these custom classifiers always override the default classifiers for a given classification.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "TablePrefix": {
            "Description": "The table prefix used for catalog tables that are created.",
            "Type": "string",
            "Required": false
        },
        "SchemaChangePolicy": {
            "Description": "The policy for the crawler's update and deletion behavior.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "RecrawlPolicy": {
            "Description": "A policy that specifies whether to crawl the entire dataset again, or to crawl only folders that were added since the last crawler run.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "LineageConfiguration": {
            "Description": "Specifies data lineage configuration settings for the crawler.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "LakeFormationConfiguration": {
            "Description": "Specifies Lake Formation configuration settings for the crawler.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "Configuration": {
            "Description": "Crawler configuration information. This versioned JSON string allows users to specify aspects of a crawler's behavior. For more information, see Configuring a Crawler .",
            "Type": "string",
            "Required": false
        },
        "CrawlerSecurityConfiguration": {
            "Description": "The name of the SecurityConfiguration structure to be used by this crawler.",
            "Type": "string",
            "Required": false
        }
    },
    "update_crawler_schedule": {
        "CrawlerName": {
            "Description": "The name of the crawler whose schedule to update.",
            "Type": "string",
            "Required": true
        },
        "Schedule": {
            "Description": "The updated cron expression used to specify the schedule (see Time-Based Schedules for Jobs and Crawlers . For example, to run something every day at 12:15 UTC, you would specify: cron(15 12 * * ? *) .",
            "Type": "string",
            "Required": false
        }
    },
    "update_database": {
        "CatalogId": {
            "Description": "The ID of the Data Catalog in which the metadata database resides. If none is provided, the Amazon Web Services account ID is used by default.",
            "Type": "string",
            "Required": false
        },
        "Name": {
            "Description": "The name of the database to update in the catalog. For Hive compatibility, this is folded to lowercase.",
            "Type": "string",
            "Required": true
        },
        "DatabaseInput": {
            "Description": "A DatabaseInput object specifying the new definition of the metadata database in the catalog.",
            "Type": "dict",
            "Required": true,
            "dict variables": {}
        }
    },
    "update_dev_endpoint": {
        "EndpointName": {
            "Description": "The name of the DevEndpoint to be updated.",
            "Type": "string",
            "Required": true
        },
        "PublicKey": {
            "Description": "The public key for the DevEndpoint to use.",
            "Type": "string",
            "Required": false
        },
        "AddPublicKeys": {
            "Description": "The list of public keys for the DevEndpoint to use.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "DeletePublicKeys": {
            "Description": "The list of public keys to be deleted from the DevEndpoint .",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "CustomLibraries": {
            "Description": "Custom Python or Java libraries to be loaded in the DevEndpoint .",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "UpdateEtlLibraries": {
            "Description": "True if the list of custom libraries to be loaded in the development endpoint needs to be updated, or False if otherwise.",
            "Type": "boolean",
            "Required": false
        },
        "DeleteArguments": {
            "Description": "The list of argument keys to be deleted from the map of arguments used to configure the DevEndpoint .",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "AddArguments": {
            "Description": "The map of arguments to add the map of arguments used to configure the DevEndpoint .\nValid arguments are:\nYou can specify a version of Python support for development endpoints by using the Arguments parameter in the CreateDevEndpoint or UpdateDevEndpoint APIs. If no arguments are provided, the version defaults to Python 2.",
            "Type": "dict",
            "Required": false,
            "dict variables": [
                {},
                {}
            ]
        }
    },
    "update_job": {
        "JobName": {
            "Description": "The name of the job definition to update.",
            "Type": "string",
            "Required": true
        },
        "JobUpdate": {
            "Description": "Specifies the values with which to update the job definition. Unspecified configuration is removed or reset to default values.",
            "Type": "dict",
            "Required": true,
            "dict variables": {}
        }
    },
    "update_ml_transform": {
        "TransformId": {
            "Description": "A unique identifier that was generated when the transform was created.",
            "Type": "string",
            "Required": true
        },
        "Name": {
            "Description": "The unique name that you gave the transform when you created it.",
            "Type": "string",
            "Required": false
        },
        "Description": {
            "Description": "A description of the transform. The default is an empty string.",
            "Type": "string",
            "Required": false
        },
        "Parameters": {
            "Description": "The configuration parameters that are specific to the transform type (algorithm) used. Conditionally dependent on the transform type.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "Role": {
            "Description": "The name or Amazon Resource Name (ARN) of the IAM role with the required permissions.",
            "Type": "string",
            "Required": false
        },
        "GlueVersion": {
            "Description": "This value determines which version of Glue this machine learning transform is compatible with. Glue 1.0 is recommended for most customers. If the value is not set, the Glue compatibility defaults to Glue 0.9. For more information, see Glue Versions in the developer guide.",
            "Type": "string",
            "Required": false
        },
        "MaxCapacity": {
            "Description": "The number of Glue data processing units (DPUs) that are allocated to task runs for this transform. You can allocate from 2 to 100 DPUs; the default is 10. A DPU is a relative measure of processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory. For more information, see the Glue pricing page .\nWhen the WorkerType field is set to a value other than Standard, the MaxCapacity field is set automatically and becomes read-only.",
            "Type": "float",
            "Required": false
        },
        "WorkerType": {
            "Description": "The type of predefined worker that is allocated when this task runs. Accepts a value of Standard, G.1X, or G.2X.",
            "Type": "string",
            "Required": false,
            "string variables": {}
        },
        "NumberOfWorkers": {
            "Description": "The number of workers of a defined workerType that are allocated when this task runs.",
            "Type": "integer",
            "Required": false
        },
        "Timeout": {
            "Description": "The timeout for a task run for this transform in minutes. This is the maximum time that a task run for this transform can consume resources before it is terminated and enters TIMEOUT status. The default is 2,880 minutes (48 hours).",
            "Type": "integer",
            "Required": false
        },
        "MaxRetries": {
            "Description": "The maximum number of times to retry a task for this transform after a task run fails.",
            "Type": "integer",
            "Required": false
        }
    },
    "update_partition": {
        "CatalogId": {
            "Description": "The ID of the Data Catalog where the partition to be updated resides. If none is provided, the Amazon Web Services account ID is used by default.",
            "Type": "string",
            "Required": false
        },
        "DatabaseName": {
            "Description": "The name of the catalog database in which the table in question resides.",
            "Type": "string",
            "Required": true
        },
        "TableName": {
            "Description": "The name of the table in which the partition to be updated is located.",
            "Type": "string",
            "Required": true
        },
        "PartitionValueList": {
            "Description": "List of partition key values that define the partition to update.",
            "Type": "list",
            "Required": true,
            "list variables": {}
        },
        "PartitionInput": {
            "Description": "The new partition object to update the partition to.\nThe Values property can't be changed. If you want to change the partition key values for a partition, delete and recreate the partition.",
            "Type": "dict",
            "Required": true,
            "dict variables": {}
        }
    },
    "update_registry": {
        "RegistryId": {
            "Description": "This is a wrapper structure that may contain the registry name and Amazon Resource Name (ARN).",
            "Type": "dict",
            "Required": true,
            "dict variables": {}
        },
        "Description": {
            "Description": "A description of the registry. If description is not provided, this field will not be updated.",
            "Type": "string",
            "Required": true
        }
    },
    "update_schema": {
        "SchemaId": {
            "Description": "This is a wrapper structure to contain schema identity fields. The structure contains:",
            "Type": "dict",
            "Required": true,
            "dict variables": [
                {},
                {}
            ]
        },
        "SchemaVersionNumber": {
            "Description": "Version number required for check pointing. One of VersionNumber or Compatibility has to be provided.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "Compatibility": {
            "Description": "The new compatibility setting for the schema.",
            "Type": "string",
            "Required": false
        },
        "Description": {
            "Description": "The new description for the schema.",
            "Type": "string",
            "Required": false
        }
    },
    "update_table": {
        "CatalogId": {
            "Description": "The ID of the Data Catalog where the table resides. If none is provided, the Amazon Web Services account ID is used by default.",
            "Type": "string",
            "Required": false
        },
        "DatabaseName": {
            "Description": "The name of the catalog database in which the table resides. For Hive compatibility, this name is entirely lowercase.",
            "Type": "string",
            "Required": true
        },
        "TableInput": {
            "Description": "An updated TableInput object to define the metadata table in the catalog.",
            "Type": "dict",
            "Required": true,
            "dict variables": {}
        },
        "SkipArchive": {
            "Description": "By default, UpdateTable always creates an archived version of the table before updating it. However, if skipArchive is set to true, UpdateTable does not create the archived version.",
            "Type": "boolean",
            "Required": false
        },
        "TransactionId": {
            "Description": "The transaction ID at which to update the table contents.",
            "Type": "string",
            "Required": false
        },
        "VersionId": {
            "Description": "The version ID at which to update the table contents.",
            "Type": "string",
            "Required": false
        }
    },
    "update_trigger": {
        "Name": {
            "Description": "The name of the trigger to update.",
            "Type": "string",
            "Required": true
        },
        "TriggerUpdate": {
            "Description": "The new values with which to update the trigger.",
            "Type": "dict",
            "Required": true,
            "dict variables": {}
        }
    },
    "update_user_defined_function": {
        "CatalogId": {
            "Description": "The ID of the Data Catalog where the function to be updated is located. If none is provided, the Amazon Web Services account ID is used by default.",
            "Type": "string",
            "Required": false
        },
        "DatabaseName": {
            "Description": "The name of the catalog database where the function to be updated is located.",
            "Type": "string",
            "Required": true
        },
        "FunctionName": {
            "Description": "The name of the function.",
            "Type": "string",
            "Required": true
        },
        "FunctionInput": {
            "Description": "A FunctionInput object that redefines the function in the Data Catalog.",
            "Type": "dict",
            "Required": true,
            "dict variables": {}
        }
    },
    "update_workflow": {
        "Name": {
            "Description": "Name of the workflow to be updated.",
            "Type": "string",
            "Required": true
        },
        "Description": {
            "Description": "The description of the workflow.",
            "Type": "string",
            "Required": false
        },
        "DefaultRunProperties": {
            "Description": "A collection of properties to be used as part of each execution of the workflow.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "MaxConcurrentRuns": {
            "Description": "You can use this parameter to prevent unwanted multiple updates to data, to control costs, or in some cases, to prevent exceeding the maximum number of concurrent runs of any of the component jobs. If you leave this parameter blank, there is no limit to the number of concurrent workflow runs.",
            "Type": "integer",
            "Required": false
        }
    },
    "paginate": {
        "RegistryId": {
            "Description": "A wrapper structure that may contain the registry name and Amazon Resource Name (ARN).",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "PaginationConfig": {
            "Description": "A dictionary that provides parameters to control pagination.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        }
    }
}