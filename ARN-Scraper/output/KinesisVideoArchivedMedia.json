{
    "get_clip": {
        "StreamName": {
            "Description": "The name of the stream for which to retrieve the media clip.\nYou must specify either the StreamName or the StreamARN.",
            "Type": "string",
            "Required": false
        },
        "StreamARN": {
            "Description": "The Amazon Resource Name (ARN) of the stream for which to retrieve the media clip.\nYou must specify either the StreamName or the StreamARN.",
            "Type": "string",
            "Required": false
        },
        "ClipFragmentSelector": {
            "Description": "The time range of the requested clip and the source of the timestamps.",
            "Type": "dict",
            "Required": true,
            "dict variables": {}
        }
    },
    "get_dash_streaming_session_url": {
        "StreamName": {
            "Description": "The name of the stream for which to retrieve the MPEG-DASH manifest URL.\nYou must specify either the StreamName or the StreamARN .",
            "Type": "string",
            "Required": false
        },
        "StreamARN": {
            "Description": "The Amazon Resource Name (ARN) of the stream for which to retrieve the MPEG-DASH manifest URL.\nYou must specify either the StreamName or the StreamARN .",
            "Type": "string",
            "Required": false
        },
        "PlaybackMode": {
            "Description": "Whether to retrieve live, live replay, or archived, on-demand data.\nFeatures of the three types of sessions include the following:\nIn all playback modes, if FragmentSelectorType is PRODUCER_TIMESTAMP, and if there are multiple fragments with the same start timestamp, the fragment that has the larger fragment number (that is, the newer fragment) is included in the MPEG-DASH manifest. The other fragments are not included. Fragments that have different timestamps but have overlapping durations are still included in the MPEG-DASH manifest. This can lead to unexpected behavior in the media player.\nThe default is LIVE .",
            "Type": "string",
            "Required": false,
            "string variables": [
                {},
                {}
            ]
        },
        "DisplayFragmentTimestamp": {
            "Description": "Per the MPEG-DASH specification, the wall-clock time of fragments in the manifest file can be derived using attributes in the manifest itself. However, typically, MPEG-DASH compatible media players do not properly handle gaps in the media timeline. Kinesis Video Streams adjusts the media timeline in the manifest file to enable playback of media with discontinuities. Therefore, the wall-clock time derived from the manifest file may be inaccurate. If DisplayFragmentTimestamp is set to ALWAYS, the accurate fragment timestamp is added to each S element in the manifest file with the attribute name \u201ckvs:ts\u201d. A custom MPEG-DASH media player is necessary to leverage this custom attribute.\nThe default value is NEVER. When  DASHFragmentSelector is SERVER_TIMESTAMP, the timestamps will be the server start timestamps. Similarly, when  DASHFragmentSelector is PRODUCER_TIMESTAMP, the timestamps will be the producer start timestamps.",
            "Type": "string",
            "Required": false
        },
        "DisplayFragmentNumber": {
            "Description": "Fragments are identified in the manifest file based on their sequence number in the session. If DisplayFragmentNumber is set to ALWAYS, the Kinesis Video Streams fragment number is added to each S element in the manifest file with the attribute name \u201ckvs:fn\u201d. These fragment numbers can be used for logging or for use with other APIs (e.g. GetMedia and GetMediaForFragmentList ). A custom MPEG-DASH media player is necessary to leverage these this custom attribute.\nThe default value is NEVER .",
            "Type": "string",
            "Required": false
        },
        "DASHFragmentSelector": {
            "Description": "The time range of the requested fragment and the source of the timestamps.\nThis parameter is required if PlaybackMode is ON_DEMAND or LIVE_REPLAY. This parameter is optional if PlaybackMode is LIVE. If PlaybackMode is LIVE, the FragmentSelectorType can be set, but the TimestampRange should not be set. If PlaybackMode is ON_DEMAND or LIVE_REPLAY, both FragmentSelectorType and TimestampRange must be set.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "Expires": {
            "Description": "The time in seconds until the requested session expires. This value can be between 300 (5 minutes) and 43200 (12 hours).\nWhen a session expires, no new calls to GetDashManifest, GetMP4InitFragment, or GetMP4MediaFragment can be made for that session.\nThe default is 300 (5 minutes).",
            "Type": "integer",
            "Required": false
        },
        "MaxManifestFragmentResults": {
            "Description": "The maximum number of fragments that are returned in the MPEG-DASH manifest.\nWhen the PlaybackMode is LIVE, the most recent fragments are returned up to this value. When the PlaybackMode is ON_DEMAND, the oldest fragments are returned, up to this maximum number.\nWhen there are a higher number of fragments available in a live MPEG-DASH manifest, video players often buffer content before starting playback. Increasing the buffer size increases the playback latency, but it decreases the likelihood that rebuffering will occur during playback. We recommend that a live MPEG-DASH manifest have a minimum of 3 fragments and a maximum of 10 fragments.\nThe default is 5 fragments if PlaybackMode is LIVE or LIVE_REPLAY, and 1,000 if PlaybackMode is ON_DEMAND .\nThe maximum value of 1,000 fragments corresponds to more than 16 minutes of video on streams with 1-second fragments, and more than 2 1/2 hours of video on streams with 10-second fragments.",
            "Type": "integer",
            "Required": false
        }
    },
    "get_hls_streaming_session_url": {
        "StreamName": {
            "Description": "The name of the stream for which to retrieve the HLS master playlist URL.\nYou must specify either the StreamName or the StreamARN .",
            "Type": "string",
            "Required": false
        },
        "StreamARN": {
            "Description": "The Amazon Resource Name (ARN) of the stream for which to retrieve the HLS master playlist URL.\nYou must specify either the StreamName or the StreamARN .",
            "Type": "string",
            "Required": false
        },
        "PlaybackMode": {
            "Description": "Whether to retrieve live, live replay, or archived, on-demand data.\nFeatures of the three types of sessions include the following:\nIn all playback modes, if FragmentSelectorType is PRODUCER_TIMESTAMP, and if there are multiple fragments with the same start timestamp, the fragment that has the largest fragment number (that is, the newest fragment) is included in the HLS media playlist. The other fragments are not included. Fragments that have different timestamps but have overlapping durations are still included in the HLS media playlist. This can lead to unexpected behavior in the media player.\nThe default is LIVE .",
            "Type": "string",
            "Required": false,
            "string variables": [
                {},
                {}
            ]
        },
        "HLSFragmentSelector": {
            "Description": "The time range of the requested fragment and the source of the timestamps.\nThis parameter is required if PlaybackMode is ON_DEMAND or LIVE_REPLAY. This parameter is optional if PlaybackMode is LIVE. If PlaybackMode is LIVE, the FragmentSelectorType can be set, but the TimestampRange should not be set. If PlaybackMode is ON_DEMAND or LIVE_REPLAY, both FragmentSelectorType and TimestampRange must be set.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "ContainerFormat": {
            "Description": "Specifies which format should be used for packaging the media. Specifying the FRAGMENTED_MP4 container format packages the media into MP4 fragments (fMP4 or CMAF). This is the recommended packaging because there is minimal packaging overhead. The other container format option is MPEG_TS. HLS has supported MPEG TS chunks since it was released and is sometimes the only supported packaging on older HLS players. MPEG TS typically has a 5-25 percent packaging overhead. This means MPEG TS typically requires 5-25 percent more bandwidth and cost than fMP4.\nThe default is FRAGMENTED_MP4 .",
            "Type": "string",
            "Required": false
        },
        "DiscontinuityMode": {
            "Description": "Specifies when flags marking discontinuities between fragments are added to the media playlists.\nMedia players typically build a timeline of media content to play, based on the timestamps of each fragment. This means that if there is any overlap or gap between fragments (as is typical if  HLSFragmentSelector is set to SERVER_TIMESTAMP ), the media player timeline will also have small gaps between fragments in some places, and will overwrite frames in other places. Gaps in the media player timeline can cause playback to stall and overlaps can cause playback to be jittery. When there are discontinuity flags between fragments, the media player is expected to reset the timeline, resulting in the next fragment being played immediately after the previous fragment.\nThe following modes are supported:\nThe default is ALWAYS when  HLSFragmentSelector is set to SERVER_TIMESTAMP, and NEVER when it is set to PRODUCER_TIMESTAMP .",
            "Type": "string",
            "Required": false,
            "string variables": {}
        },
        "DisplayFragmentTimestamp": {
            "Description": "Specifies when the fragment start timestamps should be included in the HLS media playlist. Typically, media players report the playhead position as a time relative to the start of the first fragment in the playback session. However, when the start timestamps are included in the HLS media playlist, some media players might report the current playhead as an absolute time based on the fragment timestamps. This can be useful for creating a playback experience that shows viewers the wall-clock time of the media.\nThe default is NEVER. When  HLSFragmentSelector is SERVER_TIMESTAMP, the timestamps will be the server start timestamps. Similarly, when  HLSFragmentSelector is PRODUCER_TIMESTAMP, the timestamps will be the producer start timestamps.",
            "Type": "string",
            "Required": false
        },
        "Expires": {
            "Description": "The time in seconds until the requested session expires. This value can be between 300 (5 minutes) and 43200 (12 hours).\nWhen a session expires, no new calls to GetHLSMasterPlaylist, GetHLSMediaPlaylist, GetMP4InitFragment, GetMP4MediaFragment, or GetTSFragment can be made for that session.\nThe default is 300 (5 minutes).",
            "Type": "integer",
            "Required": false
        },
        "MaxMediaPlaylistFragmentResults": {
            "Description": "The maximum number of fragments that are returned in the HLS media playlists.\nWhen the PlaybackMode is LIVE, the most recent fragments are returned up to this value. When the PlaybackMode is ON_DEMAND, the oldest fragments are returned, up to this maximum number.\nWhen there are a higher number of fragments available in a live HLS media playlist, video players often buffer content before starting playback. Increasing the buffer size increases the playback latency, but it decreases the likelihood that rebuffering will occur during playback. We recommend that a live HLS media playlist have a minimum of 3 fragments and a maximum of 10 fragments.\nThe default is 5 fragments if PlaybackMode is LIVE or LIVE_REPLAY, and 1,000 if PlaybackMode is ON_DEMAND .\nThe maximum value of 5,000 fragments corresponds to more than 80 minutes of video on streams with 1-second fragments, and more than 13 hours of video on streams with 10-second fragments.",
            "Type": "integer",
            "Required": false
        }
    },
    "get_images": {
        "StreamName": {
            "Description": "The name of the stream from which to retrieve the images. You must specify either the StreamName or the StreamARN .",
            "Type": "string",
            "Required": false
        },
        "StreamARN": {
            "Description": "The Amazon Resource Name (ARN) of the stream from which to retrieve the images. You must specify either the StreamName or the StreamARN .",
            "Type": "string",
            "Required": false
        },
        "ImageSelectorType": {
            "Description": "The origin of the Server or Producer timestamps to use to generate the images.",
            "Type": "string",
            "Required": true
        },
        "StartTimestamp": {
            "Description": "The starting point from which the images should be generated. This StartTimestamp must be within an inclusive range of timestamps for an image to be returned.",
            "Type": "datetime",
            "Required": true
        },
        "EndTimestamp": {
            "Description": "The end timestamp for the range of images to be generated.",
            "Type": "datetime",
            "Required": true
        },
        "SamplingInterval": {
            "Description": "The time interval in milliseconds (ms) at which the images need to be generated from the stream. The minimum value that can be provided is 3000 ms. If the timestamp range is less than the sampling interval, the Image from the startTimestamp will be returned if available.",
            "Type": "integer",
            "Required": true
        },
        "Format": {
            "Description": "The format that will be used to encode the image.",
            "Type": "string",
            "Required": true
        },
        "FormatConfig": {
            "Description": "The list of a key-value pair structure that contains extra parameters that can be applied when the image is generated. The FormatConfig key is the JPEGQuality, which indicates the JPEG quality key to be used to generate the image. The FormatConfig value accepts ints from 1 to 100. If the value is 1, the image will be generated with less quality and the best compression. If the value is 100, the image will be generated with the best quality and less compression. If no value is provided, the default value of the JPEGQuality key will be set to 80.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "WidthPixels": {
            "Description": "The width of the output image that is used in conjunction with the HeightPixels parameter. When both WidthPixels and HeightPixels parameters are provided, the image will be stretched to fit the specified aspect ratio. If only the WidthPixels parameter is provided or if only the HeightPixels is provided, a ValidationException will be thrown. If neither parameter is provided, the original image size from the stream will be returned.",
            "Type": "integer",
            "Required": false
        },
        "HeightPixels": {
            "Description": "The height of the output image that is used in conjunction with the WidthPixels parameter. When both HeightPixels and WidthPixels parameters are provided, the image will be stretched to fit the specified aspect ratio. If only the HeightPixels parameter is provided, its original aspect ratio will be used to calculate the WidthPixels ratio. If neither parameter is provided, the original image size will be returned.",
            "Type": "integer",
            "Required": false
        },
        "MaxResults": {
            "Description": "The maximum number of images to be returned by the API.",
            "Type": "integer",
            "Required": false
        },
        "NextToken": {
            "Description": "A token that specifies where to start paginating the next set of Images. This is the GetImages:NextToken from a previously truncated response.",
            "Type": "string",
            "Required": false
        }
    },
    "get_media_for_fragment_list": {
        "StreamName": {
            "Description": "The name of the stream from which to retrieve fragment media. Specify either this parameter or the StreamARN parameter.",
            "Type": "string",
            "Required": false
        },
        "StreamARN": {
            "Description": "The Amazon Resource Name (ARN) of the stream from which to retrieve fragment media. Specify either this parameter or the StreamName parameter.",
            "Type": "string",
            "Required": false
        },
        "Fragments": {
            "Description": "A list of the numbers of fragments for which to retrieve media. You retrieve these values with  ListFragments .",
            "Type": "list",
            "Required": true,
            "list variables": {}
        }
    },
    "list_fragments": {
        "StreamName": {
            "Description": "The name of the stream from which to retrieve a fragment list. Specify either this parameter or the StreamARN parameter.",
            "Type": "string",
            "Required": false
        },
        "StreamARN": {
            "Description": "The Amazon Resource Name (ARN) of the stream from which to retrieve a fragment list. Specify either this parameter or the StreamName parameter.",
            "Type": "string",
            "Required": false
        },
        "MaxResults": {
            "Description": "The total number of fragments to return. If the total number of fragments available is more than the value specified in max-results , then a  ListFragmentsOutput$NextToken is provided in the output that you can use to resume pagination.",
            "Type": "integer",
            "Required": false
        },
        "NextToken": {
            "Description": "A token to specify where to start paginating. This is the  ListFragmentsOutput$NextToken from a previously truncated response.",
            "Type": "string",
            "Required": false
        },
        "FragmentSelector": {
            "Description": "Describes the timestamp range and timestamp origin for the range of fragments to return.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        }
    },
    "paginate": {
        "StreamName": {
            "Description": "The name of the stream from which to retrieve a fragment list. Specify either this parameter or the StreamARN parameter.",
            "Type": "string",
            "Required": false
        },
        "StreamARN": {
            "Description": "The Amazon Resource Name (ARN) of the stream from which to retrieve a fragment list. Specify either this parameter or the StreamName parameter.",
            "Type": "string",
            "Required": false
        },
        "FragmentSelector": {
            "Description": "Describes the timestamp range and timestamp origin for the range of fragments to return.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "PaginationConfig": {
            "Description": "A dictionary that provides parameters to control pagination.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        }
    }
}