{
    "add_tags_to_on_premises_instances": {
        "tags": {
            "Description": "The tag key-value pairs to add to the on-premises instances.\nKeys and values are both required. Keys cannot be null or empty strings. Value-only tags are not allowed.",
            "Type": "list",
            "Required": true,
            "list variables": {}
        },
        "instanceNames": {
            "Description": "The names of the on-premises instances to which to add tags.",
            "Type": "list",
            "Required": true,
            "list variables": {}
        }
    },
    "batch_get_application_revisions": {
        "applicationName": {
            "Description": "The name of an AWS CodeDeploy application about which to get revision information.",
            "Type": "string",
            "Required": true
        },
        "revisions": {
            "Description": "An array of RevisionLocation objects that specify information to get about the application revisions, including type and location. The maximum number of RevisionLocation objects you can specify is 25.",
            "Type": "list",
            "Required": true,
            "list variables": {}
        }
    },
    "batch_get_applications": {
        "applicationNames": {
            "Description": "A list of application names separated by spaces. The maximum number of application names you can specify is 100.",
            "Type": "list",
            "Required": true,
            "list variables": {}
        }
    },
    "batch_get_deployment_groups": {
        "applicationName": {
            "Description": "The name of an AWS CodeDeploy application associated with the applicable IAM user or AWS account.",
            "Type": "string",
            "Required": true
        },
        "deploymentGroupNames": {
            "Description": "The names of the deployment groups.",
            "Type": "list",
            "Required": true,
            "list variables": {}
        }
    },
    "batch_get_deployment_instances": {
        "deploymentId": {
            "Description": "The unique ID of a deployment.",
            "Type": "string",
            "Required": true
        },
        "instanceIds": {
            "Description": "The unique IDs of instances used in the deployment. The maximum number of instance IDs you can specify is 25.",
            "Type": "list",
            "Required": true,
            "list variables": {}
        }
    },
    "batch_get_deployment_targets": {
        "deploymentId": {
            "Description": "The unique ID of a deployment.",
            "Type": "string",
            "Required": false
        },
        "targetIds": {
            "Description": "The unique IDs of the deployment targets. The compute platform of the deployment determines the type of the targets and their formats. The maximum number of deployment target IDs you can specify is 25.",
            "Type": "list",
            "Required": false,
            "list variables": [
                {},
                {}
            ]
        }
    },
    "batch_get_deployments": {
        "deploymentIds": {
            "Description": "A list of deployment IDs, separated by spaces. The maximum number of deployment IDs you can specify is 25.",
            "Type": "list",
            "Required": true,
            "list variables": {}
        }
    },
    "batch_get_on_premises_instances": {
        "instanceNames": {
            "Description": "The names of the on-premises instances about which to get information. The maximum number of instance names you can specify is 25.",
            "Type": "list",
            "Required": true,
            "list variables": {}
        }
    },
    "continue_deployment": {
        "deploymentId": {
            "Description": "The unique ID of a blue/green deployment for which you want to start rerouting traffic to the replacement environment.",
            "Type": "string",
            "Required": false
        },
        "deploymentWaitType": {
            "Description": "The status of the deployment's waiting period. READY_WAIT indicates that the deployment is ready to start shifting traffic. TERMINATION_WAIT indicates that the traffic is shifted, but the original target is not terminated.",
            "Type": "string",
            "Required": false
        }
    },
    "create_application": {
        "applicationName": {
            "Description": "The name of the application. This name must be unique with the applicable IAM user or AWS account.",
            "Type": "string",
            "Required": true
        },
        "computePlatform": {
            "Description": "The destination platform type for the deployment (Lambda , Server , or ECS ).",
            "Type": "string",
            "Required": false
        },
        "tags": {
            "Description": "The metadata that you apply to CodeDeploy applications to help you organize and categorize them. Each tag consists of a key and an optional value, both of which you define.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        }
    },
    "create_deployment": {
        "applicationName": {
            "Description": "The name of an AWS CodeDeploy application associated with the IAM user or AWS account.",
            "Type": "string",
            "Required": true
        },
        "deploymentGroupName": {
            "Description": "The name of the deployment group.",
            "Type": "string",
            "Required": false
        },
        "revision": {
            "Description": "The type and location of the revision to deploy.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "deploymentConfigName": {
            "Description": "The name of a deployment configuration associated with the IAM user or AWS account.\nIf not specified, the value configured in the deployment group is used as the default. If the deployment group does not have a deployment configuration associated with it, CodeDeployDefault .``OneAtATime`` is used by default.",
            "Type": "string",
            "Required": false
        },
        "description": {
            "Description": "A comment about the deployment.",
            "Type": "string",
            "Required": false
        },
        "ignoreApplicationStopFailures": {
            "Description": "If true, then if an ApplicationStop, BeforeBlockTraffic, or AfterBlockTraffic deployment lifecycle event to an instance fails, then the deployment continues to the next deployment lifecycle event. For example, if ApplicationStop fails, the deployment continues with DownloadBundle. If BeforeBlockTraffic fails, the deployment continues with BlockTraffic. If AfterBlockTraffic fails, the deployment continues with ApplicationStop .\nIf false or not specified, then if a lifecycle event fails during a deployment to an instance, that deployment fails. If deployment to that instance is part of an overall deployment and the number of healthy hosts is not less than the minimum number of healthy hosts, then a deployment to the next instance is attempted.\nDuring a deployment, the AWS CodeDeploy agent runs the scripts specified for ApplicationStop, BeforeBlockTraffic, and AfterBlockTraffic in the AppSpec file from the previous successful deployment. (All other scripts are run from the AppSpec file in the current deployment.) If one of these scripts contains an error and does not run successfully, the deployment can fail.\nIf the cause of the failure is a script from the last successful deployment that will never run successfully, create a new deployment and use ignoreApplicationStopFailures to specify that the ApplicationStop, BeforeBlockTraffic, and AfterBlockTraffic failures should be ignored.",
            "Type": "boolean",
            "Required": false
        },
        "targetInstances": {
            "Description": "Information about the instances that belong to the replacement environment in a blue/green deployment.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "autoRollbackConfiguration": {
            "Description": "Configuration information for an automatic rollback that is added when a deployment is created.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "updateOutdatedInstancesOnly": {
            "Description": "Indicates whether to deploy to all instances or only to instances that are not running the latest application revision.",
            "Type": "boolean",
            "Required": false
        },
        "fileExistsBehavior": {
            "Description": "Information about how AWS CodeDeploy handles files that already exist in a deployment target location but weren't part of the previous successful deployment.\nThe fileExistsBehavior parameter takes any of the following values:",
            "Type": "string",
            "Required": false,
            "string variables": {}
        }
    },
    "create_deployment_config": {
        "deploymentConfigName": {
            "Description": "The name of the deployment configuration to create.",
            "Type": "string",
            "Required": true
        },
        "minimumHealthyHosts": {
            "Description": "The minimum number of healthy instances that should be available at any time during the deployment. There are two parameters expected in the input: type and value.\nThe type parameter takes either of the following values:\nThe value parameter takes an integer.\nFor example, to set a minimum of 95% healthy instance, specify a type of FLEET_PERCENT and a value of 95.",
            "Type": "dict",
            "Required": false,
            "dict variables": [
                {},
                {}
            ]
        },
        "trafficRoutingConfig": {
            "Description": "The configuration that specifies how the deployment traffic is routed.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "computePlatform": {
            "Description": "The destination platform type for the deployment (Lambda , Server , or ECS ).",
            "Type": "string",
            "Required": false
        }
    },
    "create_deployment_group": {
        "applicationName": {
            "Description": "The name of an AWS CodeDeploy application associated with the IAM user or AWS account.",
            "Type": "string",
            "Required": true
        },
        "deploymentGroupName": {
            "Description": "The name of a new deployment group for the specified application.",
            "Type": "string",
            "Required": true
        },
        "deploymentConfigName": {
            "Description": "If specified, the deployment configuration name can be either one of the predefined configurations provided with AWS CodeDeploy or a custom deployment configuration that you create by calling the create deployment configuration operation.\nFor more information about the predefined deployment configurations in AWS CodeDeploy, see Working with Deployment Configurations in CodeDeploy in the AWS CodeDeploy User Guide .",
            "Type": "string",
            "Required": false
        },
        "ec2TagFilters": {
            "Description": "The Amazon EC2 tags on which to filter. The deployment group includes EC2 instances with any of the specified tags. Cannot be used in the same call as ec2TagSet.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "onPremisesInstanceTagFilters": {
            "Description": "The on-premises instance tags on which to filter. The deployment group includes on-premises instances with any of the specified tags. Cannot be used in the same call as OnPremisesTagSet .",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "autoScalingGroups": {
            "Description": "A list of associated Amazon EC2 Auto Scaling groups.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "serviceRoleArn": {
            "Description": "A service role Amazon Resource Name (ARN) that allows AWS CodeDeploy to act on the user's behalf when interacting with AWS services.",
            "Type": "string",
            "Required": true
        },
        "triggerConfigurations": {
            "Description": "Information about triggers to create when the deployment group is created. For examples, see Create a Trigger for an AWS CodeDeploy Event in the AWS CodeDeploy User Guide .",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "alarmConfiguration": {
            "Description": "Information to add about Amazon CloudWatch alarms when the deployment group is created.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "autoRollbackConfiguration": {
            "Description": "Configuration information for an automatic rollback that is added when a deployment group is created.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "outdatedInstancesStrategy": {
            "Description": "Indicates what happens when new EC2 instances are launched mid-deployment and do not receive the deployed application revision.\nIf this option is set to UPDATE or is unspecified, CodeDeploy initiates one or more 'auto-update outdated instances' deployments to apply the deployed application revision to the new EC2 instances.\nIf this option is set to IGNORE, CodeDeploy does not initiate a deployment to update the new EC2 instances. This may result in instances having different revisions.",
            "Type": "string",
            "Required": false
        },
        "deploymentStyle": {
            "Description": "Information about the type of deployment, in-place or blue/green, that you want to run and whether to route deployment traffic behind a load balancer.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "blueGreenDeploymentConfiguration": {
            "Description": "Information about blue/green deployment options for a deployment group.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "loadBalancerInfo": {
            "Description": "Information about the load balancer used in a deployment.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "ec2TagSet": {
            "Description": "Information about groups of tags applied to EC2 instances. The deployment group includes only EC2 instances identified by all the tag groups. Cannot be used in the same call as ec2TagFilters .",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "ecsServices": {
            "Description": "The target Amazon ECS services in the deployment group. This applies only to deployment groups that use the Amazon ECS compute platform. A target Amazon ECS service is specified as an Amazon ECS cluster and service name pair using the format &lt;clustername&gt;:&lt;servicename&gt; .",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "onPremisesTagSet": {
            "Description": "Information about groups of tags applied to on-premises instances. The deployment group includes only on-premises instances identified by all of the tag groups. Cannot be used in the same call as onPremisesInstanceTagFilters .",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "tags": {
            "Description": "The metadata that you apply to CodeDeploy deployment groups to help you organize and categorize them. Each tag consists of a key and an optional value, both of which you define.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        }
    },
    "delete_application": {
        "applicationName": {
            "Description": "The name of an AWS CodeDeploy application associated with the IAM user or AWS account.",
            "Type": "string",
            "Required": true
        }
    },
    "delete_deployment_config": {
        "deploymentConfigName": {
            "Description": "The name of a deployment configuration associated with the IAM user or AWS account.",
            "Type": "string",
            "Required": true
        }
    },
    "delete_deployment_group": {
        "applicationName": {
            "Description": "The name of an AWS CodeDeploy application associated with the IAM user or AWS account.",
            "Type": "string",
            "Required": true
        },
        "deploymentGroupName": {
            "Description": "The name of a deployment group for the specified application.",
            "Type": "string",
            "Required": true
        }
    },
    "delete_git_hub_account_token": {
        "tokenName": {
            "Description": "The name of the GitHub account connection to delete.",
            "Type": "string",
            "Required": false
        }
    },
    "delete_resources_by_external_id": {
        "externalId": {
            "Description": "The unique ID of an external resource (for example, a CloudFormation stack ID) that is linked to one or more CodeDeploy resources.",
            "Type": "string",
            "Required": false
        }
    },
    "deregister_on_premises_instance": {
        "instanceName": {
            "Description": "The name of the on-premises instance to deregister.",
            "Type": "string",
            "Required": true
        }
    },
    "get_application": {
        "applicationName": {
            "Description": "The name of an AWS CodeDeploy application associated with the IAM user or AWS account.",
            "Type": "string",
            "Required": true
        }
    },
    "get_application_revision": {
        "applicationName": {
            "Description": "The name of the application that corresponds to the revision.",
            "Type": "string",
            "Required": true
        },
        "revision": {
            "Description": "Information about the application revision to get, including type and location.",
            "Type": "dict",
            "Required": true,
            "dict variables": {}
        }
    },
    "get_deployment": {
        "deploymentId": {
            "Description": "The unique ID of a deployment associated with the IAM user or AWS account.",
            "Type": "string",
            "Required": true
        }
    },
    "get_deployment_config": {
        "deploymentConfigName": {
            "Description": "The name of a deployment configuration associated with the IAM user or AWS account.",
            "Type": "string",
            "Required": true
        }
    },
    "get_deployment_group": {
        "applicationName": {
            "Description": "The name of an AWS CodeDeploy application associated with the IAM user or AWS account.",
            "Type": "string",
            "Required": true
        },
        "deploymentGroupName": {
            "Description": "The name of a deployment group for the specified application.",
            "Type": "string",
            "Required": true
        }
    },
    "get_deployment_instance": {
        "deploymentId": {
            "Description": "The unique ID of a deployment.",
            "Type": "string",
            "Required": true
        },
        "instanceId": {
            "Description": "The unique ID of an instance in the deployment group.",
            "Type": "string",
            "Required": true
        }
    },
    "get_deployment_target": {
        "deploymentId": {
            "Description": "The unique ID of a deployment.",
            "Type": "string",
            "Required": false
        },
        "targetId": {
            "Description": "The unique ID of a deployment target.",
            "Type": "string",
            "Required": false
        }
    },
    "get_on_premises_instance": {
        "instanceName": {
            "Description": "The name of the on-premises instance about which to get information.",
            "Type": "string",
            "Required": true
        }
    },
    "list_application_revisions": {
        "applicationName": {
            "Description": "The name of an AWS CodeDeploy application associated with the IAM user or AWS account.",
            "Type": "string",
            "Required": true
        },
        "sortBy": {
            "Description": "The column name to use to sort the list results:\nIf not specified or set to null, the results are returned in an arbitrary order.",
            "Type": "string",
            "Required": false,
            "string variables": {}
        },
        "sortOrder": {
            "Description": "The order in which to sort the list results:\nIf not specified, the results are sorted in ascending order.\nIf set to null, the results are sorted in an arbitrary order.",
            "Type": "string",
            "Required": false,
            "string variables": {}
        },
        "s3Bucket": {
            "Description": "An Amazon S3 bucket name to limit the search for revisions.\nIf set to null, all of the user's buckets are searched.",
            "Type": "string",
            "Required": false
        },
        "s3KeyPrefix": {
            "Description": "A key prefix for the set of Amazon S3 objects to limit the search for revisions.",
            "Type": "string",
            "Required": false
        },
        "deployed": {
            "Description": "Whether to list revisions based on whether the revision is the target revision of a deployment group:",
            "Type": "string",
            "Required": false,
            "string variables": {}
        },
        "nextToken": {
            "Description": "An identifier returned from the previous ListApplicationRevisions call. It can be used to return the next set of applications in the list.",
            "Type": "string",
            "Required": false
        }
    },
    "list_applications": {
        "nextToken": {
            "Description": "An identifier returned from the previous list applications call. It can be used to return the next set of applications in the list.",
            "Type": "string",
            "Required": false
        }
    },
    "list_deployment_configs": {
        "nextToken": {
            "Description": "An identifier returned from the previous ListDeploymentConfigs call. It can be used to return the next set of deployment configurations in the list.",
            "Type": "string",
            "Required": false
        }
    },
    "list_deployment_groups": {
        "applicationName": {
            "Description": "The name of an AWS CodeDeploy application associated with the IAM user or AWS account.",
            "Type": "string",
            "Required": true
        },
        "nextToken": {
            "Description": "An identifier returned from the previous list deployment groups call. It can be used to return the next set of deployment groups in the list.",
            "Type": "string",
            "Required": false
        }
    },
    "list_deployment_instances": {
        "deploymentId": {
            "Description": "The unique ID of a deployment.",
            "Type": "string",
            "Required": true
        },
        "nextToken": {
            "Description": "An identifier returned from the previous list deployment instances call. It can be used to return the next set of deployment instances in the list.",
            "Type": "string",
            "Required": false
        },
        "instanceStatusFilter": {
            "Description": "A subset of instances to list by status:",
            "Type": "list",
            "Required": false,
            "list variables": [
                {},
                {}
            ]
        },
        "instanceTypeFilter": {
            "Description": "The set of instances in a blue/green deployment, either those in the original environment (\"BLUE\") or those in the replacement environment (\"GREEN\"), for which you want to view instance information.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        }
    },
    "list_deployment_targets": {
        "deploymentId": {
            "Description": "The unique ID of a deployment.",
            "Type": "string",
            "Required": false
        },
        "nextToken": {
            "Description": "A token identifier returned from the previous ListDeploymentTargets call. It can be used to return the next set of deployment targets in the list.",
            "Type": "string",
            "Required": false
        },
        "targetFilters": {
            "Description": "A key used to filter the returned targets. The two valid values are:",
            "Type": "dict",
            "Required": false,
            "dict variables": [
                {},
                {}
            ]
        }
    },
    "list_deployments": {
        "applicationName": {
            "Description": "The name of an AWS CodeDeploy application associated with the IAM user or AWS account.",
            "Type": "string",
            "Required": false
        },
        "deploymentGroupName": {
            "Description": "The name of a deployment group for the specified application.",
            "Type": "string",
            "Required": false
        },
        "externalId": {
            "Description": "The unique ID of an external resource for returning deployments linked to the external resource.",
            "Type": "string",
            "Required": false
        },
        "includeOnlyStatuses": {
            "Description": "A subset of deployments to list by status:",
            "Type": "list",
            "Required": false,
            "list variables": [
                {},
                {}
            ]
        },
        "createTimeRange": {
            "Description": "A time range (start and end) for returning a subset of the list of deployments.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "nextToken": {
            "Description": "An identifier returned from the previous list deployments call. It can be used to return the next set of deployments in the list.",
            "Type": "string",
            "Required": false
        }
    },
    "list_git_hub_account_token_names": {
        "nextToken": {
            "Description": "An identifier returned from the previous ListGitHubAccountTokenNames call. It can be used to return the next set of names in the list.",
            "Type": "string",
            "Required": false
        }
    },
    "list_on_premises_instances": {
        "registrationStatus": {
            "Description": "The registration status of the on-premises instances:",
            "Type": "string",
            "Required": false,
            "string variables": {}
        },
        "tagFilters": {
            "Description": "The on-premises instance tags that are used to restrict the on-premises instance names returned.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "nextToken": {
            "Description": "An identifier returned from the previous list on-premises instances call. It can be used to return the next set of on-premises instances in the list.",
            "Type": "string",
            "Required": false
        }
    },
    "list_tags_for_resource": {
        "ResourceArn": {
            "Description": "The ARN of a CodeDeploy resource. ListTagsForResource returns all the tags associated with the resource that is identified by the ResourceArn .",
            "Type": "string",
            "Required": true
        },
        "NextToken": {
            "Description": "An identifier returned from the previous ListTagsForResource call. It can be used to return the next set of applications in the list.",
            "Type": "string",
            "Required": false
        }
    },
    "put_lifecycle_event_hook_execution_status": {
        "deploymentId": {
            "Description": "The unique ID of a deployment. Pass this ID to a Lambda function that validates a deployment lifecycle event.",
            "Type": "string",
            "Required": false
        },
        "lifecycleEventHookExecutionId": {
            "Description": "The execution ID of a deployment's lifecycle hook. A deployment lifecycle hook is specified in the hooks section of the AppSpec file.",
            "Type": "string",
            "Required": false
        },
        "status": {
            "Description": "The result of a Lambda function that validates a deployment lifecycle event. Succeeded and Failed are the only valid values for status .",
            "Type": "string",
            "Required": false
        }
    },
    "register_application_revision": {
        "applicationName": {
            "Description": "The name of an AWS CodeDeploy application associated with the IAM user or AWS account.",
            "Type": "string",
            "Required": true
        },
        "description": {
            "Description": "A comment about the revision.",
            "Type": "string",
            "Required": false
        },
        "revision": {
            "Description": "Information about the application revision to register, including type and location.",
            "Type": "dict",
            "Required": true,
            "dict variables": {}
        }
    },
    "register_on_premises_instance": {
        "instanceName": {
            "Description": "The name of the on-premises instance to register.",
            "Type": "string",
            "Required": true
        },
        "iamSessionArn": {
            "Description": "The ARN of the IAM session to associate with the on-premises instance.",
            "Type": "string",
            "Required": false
        },
        "iamUserArn": {
            "Description": "The ARN of the IAM user to associate with the on-premises instance.",
            "Type": "string",
            "Required": false
        }
    },
    "remove_tags_from_on_premises_instances": {
        "tags": {
            "Description": "The tag key-value pairs to remove from the on-premises instances.",
            "Type": "list",
            "Required": true,
            "list variables": {}
        },
        "instanceNames": {
            "Description": "The names of the on-premises instances from which to remove tags.",
            "Type": "list",
            "Required": true,
            "list variables": {}
        }
    },
    "skip_wait_time_for_instance_termination": {
        "deploymentId": {
            "Description": "The unique ID of a blue/green deployment for which you want to skip the instance termination wait time.",
            "Type": "string",
            "Required": false
        }
    },
    "stop_deployment": {
        "deploymentId": {
            "Description": "The unique ID of a deployment.",
            "Type": "string",
            "Required": true
        },
        "autoRollbackEnabled": {
            "Description": "Indicates, when a deployment is stopped, whether instances that have been updated should be rolled back to the previous version of the application revision.",
            "Type": "boolean",
            "Required": false
        }
    },
    "tag_resource": {
        "ResourceArn": {
            "Description": "The ARN of a resource, such as a CodeDeploy application or deployment group.",
            "Type": "string",
            "Required": true
        },
        "Tags": {
            "Description": "A list of tags that TagResource associates with a resource. The resource is identified by the ResourceArn input parameter.",
            "Type": "list",
            "Required": true,
            "list variables": {}
        }
    },
    "untag_resource": {
        "ResourceArn": {
            "Description": "The Amazon Resource Name (ARN) that specifies from which resource to disassociate the tags with the keys in the TagKeys input parameter.",
            "Type": "string",
            "Required": true
        },
        "TagKeys": {
            "Description": "A list of keys of Tag objects. The Tag objects identified by the keys are disassociated from the resource specified by the ResourceArn input parameter.",
            "Type": "list",
            "Required": true,
            "list variables": {}
        }
    },
    "update_application": {
        "applicationName": {
            "Description": "The current name of the application you want to change.",
            "Type": "string",
            "Required": false
        },
        "newApplicationName": {
            "Description": "The new name to give the application.",
            "Type": "string",
            "Required": false
        }
    },
    "update_deployment_group": {
        "applicationName": {
            "Description": "The application name that corresponds to the deployment group to update.",
            "Type": "string",
            "Required": true
        },
        "currentDeploymentGroupName": {
            "Description": "The current name of the deployment group.",
            "Type": "string",
            "Required": true
        },
        "newDeploymentGroupName": {
            "Description": "The new name of the deployment group, if you want to change it.",
            "Type": "string",
            "Required": false
        },
        "deploymentConfigName": {
            "Description": "The replacement deployment configuration name to use, if you want to change it.",
            "Type": "string",
            "Required": false
        },
        "ec2TagFilters": {
            "Description": "The replacement set of Amazon EC2 tags on which to filter, if you want to change them. To keep the existing tags, enter their names. To remove tags, do not enter any tag names.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "onPremisesInstanceTagFilters": {
            "Description": "The replacement set of on-premises instance tags on which to filter, if you want to change them. To keep the existing tags, enter their names. To remove tags, do not enter any tag names.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "autoScalingGroups": {
            "Description": "The replacement list of Auto Scaling groups to be included in the deployment group, if you want to change them. To keep the Auto Scaling groups, enter their names. To remove Auto Scaling groups, do not enter any Auto Scaling group names.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "serviceRoleArn": {
            "Description": "A replacement ARN for the service role, if you want to change it.",
            "Type": "string",
            "Required": false
        },
        "triggerConfigurations": {
            "Description": "Information about triggers to change when the deployment group is updated. For examples, see Edit a Trigger in a CodeDeploy Deployment Group in the AWS CodeDeploy User Guide .",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "alarmConfiguration": {
            "Description": "Information to add or change about Amazon CloudWatch alarms when the deployment group is updated.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "autoRollbackConfiguration": {
            "Description": "Information for an automatic rollback configuration that is added or changed when a deployment group is updated.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "outdatedInstancesStrategy": {
            "Description": "Indicates what happens when new EC2 instances are launched mid-deployment and do not receive the deployed application revision.\nIf this option is set to UPDATE or is unspecified, CodeDeploy initiates one or more 'auto-update outdated instances' deployments to apply the deployed application revision to the new EC2 instances.\nIf this option is set to IGNORE, CodeDeploy does not initiate a deployment to update the new EC2 instances. This may result in instances having different revisions.",
            "Type": "string",
            "Required": false
        },
        "deploymentStyle": {
            "Description": "Information about the type of deployment, either in-place or blue/green, you want to run and whether to route deployment traffic behind a load balancer.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "blueGreenDeploymentConfiguration": {
            "Description": "Information about blue/green deployment options for a deployment group.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "loadBalancerInfo": {
            "Description": "Information about the load balancer used in a deployment.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "ec2TagSet": {
            "Description": "Information about groups of tags applied to on-premises instances. The deployment group includes only EC2 instances identified by all the tag groups.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "ecsServices": {
            "Description": "The target Amazon ECS services in the deployment group. This applies only to deployment groups that use the Amazon ECS compute platform. A target Amazon ECS service is specified as an Amazon ECS cluster and service name pair using the format &lt;clustername&gt;:&lt;servicename&gt; .",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "onPremisesTagSet": {
            "Description": "Information about an on-premises instance tag set. The deployment group includes only on-premises instances identified by all the tag groups.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        }
    },
    "paginate": {
        "registrationStatus": {
            "Description": "The registration status of the on-premises instances:",
            "Type": "string",
            "Required": false,
            "string variables": {}
        },
        "tagFilters": {
            "Description": "The on-premises instance tags that are used to restrict the on-premises instance names returned.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "PaginationConfig": {
            "Description": "A dictionary that provides parameters to control pagination.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        }
    },
    "wait": {
        "deploymentId": {
            "Description": "The unique ID of a deployment associated with the IAM user or AWS account.",
            "Type": "string",
            "Required": true
        },
        "WaiterConfig": {
            "Description": "A dictionary that provides parameters to control waiting behavior.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        }
    }
}