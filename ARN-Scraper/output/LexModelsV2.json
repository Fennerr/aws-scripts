{
    "build_bot_locale": {
        "botId": {
            "Description": "The identifier of the bot to build. The identifier is returned in the response from the CreateBot operation.",
            "Type": "string",
            "Required": true
        },
        "botVersion": {
            "Description": "The version of the bot to build. This can only be the draft version of the bot.",
            "Type": "string",
            "Required": true
        },
        "localeId": {
            "Description": "The identifier of the language and locale that the bot will be used in. The string must match one of the supported locales. All of the intents, slot types, and slots used in the bot must have the same locale. For more information, see Supported languages .",
            "Type": "string",
            "Required": true
        }
    },
    "create_bot": {
        "botName": {
            "Description": "The name of the bot. The bot name must be unique in the account that creates the bot.",
            "Type": "string",
            "Required": true
        },
        "description": {
            "Description": "A description of the bot. It appears in lists to help you identify a particular bot.",
            "Type": "string",
            "Required": false
        },
        "roleArn": {
            "Description": "The Amazon Resource Name (ARN) of an IAM role that has permission to access the bot.",
            "Type": "string",
            "Required": true
        },
        "dataPrivacy": {
            "Description": "Provides information on additional privacy protections Amazon Lex should use with the bot's data.",
            "Type": "dict",
            "Required": true,
            "dict variables": {}
        },
        "idleSessionTTLInSeconds": {
            "Description": "The time, in seconds, that Amazon Lex should keep information about a user's conversation with the bot.\nA user interaction remains active for the amount of time specified. If no conversation occurs during this time, the session expires and Amazon Lex deletes any data provided before the timeout.\nYou can specify between 60 (1 minute) and 86,400 (24 hours) seconds.",
            "Type": "integer",
            "Required": true
        },
        "botTags": {
            "Description": "A list of tags to add to the bot. You can only add tags when you create a bot. You can't use the UpdateBot operation to update tags. To update tags, use the TagResource operation.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "testBotAliasTags": {
            "Description": "A list of tags to add to the test alias for a bot. You can only add tags when you create a bot. You can't use the UpdateAlias operation to update tags. To update tags on the test alias, use the TagResource operation.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        }
    },
    "create_bot_alias": {
        "botAliasName": {
            "Description": "The alias to create. The name must be unique for the bot.",
            "Type": "string",
            "Required": true
        },
        "description": {
            "Description": "A description of the alias. Use this description to help identify the alias.",
            "Type": "string",
            "Required": false
        },
        "botVersion": {
            "Description": "The version of the bot that this alias points to. You can use the UpdateBotAlias operation to change the bot version associated with the alias.",
            "Type": "string",
            "Required": false
        },
        "botAliasLocaleSettings": {
            "Description": "Maps configuration information to a specific locale. You can use this parameter to specify a specific Lambda function to run different functions in different locales.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "conversationLogSettings": {
            "Description": "Specifies whether Amazon Lex logs text and audio for a conversation with the bot. When you enable conversation logs, text logs store text input, transcripts of audio input, and associated metadata in Amazon CloudWatch Logs. Audio logs store audio input in Amazon S3.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "sentimentAnalysisSettings": {
            "Description": "Determines whether Amazon Lex will use Amazon Comprehend to detect the sentiment of user utterances.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "botId": {
            "Description": "The unique identifier of the bot that the alias applies to.",
            "Type": "string",
            "Required": true
        },
        "tags": {
            "Description": "A list of tags to add to the bot alias. You can only add tags when you create an alias, you can't use the UpdateBotAlias operation to update the tags on a bot alias. To update tags, use the TagResource operation.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        }
    },
    "create_bot_locale": {
        "botId": {
            "Description": "The identifier of the bot to create the locale for.",
            "Type": "string",
            "Required": true
        },
        "botVersion": {
            "Description": "The version of the bot to create the locale for. This can only be the draft version of the bot.",
            "Type": "string",
            "Required": true
        },
        "localeId": {
            "Description": "The identifier of the language and locale that the bot will be used in. The string must match one of the supported locales. All of the intents, slot types, and slots used in the bot must have the same locale. For more information, see Supported languages .",
            "Type": "string",
            "Required": true
        },
        "description": {
            "Description": "A description of the bot locale. Use this to help identify the bot locale in lists.",
            "Type": "string",
            "Required": false
        },
        "nluIntentConfidenceThreshold": {
            "Description": "Determines the threshold where Amazon Lex will insert the AMAZON.FallbackIntent, AMAZON.KendraSearchIntent, or both when returning alternative intents. AMAZON.FallbackIntent and AMAZON.KendraSearchIntent are only inserted if they are configured for the bot.\nFor example, suppose a bot is configured with the confidence threshold of 0.80 and the AMAZON.FallbackIntent. Amazon Lex returns three alternative intents with the following confidence scores: IntentA (0.70), IntentB (0.60), IntentC (0.50). The response from the RecognizeText operation would be:",
            "Type": "float",
            "Required": true,
            "float variables": {}
        },
        "voiceSettings": {
            "Description": "The Amazon Polly voice ID that Amazon Lex uses for voice interaction with the user.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        }
    },
    "create_bot_version": {
        "botId": {
            "Description": "The identifier of the bot to create the version for.",
            "Type": "string",
            "Required": true
        },
        "description": {
            "Description": "A description of the version. Use the description to help identify the version in lists.",
            "Type": "string",
            "Required": false
        },
        "botVersionLocaleSpecification": {
            "Description": "Specifies the locales that Amazon Lex adds to this version. You can choose the Draft version or any other previously published version for each locale. When you specify a source version, the locale data is copied from the source version to the new version.",
            "Type": "dict",
            "Required": true,
            "dict variables": {}
        }
    },
    "create_export": {
        "resourceSpecification": {
            "Description": "Specifies the type of resource to export, either a bot or a bot locale. You can only specify one type of resource to export.",
            "Type": "dict",
            "Required": true,
            "dict variables": {}
        },
        "fileFormat": {
            "Description": "The file format of the bot or bot locale definition files.",
            "Type": "string",
            "Required": true
        },
        "filePassword": {
            "Description": "An password to use to encrypt the exported archive. Using a password is optional, but you should encrypt the archive to protect the data in transit between Amazon Lex and your local computer.",
            "Type": "string",
            "Required": false
        }
    },
    "create_intent": {
        "intentName": {
            "Description": "The name of the intent. Intent names must be unique in the locale that contains the intent and cannot match the name of any built-in intent.",
            "Type": "string",
            "Required": true
        },
        "description": {
            "Description": "A description of the intent. Use the description to help identify the intent in lists.",
            "Type": "string",
            "Required": false
        },
        "parentIntentSignature": {
            "Description": "A unique identifier for the built-in intent to base this intent on.",
            "Type": "string",
            "Required": false
        },
        "sampleUtterances": {
            "Description": "An array of strings that a user might say to signal the intent. For example, \"I want a pizza\", or \"I want a {PizzaSize} pizza\".\nIn an utterance, slot names are enclosed in curly braces (\"{\", \"}\") to indicate where they should be displayed in the utterance shown to the user..",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "dialogCodeHook": {
            "Description": "Specifies that Amazon Lex invokes the alias Lambda function for each user input. You can invoke this Lambda function to personalize user interaction.\nFor example, suppose that your bot determines that the user's name is John. You Lambda function might retrieve John's information from a backend database and prepopulate some of the values. For example, if you find that John is gluten intolerant, you might set the corresponding intent slot, glutenIntolerant to true. You might find John's phone number and set the corresponding session attribute.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "fulfillmentCodeHook": {
            "Description": "Specifies that Amazon Lex invokes the alias Lambda function when the intent is ready for fulfillment. You can invoke this function to complete the bot's transaction with the user.\nFor example, in a pizza ordering bot, the Lambda function can look up the closest pizza restaurant to the customer's location and then place an order on the customer's behalf.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "intentConfirmationSetting": {
            "Description": "Provides prompts that Amazon Lex sends to the user to confirm the completion of an intent. If the user answers \"no,\" the settings contain a statement that is sent to the user to end the intent.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "intentClosingSetting": {
            "Description": "Sets the response that Amazon Lex sends to the user when the intent is closed.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "inputContexts": {
            "Description": "A list of contexts that must be active for this intent to be considered by Amazon Lex.\nWhen an intent has an input context list, Amazon Lex only considers using the intent in an interaction with the user when the specified contexts are included in the active context list for the session. If the contexts are not active, then Amazon Lex will not use the intent.\nA context can be automatically activated using the outputContexts property or it can be set at runtime.\nFor example, if there are two intents with different input contexts that respond to the same utterances, only the intent with the active context will respond.\nAn intent may have up to 5 input contexts. If an intent has multiple input contexts, all of the contexts must be active to consider the intent.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "outputContexts": {
            "Description": "A lists of contexts that the intent activates when it is fulfilled.\nYou can use an output context to indicate the intents that Amazon Lex should consider for the next turn of the conversation with a customer.\nWhen you use the outputContextsList property, all of the contexts specified in the list are activated when the intent is fulfilled. You can set up to 10 output contexts. You can also set the number of conversation turns that the context should be active, or the length of time that the context should be active.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "kendraConfiguration": {
            "Description": "Configuration information required to use the AMAZON.KendraSearchIntent intent to connect to an Amazon Kendra index. The AMAZON.KendraSearchIntent intent is called when Amazon Lex can't determine another intent to invoke.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "botId": {
            "Description": "The identifier of the bot associated with this intent.",
            "Type": "string",
            "Required": true
        },
        "botVersion": {
            "Description": "The identifier of the version of the bot associated with this intent.",
            "Type": "string",
            "Required": true
        },
        "localeId": {
            "Description": "The identifier of the language and locale where this intent is used. All of the bots, slot types, and slots used by the intent must have the same locale. For more information, see Supported languages .",
            "Type": "string",
            "Required": true
        },
        "initialResponseSetting": {
            "Description": "Configuration settings for the response that is sent to the user at the beginning of a conversation, before eliciting slot values.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        }
    },
    "create_resource_policy": {
        "resourceArn": {
            "Description": "The Amazon Resource Name (ARN) of the bot or bot alias that the resource policy is attached to.",
            "Type": "string",
            "Required": true
        },
        "policy": {
            "Description": "A resource policy to add to the resource. The policy is a JSON structure that contains one or more statements that define the policy. The policy must follow the IAM syntax. For more information about the contents of a JSON policy document, see IAM JSON policy reference .\nIf the policy isn't valid, Amazon Lex returns a validation exception.",
            "Type": "string",
            "Required": true
        }
    },
    "create_resource_policy_statement": {
        "resourceArn": {
            "Description": "The Amazon Resource Name (ARN) of the bot or bot alias that the resource policy is attached to.",
            "Type": "string",
            "Required": true
        },
        "statementId": {
            "Description": "The name of the statement. The ID is the same as the Sid IAM property. The statement name must be unique within the policy. For more information, see IAM JSON policy elements: Sid .",
            "Type": "string",
            "Required": true
        },
        "effect": {
            "Description": "Determines whether the statement allows or denies access to the resource.",
            "Type": "string",
            "Required": true
        },
        "principal": {
            "Description": "An IAM principal, such as an IAM users, IAM roles, or AWS services that is allowed or denied access to a resource. For more information, see AWS JSON policy elements: Principal .",
            "Type": "list",
            "Required": true,
            "list variables": {}
        },
        "action": {
            "Description": "The Amazon Lex action that this policy either allows or denies. The action must apply to the resource type of the specified ARN. For more information, see Actions, resources, and condition keys for Amazon Lex V2 .",
            "Type": "list",
            "Required": true,
            "list variables": {}
        },
        "condition": {
            "Description": "Specifies a condition when the policy is in effect. If the principal of the policy is a service principal, you must provide two condition blocks, one with a SourceAccount global condition key and one with a SourceArn global condition key.\nFor more information, see IAM JSON policy elements: Condition .",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "expectedRevisionId": {
            "Description": "The identifier of the revision of the policy to edit. If this revision ID doesn't match the current revision ID, Amazon Lex throws an exception.\nIf you don't specify a revision, Amazon Lex overwrites the contents of the policy with the new values.",
            "Type": "string",
            "Required": false
        }
    },
    "create_slot": {
        "slotName": {
            "Description": "The name of the slot. Slot names must be unique within the bot that contains the slot.",
            "Type": "string",
            "Required": true
        },
        "description": {
            "Description": "A description of the slot. Use this to help identify the slot in lists.",
            "Type": "string",
            "Required": false
        },
        "slotTypeId": {
            "Description": "The unique identifier for the slot type associated with this slot. The slot type determines the values that can be entered into the slot.",
            "Type": "string",
            "Required": false
        },
        "valueElicitationSetting": {
            "Description": "Specifies prompts that Amazon Lex sends to the user to elicit a response that provides the value for the slot.",
            "Type": "dict",
            "Required": true,
            "dict variables": {}
        },
        "obfuscationSetting": {
            "Description": "Determines how slot values are used in Amazon CloudWatch logs. If the value of the obfuscationSetting parameter is DefaultObfuscation, slot values are obfuscated in the log output. If the value is None, the actual value is present in the log output.\nThe default is to obfuscate values in the CloudWatch logs.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "botId": {
            "Description": "The identifier of the bot associated with the slot.",
            "Type": "string",
            "Required": true
        },
        "botVersion": {
            "Description": "The version of the bot associated with the slot.",
            "Type": "string",
            "Required": true
        },
        "localeId": {
            "Description": "The identifier of the language and locale that the slot will be used in. The string must match one of the supported locales. All of the bots, intents, slot types used by the slot must have the same locale. For more information, see Supported languages .",
            "Type": "string",
            "Required": true
        },
        "intentId": {
            "Description": "The identifier of the intent that contains the slot.",
            "Type": "string",
            "Required": true
        },
        "multipleValuesSetting": {
            "Description": "Indicates whether the slot returns multiple values in one response. Multi-value slots are only available in the en-US locale. If you set this value to true in any other locale, Amazon Lex throws a ValidationException .\nIf the multipleValuesSetting is not set, the default value is false .",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "subSlotSetting": {
            "Description": "Specifications for the constituent sub slots and the expression for the composite slot.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        }
    },
    "create_slot_type": {
        "slotTypeName": {
            "Description": "The name for the slot. A slot type name must be unique within the account.",
            "Type": "string",
            "Required": true
        },
        "description": {
            "Description": "A description of the slot type. Use the description to help identify the slot type in lists.",
            "Type": "string",
            "Required": false
        },
        "slotTypeValues": {
            "Description": "A list of SlotTypeValue objects that defines the values that the slot type can take. Each value can have a list of synonyms, additional values that help train the machine learning model about the values that it resolves for a slot.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "valueSelectionSetting": {
            "Description": "Determines the strategy that Amazon Lex uses to select a value from the list of possible values. The field can be set to one of the following values:\nIf you don't specify the valueSelectionSetting parameter, the default is OriginalValue .",
            "Type": "dict",
            "Required": false,
            "dict variables": [
                {},
                {}
            ]
        },
        "parentSlotTypeSignature": {
            "Description": "The built-in slot type used as a parent of this slot type. When you define a parent slot type, the new slot type has the configuration of the parent slot type.\nOnly AMAZON.AlphaNumeric is supported.",
            "Type": "string",
            "Required": false
        },
        "botId": {
            "Description": "The identifier of the bot associated with this slot type.",
            "Type": "string",
            "Required": true
        },
        "botVersion": {
            "Description": "The identifier of the bot version associated with this slot type.",
            "Type": "string",
            "Required": true
        },
        "localeId": {
            "Description": "The identifier of the language and locale that the slot type will be used in. The string must match one of the supported locales. All of the bots, intents, and slots used by the slot type must have the same locale. For more information, see Supported languages .",
            "Type": "string",
            "Required": true
        },
        "externalSourceSetting": {
            "Description": "Sets the type of external information used to create the slot type.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "compositeSlotTypeSetting": {
            "Description": "Specifications for a composite slot type.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        }
    },
    "create_upload_url": "No parameters defined",
    "delete_bot": {
        "botId": {
            "Description": "The identifier of the bot to delete.",
            "Type": "string",
            "Required": true
        },
        "skipResourceInUseCheck": {
            "Description": "When true , Amazon Lex doesn't check to see if another resource, such as an alias, is using the bot before it is deleted.",
            "Type": "boolean",
            "Required": false
        }
    },
    "delete_bot_alias": {
        "botAliasId": {
            "Description": "The unique identifier of the bot alias to delete.",
            "Type": "string",
            "Required": true
        },
        "botId": {
            "Description": "The unique identifier of the bot associated with the alias to delete.",
            "Type": "string",
            "Required": true
        },
        "skipResourceInUseCheck": {
            "Description": "When this parameter is true, Amazon Lex doesn't check to see if any other resource is using the alias before it is deleted.",
            "Type": "boolean",
            "Required": false
        }
    },
    "delete_bot_locale": {
        "botId": {
            "Description": "The unique identifier of the bot that contains the locale.",
            "Type": "string",
            "Required": true
        },
        "botVersion": {
            "Description": "The version of the bot that contains the locale.",
            "Type": "string",
            "Required": true
        },
        "localeId": {
            "Description": "The identifier of the language and locale that will be deleted. The string must match one of the supported locales. For more information, see Supported languages .",
            "Type": "string",
            "Required": true
        }
    },
    "delete_bot_version": {
        "botId": {
            "Description": "The identifier of the bot that contains the version.",
            "Type": "string",
            "Required": true
        },
        "botVersion": {
            "Description": "The version of the bot to delete.",
            "Type": "string",
            "Required": true
        },
        "skipResourceInUseCheck": {
            "Description": "By default, the DeleteBotVersion operations throws a ResourceInUseException exception if you try to delete a bot version that has an alias pointing at it. Set the skipResourceInUseCheck parameter to true to skip this check and remove the version even if an alias points to it.",
            "Type": "boolean",
            "Required": false
        }
    },
    "delete_custom_vocabulary": {
        "botId": {
            "Description": "The unique identifier of the bot to remove the custom vocabulary from.",
            "Type": "string",
            "Required": true
        },
        "botVersion": {
            "Description": "The version of the bot to remove the custom vocabulary from.",
            "Type": "string",
            "Required": true
        },
        "localeId": {
            "Description": "The locale identifier for the locale that contains the custom vocabulary to remove.",
            "Type": "string",
            "Required": true
        }
    },
    "delete_export": {
        "exportId": {
            "Description": "The unique identifier of the export to delete.",
            "Type": "string",
            "Required": true
        }
    },
    "delete_import": {
        "importId": {
            "Description": "The unique identifier of the import to delete.",
            "Type": "string",
            "Required": true
        }
    },
    "delete_intent": {
        "intentId": {
            "Description": "The unique identifier of the intent to delete.",
            "Type": "string",
            "Required": true
        },
        "botId": {
            "Description": "The identifier of the bot associated with the intent.",
            "Type": "string",
            "Required": true
        },
        "botVersion": {
            "Description": "The version of the bot associated with the intent.",
            "Type": "string",
            "Required": true
        },
        "localeId": {
            "Description": "The identifier of the language and locale where the bot will be deleted. The string must match one of the supported locales. For more information, see Supported languages .",
            "Type": "string",
            "Required": true
        }
    },
    "delete_resource_policy": {
        "resourceArn": {
            "Description": "The Amazon Resource Name (ARN) of the bot or bot alias that has the resource policy attached.",
            "Type": "string",
            "Required": true
        },
        "expectedRevisionId": {
            "Description": "The identifier of the revision to edit. If this ID doesn't match the current revision number, Amazon Lex returns an exception\nIf you don't specify a revision ID, Amazon Lex will delete the current policy.",
            "Type": "string",
            "Required": false
        }
    },
    "delete_resource_policy_statement": {
        "resourceArn": {
            "Description": "The Amazon Resource Name (ARN) of the bot or bot alias that the resource policy is attached to.",
            "Type": "string",
            "Required": true
        },
        "statementId": {
            "Description": "The name of the statement (SID) to delete from the policy.",
            "Type": "string",
            "Required": true
        },
        "expectedRevisionId": {
            "Description": "The identifier of the revision of the policy to delete the statement from. If this revision ID doesn't match the current revision ID, Amazon Lex throws an exception.\nIf you don't specify a revision, Amazon Lex removes the current contents of the statement.",
            "Type": "string",
            "Required": false
        }
    },
    "delete_slot": {
        "slotId": {
            "Description": "The identifier of the slot to delete.",
            "Type": "string",
            "Required": true
        },
        "botId": {
            "Description": "The identifier of the bot associated with the slot to delete.",
            "Type": "string",
            "Required": true
        },
        "botVersion": {
            "Description": "The version of the bot associated with the slot to delete.",
            "Type": "string",
            "Required": true
        },
        "localeId": {
            "Description": "The identifier of the language and locale that the slot will be deleted from. The string must match one of the supported locales. For more information, see Supported languages .",
            "Type": "string",
            "Required": true
        },
        "intentId": {
            "Description": "The identifier of the intent associated with the slot.",
            "Type": "string",
            "Required": true
        }
    },
    "delete_slot_type": {
        "slotTypeId": {
            "Description": "The identifier of the slot type to delete.",
            "Type": "string",
            "Required": true
        },
        "botId": {
            "Description": "The identifier of the bot associated with the slot type.",
            "Type": "string",
            "Required": true
        },
        "botVersion": {
            "Description": "The version of the bot associated with the slot type.",
            "Type": "string",
            "Required": true
        },
        "localeId": {
            "Description": "The identifier of the language and locale that the slot type will be deleted from. The string must match one of the supported locales. For more information, see Supported languages .",
            "Type": "string",
            "Required": true
        },
        "skipResourceInUseCheck": {
            "Description": "By default, the DeleteSlotType operations throws a ResourceInUseException exception if you try to delete a slot type used by a slot. Set the skipResourceInUseCheck parameter to true to skip this check and remove the slot type even if a slot uses it.",
            "Type": "boolean",
            "Required": false
        }
    },
    "delete_utterances": {
        "botId": {
            "Description": "The unique identifier of the bot that contains the utterances.",
            "Type": "string",
            "Required": true
        },
        "localeId": {
            "Description": "The identifier of the language and locale where the utterances were collected. The string must match one of the supported locales. For more information, see Supported languages .",
            "Type": "string",
            "Required": false
        },
        "sessionId": {
            "Description": "The unique identifier of the session with the user. The ID is returned in the response from the RecognizeText and RecognizeUtterance operations.",
            "Type": "string",
            "Required": false
        }
    },
    "describe_bot": {
        "botId": {
            "Description": "The unique identifier of the bot to describe.",
            "Type": "string",
            "Required": true
        }
    },
    "describe_bot_alias": {
        "botAliasId": {
            "Description": "The identifier of the bot alias to describe.",
            "Type": "string",
            "Required": true
        },
        "botId": {
            "Description": "The identifier of the bot associated with the bot alias to describe.",
            "Type": "string",
            "Required": true
        }
    },
    "describe_bot_locale": {
        "botId": {
            "Description": "The identifier of the bot associated with the locale.",
            "Type": "string",
            "Required": true
        },
        "botVersion": {
            "Description": "The identifier of the version of the bot associated with the locale.",
            "Type": "string",
            "Required": true
        },
        "localeId": {
            "Description": "The unique identifier of the locale to describe. The string must match one of the supported locales. For more information, see Supported languages .",
            "Type": "string",
            "Required": true
        }
    },
    "describe_bot_recommendation": {
        "botId": {
            "Description": "The unique identifier of the bot associated with the bot recommendation.",
            "Type": "string",
            "Required": true
        },
        "botVersion": {
            "Description": "The version of the bot associated with the bot recommendation.",
            "Type": "string",
            "Required": true
        },
        "localeId": {
            "Description": "The identifier of the language and locale of the bot recommendation to describe. The string must match one of the supported locales. For more information, see Supported languages .",
            "Type": "string",
            "Required": true
        },
        "botRecommendationId": {
            "Description": "The identifier of the bot recommendation to describe.",
            "Type": "string",
            "Required": true
        }
    },
    "describe_bot_version": {
        "botId": {
            "Description": "The identifier of the bot containing the version to return metadata for.",
            "Type": "string",
            "Required": true
        },
        "botVersion": {
            "Description": "The version of the bot to return metadata for.",
            "Type": "string",
            "Required": true
        }
    },
    "describe_custom_vocabulary_metadata": {
        "botId": {
            "Description": "The unique identifier of the bot that contains the custom vocabulary.",
            "Type": "string",
            "Required": true
        },
        "botVersion": {
            "Description": "The bot version of the bot to return metadata for.",
            "Type": "string",
            "Required": true
        },
        "localeId": {
            "Description": "The locale to return the custom vocabulary information for. The locale must be en_GB .",
            "Type": "string",
            "Required": true
        }
    },
    "describe_export": {
        "exportId": {
            "Description": "The unique identifier of the export to describe.",
            "Type": "string",
            "Required": true
        }
    },
    "describe_import": {
        "importId": {
            "Description": "The unique identifier of the import to describe.",
            "Type": "string",
            "Required": true
        }
    },
    "describe_intent": {
        "intentId": {
            "Description": "The identifier of the intent to describe.",
            "Type": "string",
            "Required": true
        },
        "botId": {
            "Description": "The identifier of the bot associated with the intent.",
            "Type": "string",
            "Required": true
        },
        "botVersion": {
            "Description": "The version of the bot associated with the intent.",
            "Type": "string",
            "Required": true
        },
        "localeId": {
            "Description": "The identifier of the language and locale of the intent to describe. The string must match one of the supported locales. For more information, see Supported languages .",
            "Type": "string",
            "Required": true
        }
    },
    "describe_resource_policy": {
        "resourceArn": {
            "Description": "The Amazon Resource Name (ARN) of the bot or bot alias that the resource policy is attached to.",
            "Type": "string",
            "Required": true
        }
    },
    "describe_slot": {
        "slotId": {
            "Description": "The unique identifier for the slot.",
            "Type": "string",
            "Required": true
        },
        "botId": {
            "Description": "The identifier of the bot associated with the slot.",
            "Type": "string",
            "Required": true
        },
        "botVersion": {
            "Description": "The version of the bot associated with the slot.",
            "Type": "string",
            "Required": true
        },
        "localeId": {
            "Description": "The identifier of the language and locale of the slot to describe. The string must match one of the supported locales. For more information, see Supported languages .",
            "Type": "string",
            "Required": true
        },
        "intentId": {
            "Description": "The identifier of the intent that contains the slot.",
            "Type": "string",
            "Required": true
        }
    },
    "describe_slot_type": {
        "slotTypeId": {
            "Description": "The identifier of the slot type.",
            "Type": "string",
            "Required": true
        },
        "botId": {
            "Description": "The identifier of the bot associated with the slot type.",
            "Type": "string",
            "Required": true
        },
        "botVersion": {
            "Description": "The version of the bot associated with the slot type.",
            "Type": "string",
            "Required": true
        },
        "localeId": {
            "Description": "The identifier of the language and locale of the slot type to describe. The string must match one of the supported locales. For more information, see Supported languages .",
            "Type": "string",
            "Required": true
        }
    },
    "list_aggregated_utterances": {
        "botId": {
            "Description": "The unique identifier of the bot associated with this request.",
            "Type": "string",
            "Required": true
        },
        "botAliasId": {
            "Description": "The identifier of the bot alias associated with this request. If you specify the bot alias, you can't specify the bot version.",
            "Type": "string",
            "Required": false
        },
        "botVersion": {
            "Description": "The identifier of the bot version associated with this request. If you specify the bot version, you can't specify the bot alias.",
            "Type": "string",
            "Required": false
        },
        "localeId": {
            "Description": "The identifier of the language and locale where the utterances were collected. For more information, see Supported languages .",
            "Type": "string",
            "Required": true
        },
        "aggregationDuration": {
            "Description": "The time window for aggregating the utterance information. You can specify a time between one hour and two weeks.",
            "Type": "dict",
            "Required": true,
            "dict variables": {}
        },
        "sortBy": {
            "Description": "Specifies sorting parameters for the list of utterances. You can sort by the hit count, the missed count, or the number of distinct sessions the utterance appeared in.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "filters": {
            "Description": "Provides the specification of a filter used to limit the utterances in the response to only those that match the filter specification. You can only specify one filter and one string to filter on.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "maxResults": {
            "Description": "The maximum number of utterances to return in each page of results. If there are fewer results than the maximum page size, only the actual number of results are returned. If you don't specify the maxResults parameter, 1,000 results are returned.",
            "Type": "integer",
            "Required": false
        },
        "nextToken": {
            "Description": "If the response from the ListAggregatedUtterances operation contains more results that specified in the maxResults parameter, a token is returned in the response. Use that token in the nextToken parameter to return the next page of results.",
            "Type": "string",
            "Required": false
        }
    },
    "list_bot_aliases": {
        "botId": {
            "Description": "The identifier of the bot to list aliases for.",
            "Type": "string",
            "Required": true
        },
        "maxResults": {
            "Description": "The maximum number of aliases to return in each page of results. If there are fewer results than the max page size, only the actual number of results are returned.",
            "Type": "integer",
            "Required": false
        },
        "nextToken": {
            "Description": "If the response from the ListBotAliases operation contains more results than specified in the maxResults parameter, a token is returned in the response. Use that token in the nextToken parameter to return the next page of results.",
            "Type": "string",
            "Required": false
        }
    },
    "list_bot_locales": {
        "botId": {
            "Description": "The identifier of the bot to list locales for.",
            "Type": "string",
            "Required": true
        },
        "botVersion": {
            "Description": "The version of the bot to list locales for.",
            "Type": "string",
            "Required": true
        },
        "sortBy": {
            "Description": "Specifies sorting parameters for the list of locales. You can sort by locale name in ascending or descending order.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "filters": {
            "Description": "Provides the specification for a filter used to limit the response to only those locales that match the filter specification. You can only specify one filter and one value to filter on.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "maxResults": {
            "Description": "The maximum number of aliases to return in each page of results. If there are fewer results than the max page size, only the actual number of results are returned.",
            "Type": "integer",
            "Required": false
        },
        "nextToken": {
            "Description": "If the response from the ListBotLocales operation contains more results than specified in the maxResults parameter, a token is returned in the response. Use that token as the nextToken parameter to return the next page of results.",
            "Type": "string",
            "Required": false
        }
    },
    "list_bot_recommendations": {
        "botId": {
            "Description": "The unique identifier of the bot that contains the bot recommendation list.",
            "Type": "string",
            "Required": true
        },
        "botVersion": {
            "Description": "The version of the bot that contains the bot recommendation list.",
            "Type": "string",
            "Required": true
        },
        "localeId": {
            "Description": "The identifier of the language and locale of the bot recommendation list.",
            "Type": "string",
            "Required": true
        },
        "maxResults": {
            "Description": "The maximum number of bot recommendations to return in each page of results. If there are fewer results than the max page size, only the actual number of results are returned.",
            "Type": "integer",
            "Required": false
        },
        "nextToken": {
            "Description": "If the response from the ListBotRecommendation operation contains more results than specified in the maxResults parameter, a token is returned in the response. Use that token in the nextToken parameter to return the next page of results.",
            "Type": "string",
            "Required": false
        }
    },
    "list_bot_versions": {
        "botId": {
            "Description": "The identifier of the bot to list versions for.",
            "Type": "string",
            "Required": true
        },
        "sortBy": {
            "Description": "Specifies sorting parameters for the list of versions. You can specify that the list be sorted by version name in either ascending or descending order.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "maxResults": {
            "Description": "The maximum number of versions to return in each page of results. If there are fewer results than the max page size, only the actual number of results are returned.",
            "Type": "integer",
            "Required": false
        },
        "nextToken": {
            "Description": "If the response to the ListBotVersion operation contains more results than specified in the maxResults parameter, a token is returned in the response. Use that token in the nextToken parameter to return the next page of results.",
            "Type": "string",
            "Required": false
        }
    },
    "list_bots": {
        "sortBy": {
            "Description": "Specifies sorting parameters for the list of bots. You can specify that the list be sorted by bot name in ascending or descending order.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "filters": {
            "Description": "Provides the specification of a filter used to limit the bots in the response to only those that match the filter specification. You can only specify one filter and one string to filter on.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "maxResults": {
            "Description": "The maximum number of bots to return in each page of results. If there are fewer results than the maximum page size, only the actual number of results are returned.",
            "Type": "integer",
            "Required": false
        },
        "nextToken": {
            "Description": "If the response from the ListBots operation contains more results than specified in the maxResults parameter, a token is returned in the response.\nUse the returned token in the nextToken parameter of a ListBots request to return the next page of results. For a complete set of results, call the ListBots operation until the nextToken returned in the response is null.",
            "Type": "string",
            "Required": false
        }
    },
    "list_built_in_intents": {
        "localeId": {
            "Description": "The identifier of the language and locale of the intents to list. The string must match one of the supported locales. For more information, see Supported languages .",
            "Type": "string",
            "Required": true
        },
        "sortBy": {
            "Description": "Specifies sorting parameters for the list of built-in intents. You can specify that the list be sorted by the built-in intent signature in either ascending or descending order.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "maxResults": {
            "Description": "The maximum number of built-in intents to return in each page of results. If there are fewer results than the max page size, only the actual number of results are returned.",
            "Type": "integer",
            "Required": false
        },
        "nextToken": {
            "Description": "If the response from the ListBuiltInIntents operation contains more results than specified in the maxResults parameter, a token is returned in the response. Use that token in the nextToken parameter to return the next page of results.",
            "Type": "string",
            "Required": false
        }
    },
    "list_built_in_slot_types": {
        "localeId": {
            "Description": "The identifier of the language and locale of the slot types to list. The string must match one of the supported locales. For more information, see Supported languages .",
            "Type": "string",
            "Required": true
        },
        "sortBy": {
            "Description": "Determines the sort order for the response from the ListBuiltInSlotTypes operation. You can choose to sort by the slot type signature in either ascending or descending order.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "maxResults": {
            "Description": "The maximum number of built-in slot types to return in each page of results. If there are fewer results than the max page size, only the actual number of results are returned.",
            "Type": "integer",
            "Required": false
        },
        "nextToken": {
            "Description": "If the response from the ListBuiltInSlotTypes operation contains more results than specified in the maxResults parameter, a token is returned in the response. Use that token in the nextToken parameter to return the next page of results.",
            "Type": "string",
            "Required": false
        }
    },
    "list_exports": {
        "botId": {
            "Description": "The unique identifier that Amazon Lex assigned to the bot.",
            "Type": "string",
            "Required": false
        },
        "botVersion": {
            "Description": "The version of the bot to list exports for.",
            "Type": "string",
            "Required": false
        },
        "sortBy": {
            "Description": "Determines the field that the list of exports is sorted by. You can sort by the LastUpdatedDateTime field in ascending or descending order.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "filters": {
            "Description": "Provides the specification of a filter used to limit the exports in the response to only those that match the filter specification. You can only specify one filter and one string to filter on.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "maxResults": {
            "Description": "The maximum number of exports to return in each page of results. If there are fewer results than the max page size, only the actual number of results are returned.",
            "Type": "integer",
            "Required": false
        },
        "nextToken": {
            "Description": "If the response from the ListExports operation contains more results that specified in the maxResults parameter, a token is returned in the response.\nUse the returned token in the nextToken parameter of a ListExports request to return the next page of results. For a complete set of results, call the ListExports operation until the nextToken returned in the response is null.",
            "Type": "string",
            "Required": false
        },
        "localeId": {
            "Description": "Specifies the resources that should be exported. If you don't specify a resource type in the filters parameter, both bot locales and custom vocabularies are exported.",
            "Type": "string",
            "Required": false
        }
    },
    "list_imports": {
        "botId": {
            "Description": "The unique identifier that Amazon Lex assigned to the bot.",
            "Type": "string",
            "Required": false
        },
        "botVersion": {
            "Description": "The version of the bot to list imports for.",
            "Type": "string",
            "Required": false
        },
        "sortBy": {
            "Description": "Determines the field that the list of imports is sorted by. You can sort by the LastUpdatedDateTime field in ascending or descending order.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "filters": {
            "Description": "Provides the specification of a filter used to limit the bots in the response to only those that match the filter specification. You can only specify one filter and one string to filter on.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "maxResults": {
            "Description": "The maximum number of imports to return in each page of results. If there are fewer results than the max page size, only the actual number of results are returned.",
            "Type": "integer",
            "Required": false
        },
        "nextToken": {
            "Description": "If the response from the ListImports operation contains more results than specified in the maxResults parameter, a token is returned in the response.\nUse the returned token in the nextToken parameter of a ListImports request to return the next page of results. For a complete set of results, call the ListImports operation until the nextToken returned in the response is null.",
            "Type": "string",
            "Required": false
        },
        "localeId": {
            "Description": "Specifies the locale that should be present in the list. If you don't specify a resource type in the filters parameter, the list contains both bot locales and custom vocabularies.",
            "Type": "string",
            "Required": false
        }
    },
    "list_intents": {
        "botId": {
            "Description": "The unique identifier of the bot that contains the intent.",
            "Type": "string",
            "Required": true
        },
        "botVersion": {
            "Description": "The version of the bot that contains the intent.",
            "Type": "string",
            "Required": true
        },
        "localeId": {
            "Description": "The identifier of the language and locale of the intents to list. The string must match one of the supported locales. For more information, see Supported languages .",
            "Type": "string",
            "Required": true
        },
        "sortBy": {
            "Description": "Determines the sort order for the response from the ListIntents operation. You can choose to sort by the intent name or last updated date in either ascending or descending order.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "filters": {
            "Description": "Provides the specification of a filter used to limit the intents in the response to only those that match the filter specification. You can only specify one filter and only one string to filter on.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "maxResults": {
            "Description": "The maximum number of intents to return in each page of results. If there are fewer results than the max page size, only the actual number of results are returned.",
            "Type": "integer",
            "Required": false
        },
        "nextToken": {
            "Description": "If the response from the ListIntents operation contains more results than specified in the maxResults parameter, a token is returned in the response.\nUse the returned token in the nextToken parameter of a ListIntents request to return the next page of results. For a complete set of results, call the ListIntents operation until the nextToken returned in the response is null.",
            "Type": "string",
            "Required": false
        }
    },
    "list_recommended_intents": {
        "botId": {
            "Description": "The unique identifier of the bot associated with the recommended intents.",
            "Type": "string",
            "Required": true
        },
        "botVersion": {
            "Description": "The version of the bot that contains the recommended intents.",
            "Type": "string",
            "Required": true
        },
        "localeId": {
            "Description": "The identifier of the language and locale of the recommended intents.",
            "Type": "string",
            "Required": true
        },
        "botRecommendationId": {
            "Description": "The identifier of the bot recommendation that contains the recommended intents.",
            "Type": "string",
            "Required": true
        },
        "nextToken": {
            "Description": "If the response from the ListRecommendedIntents operation contains more results than specified in the maxResults parameter, a token is returned in the response. Use that token in the nextToken parameter to return the next page of results.",
            "Type": "string",
            "Required": false
        },
        "maxResults": {
            "Description": "The maximum number of bot recommendations to return in each page of results. If there are fewer results than the max page size, only the actual number of results are returned.",
            "Type": "integer",
            "Required": false
        }
    },
    "list_slot_types": {
        "botId": {
            "Description": "The unique identifier of the bot that contains the slot types.",
            "Type": "string",
            "Required": true
        },
        "botVersion": {
            "Description": "The version of the bot that contains the slot type.",
            "Type": "string",
            "Required": true
        },
        "localeId": {
            "Description": "The identifier of the language and locale of the slot types to list. The string must match one of the supported locales. For more information, see Supported languages .",
            "Type": "string",
            "Required": true
        },
        "sortBy": {
            "Description": "Determines the sort order for the response from the ListSlotTypes operation. You can choose to sort by the slot type name or last updated date in either ascending or descending order.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "filters": {
            "Description": "Provides the specification of a filter used to limit the slot types in the response to only those that match the filter specification. You can only specify one filter and only one string to filter on.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "maxResults": {
            "Description": "The maximum number of slot types to return in each page of results. If there are fewer results than the max page size, only the actual number of results are returned.",
            "Type": "integer",
            "Required": false
        },
        "nextToken": {
            "Description": "If the response from the ListSlotTypes operation contains more results than specified in the maxResults parameter, a token is returned in the response. Use that token in the nextToken parameter to return the next page of results.",
            "Type": "string",
            "Required": false
        }
    },
    "list_slots": {
        "botId": {
            "Description": "The identifier of the bot that contains the slot.",
            "Type": "string",
            "Required": true
        },
        "botVersion": {
            "Description": "The version of the bot that contains the slot.",
            "Type": "string",
            "Required": true
        },
        "localeId": {
            "Description": "The identifier of the language and locale of the slots to list. The string must match one of the supported locales. For more information, see Supported languages .",
            "Type": "string",
            "Required": true
        },
        "intentId": {
            "Description": "The unique identifier of the intent that contains the slot.",
            "Type": "string",
            "Required": true
        },
        "sortBy": {
            "Description": "Determines the sort order for the response from the ListSlots operation. You can choose to sort by the slot name or last updated date in either ascending or descending order.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "filters": {
            "Description": "Provides the specification of a filter used to limit the slots in the response to only those that match the filter specification. You can only specify one filter and only one string to filter on.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "maxResults": {
            "Description": "The maximum number of slots to return in each page of results. If there are fewer results than the max page size, only the actual number of results are returned.",
            "Type": "integer",
            "Required": false
        },
        "nextToken": {
            "Description": "If the response from the ListSlots operation contains more results than specified in the maxResults parameter, a token is returned in the response. Use that token in the nextToken parameter to return the next page of results.",
            "Type": "string",
            "Required": false
        }
    },
    "list_tags_for_resource": {
        "resourceARN": {
            "Description": "The Amazon Resource Name (ARN) of the resource to get a list of tags for.",
            "Type": "string",
            "Required": true
        }
    },
    "search_associated_transcripts": {
        "botId": {
            "Description": "The unique identifier of the bot associated with the transcripts that you are searching.",
            "Type": "string",
            "Required": true
        },
        "botVersion": {
            "Description": "The version of the bot containing the transcripts that you are searching.",
            "Type": "string",
            "Required": true
        },
        "localeId": {
            "Description": "The identifier of the language and locale of the transcripts to search. The string must match one of the supported locales. For more information, see Supported languages",
            "Type": "string",
            "Required": true
        },
        "botRecommendationId": {
            "Description": "The unique identifier of the bot recommendation associated with the transcripts to search.",
            "Type": "string",
            "Required": true
        },
        "searchOrder": {
            "Description": "How SearchResults are ordered. Valid values are Ascending or Descending. The default is Descending.",
            "Type": "string",
            "Required": false
        },
        "filters": {
            "Description": "A list of filter objects.",
            "Type": "list",
            "Required": true,
            "list variables": {}
        },
        "maxResults": {
            "Description": "The maximum number of bot recommendations to return in each page of results. If there are fewer results than the max page size, only the actual number of results are returned.",
            "Type": "integer",
            "Required": false
        },
        "nextIndex": {
            "Description": "If the response from the SearchAssociatedTranscriptsRequest operation contains more results than specified in the maxResults parameter, an index is returned in the response. Use that index in the nextIndex parameter to return the next page of results.",
            "Type": "integer",
            "Required": false
        }
    },
    "start_bot_recommendation": {
        "botId": {
            "Description": "The unique identifier of the bot containing the bot recommendation.",
            "Type": "string",
            "Required": true
        },
        "botVersion": {
            "Description": "The version of the bot containing the bot recommendation.",
            "Type": "string",
            "Required": true
        },
        "localeId": {
            "Description": "The identifier of the language and locale of the bot recommendation to start. The string must match one of the supported locales. For more information, see Supported languages",
            "Type": "string",
            "Required": true
        },
        "transcriptSourceSetting": {
            "Description": "The object representing the Amazon S3 bucket containing the transcript, as well as the associated metadata.",
            "Type": "dict",
            "Required": true,
            "dict variables": {}
        },
        "encryptionSetting": {
            "Description": "The object representing the passwords that will be used to encrypt the data related to the bot recommendation results, as well as the KMS key ARN used to encrypt the associated metadata.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        }
    },
    "start_import": {
        "importId": {
            "Description": "The unique identifier for the import. It is included in the response from the CreateUploadUrl operation.",
            "Type": "string",
            "Required": true
        },
        "resourceSpecification": {
            "Description": "Parameters for creating the bot, bot locale or custom vocabulary.",
            "Type": "dict",
            "Required": true,
            "dict variables": {}
        },
        "mergeStrategy": {
            "Description": "The strategy to use when there is a name conflict between the imported resource and an existing resource. When the merge strategy is FailOnConflict existing resources are not overwritten and the import fails.",
            "Type": "string",
            "Required": true
        },
        "filePassword": {
            "Description": "The password used to encrypt the zip archive that contains the resource definition. You should always encrypt the zip archive to protect it during transit between your site and Amazon Lex.",
            "Type": "string",
            "Required": false
        }
    },
    "stop_bot_recommendation": {
        "botId": {
            "Description": "The unique identifier of the bot containing the bot recommendation to be stopped.",
            "Type": "string",
            "Required": true
        },
        "botVersion": {
            "Description": "The version of the bot containing the bot recommendation.",
            "Type": "string",
            "Required": true
        },
        "localeId": {
            "Description": "The identifier of the language and locale of the bot recommendation to stop. The string must match one of the supported locales. For more information, see Supported languages",
            "Type": "string",
            "Required": true
        },
        "botRecommendationId": {
            "Description": "The unique identifier of the bot recommendation to be stopped.",
            "Type": "string",
            "Required": true
        }
    },
    "tag_resource": {
        "resourceARN": {
            "Description": "The Amazon Resource Name (ARN) of the bot, bot alias, or bot channel to tag.",
            "Type": "string",
            "Required": true
        },
        "tags": {
            "Description": "A list of tag keys to add to the resource. If a tag key already exists, the existing value is replaced with the new value.",
            "Type": "dict",
            "Required": true,
            "dict variables": {}
        }
    },
    "untag_resource": {
        "resourceARN": {
            "Description": "The Amazon Resource Name (ARN) of the resource to remove the tags from.",
            "Type": "string",
            "Required": true
        },
        "tagKeys": {
            "Description": "A list of tag keys to remove from the resource. If a tag key does not exist on the resource, it is ignored.",
            "Type": "list",
            "Required": true,
            "list variables": {}
        }
    },
    "update_bot": {
        "botId": {
            "Description": "The unique identifier of the bot to update. This identifier is returned by the CreateBot operation.",
            "Type": "string",
            "Required": true
        },
        "botName": {
            "Description": "The new name of the bot. The name must be unique in the account that creates the bot.",
            "Type": "string",
            "Required": true
        },
        "description": {
            "Description": "A description of the bot.",
            "Type": "string",
            "Required": false
        },
        "roleArn": {
            "Description": "The Amazon Resource Name (ARN) of an IAM role that has permissions to access the bot.",
            "Type": "string",
            "Required": true
        },
        "dataPrivacy": {
            "Description": "Provides information on additional privacy protections Amazon Lex should use with the bot's data.",
            "Type": "dict",
            "Required": true,
            "dict variables": {}
        },
        "idleSessionTTLInSeconds": {
            "Description": "The time, in seconds, that Amazon Lex should keep information about a user's conversation with the bot.\nA user interaction remains active for the amount of time specified. If no conversation occurs during this time, the session expires and Amazon Lex deletes any data provided before the timeout.\nYou can specify between 60 (1 minute) and 86,400 (24 hours) seconds.",
            "Type": "integer",
            "Required": true
        }
    },
    "update_bot_alias": {
        "botAliasId": {
            "Description": "The unique identifier of the bot alias.",
            "Type": "string",
            "Required": true
        },
        "botAliasName": {
            "Description": "The new name to assign to the bot alias.",
            "Type": "string",
            "Required": true
        },
        "description": {
            "Description": "The new description to assign to the bot alias.",
            "Type": "string",
            "Required": false
        },
        "botVersion": {
            "Description": "The new bot version to assign to the bot alias.",
            "Type": "string",
            "Required": false
        },
        "botAliasLocaleSettings": {
            "Description": "The new Lambda functions to use in each locale for the bot alias.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "conversationLogSettings": {
            "Description": "The new settings for storing conversation logs in Amazon CloudWatch Logs and Amazon S3 buckets.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "sentimentAnalysisSettings": {
            "Description": "Determines whether Amazon Lex will use Amazon Comprehend to detect the sentiment of user utterances.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "botId": {
            "Description": "The identifier of the bot with the updated alias.",
            "Type": "string",
            "Required": true
        }
    },
    "update_bot_locale": {
        "botId": {
            "Description": "The unique identifier of the bot that contains the locale.",
            "Type": "string",
            "Required": true
        },
        "botVersion": {
            "Description": "The version of the bot that contains the locale to be updated. The version can only be the DRAFT version.",
            "Type": "string",
            "Required": true
        },
        "localeId": {
            "Description": "The identifier of the language and locale to update. The string must match one of the supported locales. For more information, see Supported languages .",
            "Type": "string",
            "Required": true
        },
        "description": {
            "Description": "The new description of the locale.",
            "Type": "string",
            "Required": false
        },
        "nluIntentConfidenceThreshold": {
            "Description": "The new confidence threshold where Amazon Lex inserts the AMAZON.FallbackIntent and AMAZON.KendraSearchIntent intents in the list of possible intents for an utterance.",
            "Type": "float",
            "Required": true
        },
        "voiceSettings": {
            "Description": "The new Amazon Polly voice Amazon Lex should use for voice interaction with the user.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        }
    },
    "update_bot_recommendation": {
        "botId": {
            "Description": "The unique identifier of the bot containing the bot recommendation to be updated.",
            "Type": "string",
            "Required": true
        },
        "botVersion": {
            "Description": "The version of the bot containing the bot recommendation to be updated.",
            "Type": "string",
            "Required": true
        },
        "localeId": {
            "Description": "The identifier of the language and locale of the bot recommendation to update. The string must match one of the supported locales. For more information, see Supported languages",
            "Type": "string",
            "Required": true
        },
        "botRecommendationId": {
            "Description": "The unique identifier of the bot recommendation to be updated.",
            "Type": "string",
            "Required": true
        },
        "encryptionSetting": {
            "Description": "The object representing the passwords that will be used to encrypt the data related to the bot recommendation results, as well as the KMS key ARN used to encrypt the associated metadata.",
            "Type": "dict",
            "Required": true,
            "dict variables": {}
        }
    },
    "update_export": {
        "exportId": {
            "Description": "The unique identifier Amazon Lex assigned to the export.",
            "Type": "string",
            "Required": true
        },
        "filePassword": {
            "Description": "The new password to use to encrypt the export zip archive.",
            "Type": "string",
            "Required": false
        }
    },
    "update_intent": {
        "intentId": {
            "Description": "The unique identifier of the intent to update.",
            "Type": "string",
            "Required": true
        },
        "intentName": {
            "Description": "The new name for the intent.",
            "Type": "string",
            "Required": true
        },
        "description": {
            "Description": "The new description of the intent.",
            "Type": "string",
            "Required": false
        },
        "parentIntentSignature": {
            "Description": "The signature of the new built-in intent to use as the parent of this intent.",
            "Type": "string",
            "Required": false
        },
        "sampleUtterances": {
            "Description": "New utterances used to invoke the intent.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "dialogCodeHook": {
            "Description": "The new Lambda function to use between each turn of the conversation with the bot.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "fulfillmentCodeHook": {
            "Description": "The new Lambda function to call when all of the intents required slots are provided and the intent is ready for fulfillment.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "slotPriorities": {
            "Description": "A new list of slots and their priorities that are contained by the intent.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "intentConfirmationSetting": {
            "Description": "New prompts that Amazon Lex sends to the user to confirm the completion of an intent.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "intentClosingSetting": {
            "Description": "The new response that Amazon Lex sends the user when the intent is closed.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "inputContexts": {
            "Description": "A new list of contexts that must be active in order for Amazon Lex to consider the intent.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "outputContexts": {
            "Description": "A new list of contexts that Amazon Lex activates when the intent is fulfilled.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "kendraConfiguration": {
            "Description": "New configuration settings for connecting to an Amazon Kendra index.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "botId": {
            "Description": "The identifier of the bot that contains the intent.",
            "Type": "string",
            "Required": true
        },
        "botVersion": {
            "Description": "The version of the bot that contains the intent. Must be DRAFT .",
            "Type": "string",
            "Required": true
        },
        "localeId": {
            "Description": "The identifier of the language and locale where this intent is used. The string must match one of the supported locales. For more information, see Supported languages .",
            "Type": "string",
            "Required": true
        },
        "initialResponseSetting": {
            "Description": "\ninitialResponse (dict) --Specifies a list of message groups that Amazon Lex uses to respond the user input.\n\nmessageGroups (list)[REQUIRED]A collection of responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime.\n\n(dict) --Provides one or more messages that Amazon Lex should send to the user.\n\nmessage (dict)[REQUIRED]The primary message that Amazon Lex should send to the user.\n\nplainTextMessage (dict) --A message in plain text format.\n\nvalue (string)[REQUIRED]The message to send to the user.\n\n\n\ncustomPayload (dict) --A message in a custom format defined by the client application.\n\nvalue (string)[REQUIRED]The string that is sent to your application.\n\n\n\nssmlMessage (dict) --A message in Speech Synthesis Markup Language (SSML).\n\nvalue (string)[REQUIRED]The SSML text that defines the prompt.\n\n\n\nimageResponseCard (dict) --A message that defines a response card that the client application can show to the user.\n\ntitle (string)[REQUIRED]The title to display on the response card. The format of the title is determined by the platform displaying the response card.\n\nsubtitle (string) --The subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.\n\nimageUrl (string) --The URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.\n\nbuttons (list) --A list of buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button.\n\n(dict) --Describes a button to use on a response card used to gather slot values from a user.\n\ntext (string)[REQUIRED]The text that appears on the button. Use this to tell the user what value is returned when they choose this button.\n\nvalue (string)[REQUIRED]The value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.\n\n\n\n\n\n\n\n\n\nvariations (list) --Message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user.\n\n(dict) --The object that provides message text and it's type.\n\nplainTextMessage (dict) --A message in plain text format.\n\nvalue (string)[REQUIRED]The message to send to the user.\n\n\n\ncustomPayload (dict) --A message in a custom format defined by the client application.\n\nvalue (string)[REQUIRED]The string that is sent to your application.\n\n\n\nssmlMessage (dict) --A message in Speech Synthesis Markup Language (SSML).\n\nvalue (string)[REQUIRED]The SSML text that defines the prompt.\n\n\n\nimageResponseCard (dict) --A message that defines a response card that the client application can show to the user.\n\ntitle (string)[REQUIRED]The title to display on the response card. The format of the title is determined by the platform displaying the response card.\n\nsubtitle (string) --The subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.\n\nimageUrl (string) --The URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.\n\nbuttons (list) --A list of buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button.\n\n(dict) --Describes a button to use on a response card used to gather slot values from a user.\n\ntext (string)[REQUIRED]The text that appears on the button. Use this to tell the user what value is returned when they choose this button.\n\nvalue (string)[REQUIRED]The value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nallowInterrupt (boolean) --Indicates whether the user can interrupt a speech response from Amazon Lex.\n\n\n\nnextStep (dict) --The next step in the conversation.\n\ndialogAction (dict) --Defines the action that the bot executes at runtime when the conversation reaches this step.\n\ntype (string)[REQUIRED]The action that the bot should execute.\n\nslotToElicit (string) --If the dialog action is ElicitSlot , defines the slot to elicit from the user.\n\nsuppressNextMessage (boolean) --When true the next message for the intent is not used.\n\n\n\nintent (dict) --Override settings to configure the intent state.\n\nname (string) --The name of the intent. Only required when you're switching intents.\n\nslots (dict) --A map of all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden.,\n\n(string) --\n(dict) --The slot values that Amazon Lex uses when it sets slot values in a dialog step.\n\nshape (string) --When the shape value is List , it indicates that the values field contains a list of slot values. When the value is Scalar , it indicates that the value field contains a single value.\n\nvalue (dict) --The current value of the slot.\n\ninterpretedValue (string) --The value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.\n\n\n\nvalues (list) --A list of one or more values that the user provided for the slot. For example, for a slot that elicits pizza toppings, the values might be \"pepperoni\" and \"pineapple.\"\n\n(dict) --The slot values that Amazon Lex uses when it sets slot values in a dialog step.\n\n\n\n\n\n\n\n\n\n\n\nsessionAttributes (dict) --Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.\n\n(string) --\n(string) --\n\n\n\n\n\n\nconditional (dict) --Provides a list of conditional branches. Branches are evaluated in the order that they are entered in the list. The first branch with a condition that evaluates to true is executed. The last branch in the list is the default branch. The default branch should not have any condition expression. The default branch is executed if no other branch has a matching condition.\n\nactive (boolean)[REQUIRED]Determines whether a conditional branch is active. When active is false, the conditions are not evaluated.\n\nconditionalBranches (list)[REQUIRED]A list of conditional branches. A conditional branch is made up of a condition, a response and a next step. The response and next step are executed when the condition is true.\n\n(dict) --A set of actions that Amazon Lex should run if the condition is matched.\n\nname (string)[REQUIRED]The name of the branch.\n\ncondition (dict)[REQUIRED]Contains the expression to evaluate. If the condition is true, the branch's actions are taken.\n\nexpressionString (string)[REQUIRED]The expression string that is evaluated.\n\n\n\nnextStep (dict)[REQUIRED]The next step in the conversation.\n\ndialogAction (dict) --Defines the action that the bot executes at runtime when the conversation reaches this step.\n\ntype (string)[REQUIRED]The action that the bot should execute.\n\nslotToElicit (string) --If the dialog action is ElicitSlot , defines the slot to elicit from the user.\n\nsuppressNextMessage (boolean) --When true the next message for the intent is not used.\n\n\n\nintent (dict) --Override settings to configure the intent state.\n\nname (string) --The name of the intent. Only required when you're switching intents.\n\nslots (dict) --A map of all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden.,\n\n(string) --\n(dict) --The slot values that Amazon Lex uses when it sets slot values in a dialog step.\n\nshape (string) --When the shape value is List , it indicates that the values field contains a list of slot values. When the value is Scalar , it indicates that the value field contains a single value.\n\nvalue (dict) --The current value of the slot.\n\ninterpretedValue (string) --The value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.\n\n\n\nvalues (list) --A list of one or more values that the user provided for the slot. For example, for a slot that elicits pizza toppings, the values might be \"pepperoni\" and \"pineapple.\"\n\n(dict) --The slot values that Amazon Lex uses when it sets slot values in a dialog step.\n\n\n\n\n\n\n\n\n\n\n\nsessionAttributes (dict) --Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.\n\n(string) --\n(string) --\n\n\n\n\n\n\nresponse (dict) --Specifies a list of message groups that Amazon Lex uses to respond the user input.\n\nmessageGroups (list)[REQUIRED]A collection of responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime.\n\n(dict) --Provides one or more messages that Amazon Lex should send to the user.\n\nmessage (dict)[REQUIRED]The primary message that Amazon Lex should send to the user.\n\nplainTextMessage (dict) --A message in plain text format.\n\nvalue (string)[REQUIRED]The message to send to the user.\n\n\n\ncustomPayload (dict) --A message in a custom format defined by the client application.\n\nvalue (string)[REQUIRED]The string that is sent to your application.\n\n\n\nssmlMessage (dict) --A message in Speech Synthesis Markup Language (SSML).\n\nvalue (string)[REQUIRED]The SSML text that defines the prompt.\n\n\n\nimageResponseCard (dict) --A message that defines a response card that the client application can show to the user.\n\ntitle (string)[REQUIRED]The title to display on the response card. The format of the title is determined by the platform displaying the response card.\n\nsubtitle (string) --The subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.\n\nimageUrl (string) --The URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.\n\nbuttons (list) --A list of buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button.\n\n(dict) --Describes a button to use on a response card used to gather slot values from a user.\n\ntext (string)[REQUIRED]The text that appears on the button. Use this to tell the user what value is returned when they choose this button.\n\nvalue (string)[REQUIRED]The value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.\n\n\n\n\n\n\n\n\n\nvariations (list) --Message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user.\n\n(dict) --The object that provides message text and it's type.\n\nplainTextMessage (dict) --A message in plain text format.\n\nvalue (string)[REQUIRED]The message to send to the user.\n\n\n\ncustomPayload (dict) --A message in a custom format defined by the client application.\n\nvalue (string)[REQUIRED]The string that is sent to your application.\n\n\n\nssmlMessage (dict) --A message in Speech Synthesis Markup Language (SSML).\n\nvalue (string)[REQUIRED]The SSML text that defines the prompt.\n\n\n\nimageResponseCard (dict) --A message that defines a response card that the client application can show to the user.\n\ntitle (string)[REQUIRED]The title to display on the response card. The format of the title is determined by the platform displaying the response card.\n\nsubtitle (string) --The subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.\n\nimageUrl (string) --The URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.\n\nbuttons (list) --A list of buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button.\n\n(dict) --Describes a button to use on a response card used to gather slot values from a user.\n\ntext (string)[REQUIRED]The text that appears on the button. Use this to tell the user what value is returned when they choose this button.\n\nvalue (string)[REQUIRED]The value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nallowInterrupt (boolean) --Indicates whether the user can interrupt a speech response from Amazon Lex.\n\n\n\n\n\n\n\ndefaultBranch (dict)[REQUIRED]The conditional branch that should be followed when the conditions for other branches are not satisfied. A conditional branch is made up of a condition, a response and a next step.\n\nnextStep (dict) --The next step in the conversation.\n\ndialogAction (dict) --Defines the action that the bot executes at runtime when the conversation reaches this step.\n\ntype (string)[REQUIRED]The action that the bot should execute.\n\nslotToElicit (string) --If the dialog action is ElicitSlot , defines the slot to elicit from the user.\n\nsuppressNextMessage (boolean) --When true the next message for the intent is not used.\n\n\n\nintent (dict) --Override settings to configure the intent state.\n\nname (string) --The name of the intent. Only required when you're switching intents.\n\nslots (dict) --A map of all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden.,\n\n(string) --\n(dict) --The slot values that Amazon Lex uses when it sets slot values in a dialog step.\n\nshape (string) --When the shape value is List , it indicates that the values field contains a list of slot values. When the value is Scalar , it indicates that the value field contains a single value.\n\nvalue (dict) --The current value of the slot.\n\ninterpretedValue (string) --The value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.\n\n\n\nvalues (list) --A list of one or more values that the user provided for the slot. For example, for a slot that elicits pizza toppings, the values might be \"pepperoni\" and \"pineapple.\"\n\n(dict) --The slot values that Amazon Lex uses when it sets slot values in a dialog step.\n\n\n\n\n\n\n\n\n\n\n\nsessionAttributes (dict) --Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.\n\n(string) --\n(string) --\n\n\n\n\n\n\nresponse (dict) --Specifies a list of message groups that Amazon Lex uses to respond the user input.\n\nmessageGroups (list)[REQUIRED]A collection of responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime.\n\n(dict) --Provides one or more messages that Amazon Lex should send to the user.\n\nmessage (dict)[REQUIRED]The primary message that Amazon Lex should send to the user.\n\nplainTextMessage (dict) --A message in plain text format.\n\nvalue (string)[REQUIRED]The message to send to the user.\n\n\n\ncustomPayload (dict) --A message in a custom format defined by the client application.\n\nvalue (string)[REQUIRED]The string that is sent to your application.\n\n\n\nssmlMessage (dict) --A message in Speech Synthesis Markup Language (SSML).\n\nvalue (string)[REQUIRED]The SSML text that defines the prompt.\n\n\n\nimageResponseCard (dict) --A message that defines a response card that the client application can show to the user.\n\ntitle (string)[REQUIRED]The title to display on the response card. The format of the title is determined by the platform displaying the response card.\n\nsubtitle (string) --The subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.\n\nimageUrl (string) --The URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.\n\nbuttons (list) --A list of buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button.\n\n(dict) --Describes a button to use on a response card used to gather slot values from a user.\n\ntext (string)[REQUIRED]The text that appears on the button. Use this to tell the user what value is returned when they choose this button.\n\nvalue (string)[REQUIRED]The value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.\n\n\n\n\n\n\n\n\n\nvariations (list) --Message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user.\n\n(dict) --The object that provides message text and it's type.\n\nplainTextMessage (dict) --A message in plain text format.\n\nvalue (string)[REQUIRED]The message to send to the user.\n\n\n\ncustomPayload (dict) --A message in a custom format defined by the client application.\n\nvalue (string)[REQUIRED]The string that is sent to your application.\n\n\n\nssmlMessage (dict) --A message in Speech Synthesis Markup Language (SSML).\n\nvalue (string)[REQUIRED]The SSML text that defines the prompt.\n\n\n\nimageResponseCard (dict) --A message that defines a response card that the client application can show to the user.\n\ntitle (string)[REQUIRED]The title to display on the response card. The format of the title is determined by the platform displaying the response card.\n\nsubtitle (string) --The subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.\n\nimageUrl (string) --The URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.\n\nbuttons (list) --A list of buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button.\n\n(dict) --Describes a button to use on a response card used to gather slot values from a user.\n\ntext (string)[REQUIRED]The text that appears on the button. Use this to tell the user what value is returned when they choose this button.\n\nvalue (string)[REQUIRED]The value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nallowInterrupt (boolean) --Indicates whether the user can interrupt a speech response from Amazon Lex.\n\n\n\n\n\n\n\ncodeHook (dict) --Settings that specify the dialog code hook that is called by Amazon Lex at a step of the conversation.\n\nenableCodeHookInvocation (boolean)[REQUIRED]Indicates whether a Lambda function should be invoked for the dialog.\n\nactive (boolean)[REQUIRED]Determines whether a dialog code hook is used when the intent is activated.\n\ninvocationLabel (string) --A label that indicates the dialog step from which the dialog code hook is happening.\n\npostCodeHookSpecification (dict)[REQUIRED]Contains the responses and actions that Amazon Lex takes after the Lambda function is complete.\n\nsuccessResponse (dict) --Specifies a list of message groups that Amazon Lex uses to respond the user input.\n\nmessageGroups (list)[REQUIRED]A collection of responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime.\n\n(dict) --Provides one or more messages that Amazon Lex should send to the user.\n\nmessage (dict)[REQUIRED]The primary message that Amazon Lex should send to the user.\n\nplainTextMessage (dict) --A message in plain text format.\n\nvalue (string)[REQUIRED]The message to send to the user.\n\n\n\ncustomPayload (dict) --A message in a custom format defined by the client application.\n\nvalue (string)[REQUIRED]The string that is sent to your application.\n\n\n\nssmlMessage (dict) --A message in Speech Synthesis Markup Language (SSML).\n\nvalue (string)[REQUIRED]The SSML text that defines the prompt.\n\n\n\nimageResponseCard (dict) --A message that defines a response card that the client application can show to the user.\n\ntitle (string)[REQUIRED]The title to display on the response card. The format of the title is determined by the platform displaying the response card.\n\nsubtitle (string) --The subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.\n\nimageUrl (string) --The URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.\n\nbuttons (list) --A list of buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button.\n\n(dict) --Describes a button to use on a response card used to gather slot values from a user.\n\ntext (string)[REQUIRED]The text that appears on the button. Use this to tell the user what value is returned when they choose this button.\n\nvalue (string)[REQUIRED]The value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.\n\n\n\n\n\n\n\n\n\nvariations (list) --Message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user.\n\n(dict) --The object that provides message text and it's type.\n\nplainTextMessage (dict) --A message in plain text format.\n\nvalue (string)[REQUIRED]The message to send to the user.\n\n\n\ncustomPayload (dict) --A message in a custom format defined by the client application.\n\nvalue (string)[REQUIRED]The string that is sent to your application.\n\n\n\nssmlMessage (dict) --A message in Speech Synthesis Markup Language (SSML).\n\nvalue (string)[REQUIRED]The SSML text that defines the prompt.\n\n\n\nimageResponseCard (dict) --A message that defines a response card that the client application can show to the user.\n\ntitle (string)[REQUIRED]The title to display on the response card. The format of the title is determined by the platform displaying the response card.\n\nsubtitle (string) --The subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.\n\nimageUrl (string) --The URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.\n\nbuttons (list) --A list of buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button.\n\n(dict) --Describes a button to use on a response card used to gather slot values from a user.\n\ntext (string)[REQUIRED]The text that appears on the button. Use this to tell the user what value is returned when they choose this button.\n\nvalue (string)[REQUIRED]The value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nallowInterrupt (boolean) --Indicates whether the user can interrupt a speech response from Amazon Lex.\n\n\n\nsuccessNextStep (dict) --Specifics the next step the bot runs after the dialog code hook finishes successfully.\n\ndialogAction (dict) --Defines the action that the bot executes at runtime when the conversation reaches this step.\n\ntype (string)[REQUIRED]The action that the bot should execute.\n\nslotToElicit (string) --If the dialog action is ElicitSlot , defines the slot to elicit from the user.\n\nsuppressNextMessage (boolean) --When true the next message for the intent is not used.\n\n\n\nintent (dict) --Override settings to configure the intent state.\n\nname (string) --The name of the intent. Only required when you're switching intents.\n\nslots (dict) --A map of all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden.,\n\n(string) --\n(dict) --The slot values that Amazon Lex uses when it sets slot values in a dialog step.\n\nshape (string) --When the shape value is List , it indicates that the values field contains a list of slot values. When the value is Scalar , it indicates that the value field contains a single value.\n\nvalue (dict) --The current value of the slot.\n\ninterpretedValue (string) --The value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.\n\n\n\nvalues (list) --A list of one or more values that the user provided for the slot. For example, for a slot that elicits pizza toppings, the values might be \"pepperoni\" and \"pineapple.\"\n\n(dict) --The slot values that Amazon Lex uses when it sets slot values in a dialog step.\n\n\n\n\n\n\n\n\n\n\n\nsessionAttributes (dict) --Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.\n\n(string) --\n(string) --\n\n\n\n\n\n\nsuccessConditional (dict) --A list of conditional branches to evaluate after the dialog code hook finishes successfully.\n\nactive (boolean)[REQUIRED]Determines whether a conditional branch is active. When active is false, the conditions are not evaluated.\n\nconditionalBranches (list)[REQUIRED]A list of conditional branches. A conditional branch is made up of a condition, a response and a next step. The response and next step are executed when the condition is true.\n\n(dict) --A set of actions that Amazon Lex should run if the condition is matched.\n\nname (string)[REQUIRED]The name of the branch.\n\ncondition (dict)[REQUIRED]Contains the expression to evaluate. If the condition is true, the branch's actions are taken.\n\nexpressionString (string)[REQUIRED]The expression string that is evaluated.\n\n\n\nnextStep (dict)[REQUIRED]The next step in the conversation.\n\ndialogAction (dict) --Defines the action that the bot executes at runtime when the conversation reaches this step.\n\ntype (string)[REQUIRED]The action that the bot should execute.\n\nslotToElicit (string) --If the dialog action is ElicitSlot , defines the slot to elicit from the user.\n\nsuppressNextMessage (boolean) --When true the next message for the intent is not used.\n\n\n\nintent (dict) --Override settings to configure the intent state.\n\nname (string) --The name of the intent. Only required when you're switching intents.\n\nslots (dict) --A map of all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden.,\n\n(string) --\n(dict) --The slot values that Amazon Lex uses when it sets slot values in a dialog step.\n\nshape (string) --When the shape value is List , it indicates that the values field contains a list of slot values. When the value is Scalar , it indicates that the value field contains a single value.\n\nvalue (dict) --The current value of the slot.\n\ninterpretedValue (string) --The value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.\n\n\n\nvalues (list) --A list of one or more values that the user provided for the slot. For example, for a slot that elicits pizza toppings, the values might be \"pepperoni\" and \"pineapple.\"\n\n(dict) --The slot values that Amazon Lex uses when it sets slot values in a dialog step.\n\n\n\n\n\n\n\n\n\n\n\nsessionAttributes (dict) --Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.\n\n(string) --\n(string) --\n\n\n\n\n\n\nresponse (dict) --Specifies a list of message groups that Amazon Lex uses to respond the user input.\n\nmessageGroups (list)[REQUIRED]A collection of responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime.\n\n(dict) --Provides one or more messages that Amazon Lex should send to the user.\n\nmessage (dict)[REQUIRED]The primary message that Amazon Lex should send to the user.\n\nplainTextMessage (dict) --A message in plain text format.\n\nvalue (string)[REQUIRED]The message to send to the user.\n\n\n\ncustomPayload (dict) --A message in a custom format defined by the client application.\n\nvalue (string)[REQUIRED]The string that is sent to your application.\n\n\n\nssmlMessage (dict) --A message in Speech Synthesis Markup Language (SSML).\n\nvalue (string)[REQUIRED]The SSML text that defines the prompt.\n\n\n\nimageResponseCard (dict) --A message that defines a response card that the client application can show to the user.\n\ntitle (string)[REQUIRED]The title to display on the response card. The format of the title is determined by the platform displaying the response card.\n\nsubtitle (string) --The subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.\n\nimageUrl (string) --The URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.\n\nbuttons (list) --A list of buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button.\n\n(dict) --Describes a button to use on a response card used to gather slot values from a user.\n\ntext (string)[REQUIRED]The text that appears on the button. Use this to tell the user what value is returned when they choose this button.\n\nvalue (string)[REQUIRED]The value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.\n\n\n\n\n\n\n\n\n\nvariations (list) --Message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user.\n\n(dict) --The object that provides message text and it's type.\n\nplainTextMessage (dict) --A message in plain text format.\n\nvalue (string)[REQUIRED]The message to send to the user.\n\n\n\ncustomPayload (dict) --A message in a custom format defined by the client application.\n\nvalue (string)[REQUIRED]The string that is sent to your application.\n\n\n\nssmlMessage (dict) --A message in Speech Synthesis Markup Language (SSML).\n\nvalue (string)[REQUIRED]The SSML text that defines the prompt.\n\n\n\nimageResponseCard (dict) --A message that defines a response card that the client application can show to the user.\n\ntitle (string)[REQUIRED]The title to display on the response card. The format of the title is determined by the platform displaying the response card.\n\nsubtitle (string) --The subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.\n\nimageUrl (string) --The URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.\n\nbuttons (list) --A list of buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button.\n\n(dict) --Describes a button to use on a response card used to gather slot values from a user.\n\ntext (string)[REQUIRED]The text that appears on the button. Use this to tell the user what value is returned when they choose this button.\n\nvalue (string)[REQUIRED]The value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nallowInterrupt (boolean) --Indicates whether the user can interrupt a speech response from Amazon Lex.\n\n\n\n\n\n\n\ndefaultBranch (dict)[REQUIRED]The conditional branch that should be followed when the conditions for other branches are not satisfied. A conditional branch is made up of a condition, a response and a next step.\n\nnextStep (dict) --The next step in the conversation.\n\ndialogAction (dict) --Defines the action that the bot executes at runtime when the conversation reaches this step.\n\ntype (string)[REQUIRED]The action that the bot should execute.\n\nslotToElicit (string) --If the dialog action is ElicitSlot , defines the slot to elicit from the user.\n\nsuppressNextMessage (boolean) --When true the next message for the intent is not used.\n\n\n\nintent (dict) --Override settings to configure the intent state.\n\nname (string) --The name of the intent. Only required when you're switching intents.\n\nslots (dict) --A map of all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden.,\n\n(string) --\n(dict) --The slot values that Amazon Lex uses when it sets slot values in a dialog step.\n\nshape (string) --When the shape value is List , it indicates that the values field contains a list of slot values. When the value is Scalar , it indicates that the value field contains a single value.\n\nvalue (dict) --The current value of the slot.\n\ninterpretedValue (string) --The value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.\n\n\n\nvalues (list) --A list of one or more values that the user provided for the slot. For example, for a slot that elicits pizza toppings, the values might be \"pepperoni\" and \"pineapple.\"\n\n(dict) --The slot values that Amazon Lex uses when it sets slot values in a dialog step.\n\n\n\n\n\n\n\n\n\n\n\nsessionAttributes (dict) --Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.\n\n(string) --\n(string) --\n\n\n\n\n\n\nresponse (dict) --Specifies a list of message groups that Amazon Lex uses to respond the user input.\n\nmessageGroups (list)[REQUIRED]A collection of responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime.\n\n(dict) --Provides one or more messages that Amazon Lex should send to the user.\n\nmessage (dict)[REQUIRED]The primary message that Amazon Lex should send to the user.\n\nplainTextMessage (dict) --A message in plain text format.\n\nvalue (string)[REQUIRED]The message to send to the user.\n\n\n\ncustomPayload (dict) --A message in a custom format defined by the client application.\n\nvalue (string)[REQUIRED]The string that is sent to your application.\n\n\n\nssmlMessage (dict) --A message in Speech Synthesis Markup Language (SSML).\n\nvalue (string)[REQUIRED]The SSML text that defines the prompt.\n\n\n\nimageResponseCard (dict) --A message that defines a response card that the client application can show to the user.\n\ntitle (string)[REQUIRED]The title to display on the response card. The format of the title is determined by the platform displaying the response card.\n\nsubtitle (string) --The subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.\n\nimageUrl (string) --The URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.\n\nbuttons (list) --A list of buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button.\n\n(dict) --Describes a button to use on a response card used to gather slot values from a user.\n\ntext (string)[REQUIRED]The text that appears on the button. Use this to tell the user what value is returned when they choose this button.\n\nvalue (string)[REQUIRED]The value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.\n\n\n\n\n\n\n\n\n\nvariations (list) --Message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user.\n\n(dict) --The object that provides message text and it's type.\n\nplainTextMessage (dict) --A message in plain text format.\n\nvalue (string)[REQUIRED]The message to send to the user.\n\n\n\ncustomPayload (dict) --A message in a custom format defined by the client application.\n\nvalue (string)[REQUIRED]The string that is sent to your application.\n\n\n\nssmlMessage (dict) --A message in Speech Synthesis Markup Language (SSML).\n\nvalue (string)[REQUIRED]The SSML text that defines the prompt.\n\n\n\nimageResponseCard (dict) --A message that defines a response card that the client application can show to the user.\n\ntitle (string)[REQUIRED]The title to display on the response card. The format of the title is determined by the platform displaying the response card.\n\nsubtitle (string) --The subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.\n\nimageUrl (string) --The URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.\n\nbuttons (list) --A list of buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button.\n\n(dict) --Describes a button to use on a response card used to gather slot values from a user.\n\ntext (string)[REQUIRED]The text that appears on the button. Use this to tell the user what value is returned when they choose this button.\n\nvalue (string)[REQUIRED]The value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nallowInterrupt (boolean) --Indicates whether the user can interrupt a speech response from Amazon Lex.\n\n\n\n\n\n\n\nfailureResponse (dict) --Specifies a list of message groups that Amazon Lex uses to respond the user input.\n\nmessageGroups (list)[REQUIRED]A collection of responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime.\n\n(dict) --Provides one or more messages that Amazon Lex should send to the user.\n\nmessage (dict)[REQUIRED]The primary message that Amazon Lex should send to the user.\n\nplainTextMessage (dict) --A message in plain text format.\n\nvalue (string)[REQUIRED]The message to send to the user.\n\n\n\ncustomPayload (dict) --A message in a custom format defined by the client application.\n\nvalue (string)[REQUIRED]The string that is sent to your application.\n\n\n\nssmlMessage (dict) --A message in Speech Synthesis Markup Language (SSML).\n\nvalue (string)[REQUIRED]The SSML text that defines the prompt.\n\n\n\nimageResponseCard (dict) --A message that defines a response card that the client application can show to the user.\n\ntitle (string)[REQUIRED]The title to display on the response card. The format of the title is determined by the platform displaying the response card.\n\nsubtitle (string) --The subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.\n\nimageUrl (string) --The URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.\n\nbuttons (list) --A list of buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button.\n\n(dict) --Describes a button to use on a response card used to gather slot values from a user.\n\ntext (string)[REQUIRED]The text that appears on the button. Use this to tell the user what value is returned when they choose this button.\n\nvalue (string)[REQUIRED]The value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.\n\n\n\n\n\n\n\n\n\nvariations (list) --Message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user.\n\n(dict) --The object that provides message text and it's type.\n\nplainTextMessage (dict) --A message in plain text format.\n\nvalue (string)[REQUIRED]The message to send to the user.\n\n\n\ncustomPayload (dict) --A message in a custom format defined by the client application.\n\nvalue (string)[REQUIRED]The string that is sent to your application.\n\n\n\nssmlMessage (dict) --A message in Speech Synthesis Markup Language (SSML).\n\nvalue (string)[REQUIRED]The SSML text that defines the prompt.\n\n\n\nimageResponseCard (dict) --A message that defines a response card that the client application can show to the user.\n\ntitle (string)[REQUIRED]The title to display on the response card. The format of the title is determined by the platform displaying the response card.\n\nsubtitle (string) --The subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.\n\nimageUrl (string) --The URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.\n\nbuttons (list) --A list of buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button.\n\n(dict) --Describes a button to use on a response card used to gather slot values from a user.\n\ntext (string)[REQUIRED]The text that appears on the button. Use this to tell the user what value is returned when they choose this button.\n\nvalue (string)[REQUIRED]The value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nallowInterrupt (boolean) --Indicates whether the user can interrupt a speech response from Amazon Lex.\n\n\n\nfailureNextStep (dict) --Specifies the next step the bot runs after the dialog code hook throws an exception or returns with the State field of the Intent object set to Failed .\n\ndialogAction (dict) --Defines the action that the bot executes at runtime when the conversation reaches this step.\n\ntype (string)[REQUIRED]The action that the bot should execute.\n\nslotToElicit (string) --If the dialog action is ElicitSlot , defines the slot to elicit from the user.\n\nsuppressNextMessage (boolean) --When true the next message for the intent is not used.\n\n\n\nintent (dict) --Override settings to configure the intent state.\n\nname (string) --The name of the intent. Only required when you're switching intents.\n\nslots (dict) --A map of all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden.,\n\n(string) --\n(dict) --The slot values that Amazon Lex uses when it sets slot values in a dialog step.\n\nshape (string) --When the shape value is List , it indicates that the values field contains a list of slot values. When the value is Scalar , it indicates that the value field contains a single value.\n\nvalue (dict) --The current value of the slot.\n\ninterpretedValue (string) --The value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.\n\n\n\nvalues (list) --A list of one or more values that the user provided for the slot. For example, for a slot that elicits pizza toppings, the values might be \"pepperoni\" and \"pineapple.\"\n\n(dict) --The slot values that Amazon Lex uses when it sets slot values in a dialog step.\n\n\n\n\n\n\n\n\n\n\n\nsessionAttributes (dict) --Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.\n\n(string) --\n(string) --\n\n\n\n\n\n\nfailureConditional (dict) --A list of conditional branches to evaluate after the dialog code hook throws an exception or returns with the State field of the Intent object set to Failed .\n\nactive (boolean)[REQUIRED]Determines whether a conditional branch is active. When active is false, the conditions are not evaluated.\n\nconditionalBranches (list)[REQUIRED]A list of conditional branches. A conditional branch is made up of a condition, a response and a next step. The response and next step are executed when the condition is true.\n\n(dict) --A set of actions that Amazon Lex should run if the condition is matched.\n\nname (string)[REQUIRED]The name of the branch.\n\ncondition (dict)[REQUIRED]Contains the expression to evaluate. If the condition is true, the branch's actions are taken.\n\nexpressionString (string)[REQUIRED]The expression string that is evaluated.\n\n\n\nnextStep (dict)[REQUIRED]The next step in the conversation.\n\ndialogAction (dict) --Defines the action that the bot executes at runtime when the conversation reaches this step.\n\ntype (string)[REQUIRED]The action that the bot should execute.\n\nslotToElicit (string) --If the dialog action is ElicitSlot , defines the slot to elicit from the user.\n\nsuppressNextMessage (boolean) --When true the next message for the intent is not used.\n\n\n\nintent (dict) --Override settings to configure the intent state.\n\nname (string) --The name of the intent. Only required when you're switching intents.\n\nslots (dict) --A map of all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden.,\n\n(string) --\n(dict) --The slot values that Amazon Lex uses when it sets slot values in a dialog step.\n\nshape (string) --When the shape value is List , it indicates that the values field contains a list of slot values. When the value is Scalar , it indicates that the value field contains a single value.\n\nvalue (dict) --The current value of the slot.\n\ninterpretedValue (string) --The value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.\n\n\n\nvalues (list) --A list of one or more values that the user provided for the slot. For example, for a slot that elicits pizza toppings, the values might be \"pepperoni\" and \"pineapple.\"\n\n(dict) --The slot values that Amazon Lex uses when it sets slot values in a dialog step.\n\n\n\n\n\n\n\n\n\n\n\nsessionAttributes (dict) --Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.\n\n(string) --\n(string) --\n\n\n\n\n\n\nresponse (dict) --Specifies a list of message groups that Amazon Lex uses to respond the user input.\n\nmessageGroups (list)[REQUIRED]A collection of responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime.\n\n(dict) --Provides one or more messages that Amazon Lex should send to the user.\n\nmessage (dict)[REQUIRED]The primary message that Amazon Lex should send to the user.\n\nplainTextMessage (dict) --A message in plain text format.\n\nvalue (string)[REQUIRED]The message to send to the user.\n\n\n\ncustomPayload (dict) --A message in a custom format defined by the client application.\n\nvalue (string)[REQUIRED]The string that is sent to your application.\n\n\n\nssmlMessage (dict) --A message in Speech Synthesis Markup Language (SSML).\n\nvalue (string)[REQUIRED]The SSML text that defines the prompt.\n\n\n\nimageResponseCard (dict) --A message that defines a response card that the client application can show to the user.\n\ntitle (string)[REQUIRED]The title to display on the response card. The format of the title is determined by the platform displaying the response card.\n\nsubtitle (string) --The subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.\n\nimageUrl (string) --The URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.\n\nbuttons (list) --A list of buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button.\n\n(dict) --Describes a button to use on a response card used to gather slot values from a user.\n\ntext (string)[REQUIRED]The text that appears on the button. Use this to tell the user what value is returned when they choose this button.\n\nvalue (string)[REQUIRED]The value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.\n\n\n\n\n\n\n\n\n\nvariations (list) --Message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user.\n\n(dict) --The object that provides message text and it's type.\n\nplainTextMessage (dict) --A message in plain text format.\n\nvalue (string)[REQUIRED]The message to send to the user.\n\n\n\ncustomPayload (dict) --A message in a custom format defined by the client application.\n\nvalue (string)[REQUIRED]The string that is sent to your application.\n\n\n\nssmlMessage (dict) --A message in Speech Synthesis Markup Language (SSML).\n\nvalue (string)[REQUIRED]The SSML text that defines the prompt.\n\n\n\nimageResponseCard (dict) --A message that defines a response card that the client application can show to the user.\n\ntitle (string)[REQUIRED]The title to display on the response card. The format of the title is determined by the platform displaying the response card.\n\nsubtitle (string) --The subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.\n\nimageUrl (string) --The URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.\n\nbuttons (list) --A list of buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button.\n\n(dict) --Describes a button to use on a response card used to gather slot values from a user.\n\ntext (string)[REQUIRED]The text that appears on the button. Use this to tell the user what value is returned when they choose this button.\n\nvalue (string)[REQUIRED]The value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nallowInterrupt (boolean) --Indicates whether the user can interrupt a speech response from Amazon Lex.\n\n\n\n\n\n\n\ndefaultBranch (dict)[REQUIRED]The conditional branch that should be followed when the conditions for other branches are not satisfied. A conditional branch is made up of a condition, a response and a next step.\n\nnextStep (dict) --The next step in the conversation.\n\ndialogAction (dict) --Defines the action that the bot executes at runtime when the conversation reaches this step.\n\ntype (string)[REQUIRED]The action that the bot should execute.\n\nslotToElicit (string) --If the dialog action is ElicitSlot , defines the slot to elicit from the user.\n\nsuppressNextMessage (boolean) --When true the next message for the intent is not used.\n\n\n\nintent (dict) --Override settings to configure the intent state.\n\nname (string) --The name of the intent. Only required when you're switching intents.\n\nslots (dict) --A map of all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden.,\n\n(string) --\n(dict) --The slot values that Amazon Lex uses when it sets slot values in a dialog step.\n\nshape (string) --When the shape value is List , it indicates that the values field contains a list of slot values. When the value is Scalar , it indicates that the value field contains a single value.\n\nvalue (dict) --The current value of the slot.\n\ninterpretedValue (string) --The value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.\n\n\n\nvalues (list) --A list of one or more values that the user provided for the slot. For example, for a slot that elicits pizza toppings, the values might be \"pepperoni\" and \"pineapple.\"\n\n(dict) --The slot values that Amazon Lex uses when it sets slot values in a dialog step.\n\n\n\n\n\n\n\n\n\n\n\nsessionAttributes (dict) --Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.\n\n(string) --\n(string) --\n\n\n\n\n\n\nresponse (dict) --Specifies a list of message groups that Amazon Lex uses to respond the user input.\n\nmessageGroups (list)[REQUIRED]A collection of responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime.\n\n(dict) --Provides one or more messages that Amazon Lex should send to the user.\n\nmessage (dict)[REQUIRED]The primary message that Amazon Lex should send to the user.\n\nplainTextMessage (dict) --A message in plain text format.\n\nvalue (string)[REQUIRED]The message to send to the user.\n\n\n\ncustomPayload (dict) --A message in a custom format defined by the client application.\n\nvalue (string)[REQUIRED]The string that is sent to your application.\n\n\n\nssmlMessage (dict) --A message in Speech Synthesis Markup Language (SSML).\n\nvalue (string)[REQUIRED]The SSML text that defines the prompt.\n\n\n\nimageResponseCard (dict) --A message that defines a response card that the client application can show to the user.\n\ntitle (string)[REQUIRED]The title to display on the response card. The format of the title is determined by the platform displaying the response card.\n\nsubtitle (string) --The subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.\n\nimageUrl (string) --The URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.\n\nbuttons (list) --A list of buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button.\n\n(dict) --Describes a button to use on a response card used to gather slot values from a user.\n\ntext (string)[REQUIRED]The text that appears on the button. Use this to tell the user what value is returned when they choose this button.\n\nvalue (string)[REQUIRED]The value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.\n\n\n\n\n\n\n\n\n\nvariations (list) --Message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user.\n\n(dict) --The object that provides message text and it's type.\n\nplainTextMessage (dict) --A message in plain text format.\n\nvalue (string)[REQUIRED]The message to send to the user.\n\n\n\ncustomPayload (dict) --A message in a custom format defined by the client application.\n\nvalue (string)[REQUIRED]The string that is sent to your application.\n\n\n\nssmlMessage (dict) --A message in Speech Synthesis Markup Language (SSML).\n\nvalue (string)[REQUIRED]The SSML text that defines the prompt.\n\n\n\nimageResponseCard (dict) --A message that defines a response card that the client application can show to the user.\n\ntitle (string)[REQUIRED]The title to display on the response card. The format of the title is determined by the platform displaying the response card.\n\nsubtitle (string) --The subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.\n\nimageUrl (string) --The URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.\n\nbuttons (list) --A list of buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button.\n\n(dict) --Describes a button to use on a response card used to gather slot values from a user.\n\ntext (string)[REQUIRED]The text that appears on the button. Use this to tell the user what value is returned when they choose this button.\n\nvalue (string)[REQUIRED]The value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nallowInterrupt (boolean) --Indicates whether the user can interrupt a speech response from Amazon Lex.\n\n\n\n\n\n\n\ntimeoutResponse (dict) --Specifies a list of message groups that Amazon Lex uses to respond the user input.\n\nmessageGroups (list)[REQUIRED]A collection of responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime.\n\n(dict) --Provides one or more messages that Amazon Lex should send to the user.\n\nmessage (dict)[REQUIRED]The primary message that Amazon Lex should send to the user.\n\nplainTextMessage (dict) --A message in plain text format.\n\nvalue (string)[REQUIRED]The message to send to the user.\n\n\n\ncustomPayload (dict) --A message in a custom format defined by the client application.\n\nvalue (string)[REQUIRED]The string that is sent to your application.\n\n\n\nssmlMessage (dict) --A message in Speech Synthesis Markup Language (SSML).\n\nvalue (string)[REQUIRED]The SSML text that defines the prompt.\n\n\n\nimageResponseCard (dict) --A message that defines a response card that the client application can show to the user.\n\ntitle (string)[REQUIRED]The title to display on the response card. The format of the title is determined by the platform displaying the response card.\n\nsubtitle (string) --The subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.\n\nimageUrl (string) --The URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.\n\nbuttons (list) --A list of buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button.\n\n(dict) --Describes a button to use on a response card used to gather slot values from a user.\n\ntext (string)[REQUIRED]The text that appears on the button. Use this to tell the user what value is returned when they choose this button.\n\nvalue (string)[REQUIRED]The value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.\n\n\n\n\n\n\n\n\n\nvariations (list) --Message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user.\n\n(dict) --The object that provides message text and it's type.\n\nplainTextMessage (dict) --A message in plain text format.\n\nvalue (string)[REQUIRED]The message to send to the user.\n\n\n\ncustomPayload (dict) --A message in a custom format defined by the client application.\n\nvalue (string)[REQUIRED]The string that is sent to your application.\n\n\n\nssmlMessage (dict) --A message in Speech Synthesis Markup Language (SSML).\n\nvalue (string)[REQUIRED]The SSML text that defines the prompt.\n\n\n\nimageResponseCard (dict) --A message that defines a response card that the client application can show to the user.\n\ntitle (string)[REQUIRED]The title to display on the response card. The format of the title is determined by the platform displaying the response card.\n\nsubtitle (string) --The subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.\n\nimageUrl (string) --The URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.\n\nbuttons (list) --A list of buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button.\n\n(dict) --Describes a button to use on a response card used to gather slot values from a user.\n\ntext (string)[REQUIRED]The text that appears on the button. Use this to tell the user what value is returned when they choose this button.\n\nvalue (string)[REQUIRED]The value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nallowInterrupt (boolean) --Indicates whether the user can interrupt a speech response from Amazon Lex.\n\n\n\ntimeoutNextStep (dict) --Specifies the next step that the bot runs when the code hook times out.\n\ndialogAction (dict) --Defines the action that the bot executes at runtime when the conversation reaches this step.\n\ntype (string)[REQUIRED]The action that the bot should execute.\n\nslotToElicit (string) --If the dialog action is ElicitSlot , defines the slot to elicit from the user.\n\nsuppressNextMessage (boolean) --When true the next message for the intent is not used.\n\n\n\nintent (dict) --Override settings to configure the intent state.\n\nname (string) --The name of the intent. Only required when you're switching intents.\n\nslots (dict) --A map of all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden.,\n\n(string) --\n(dict) --The slot values that Amazon Lex uses when it sets slot values in a dialog step.\n\nshape (string) --When the shape value is List , it indicates that the values field contains a list of slot values. When the value is Scalar , it indicates that the value field contains a single value.\n\nvalue (dict) --The current value of the slot.\n\ninterpretedValue (string) --The value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.\n\n\n\nvalues (list) --A list of one or more values that the user provided for the slot. For example, for a slot that elicits pizza toppings, the values might be \"pepperoni\" and \"pineapple.\"\n\n(dict) --The slot values that Amazon Lex uses when it sets slot values in a dialog step.\n\n\n\n\n\n\n\n\n\n\n\nsessionAttributes (dict) --Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.\n\n(string) --\n(string) --\n\n\n\n\n\n\ntimeoutConditional (dict) --A list of conditional branches to evaluate if the code hook times out.\n\nactive (boolean)[REQUIRED]Determines whether a conditional branch is active. When active is false, the conditions are not evaluated.\n\nconditionalBranches (list)[REQUIRED]A list of conditional branches. A conditional branch is made up of a condition, a response and a next step. The response and next step are executed when the condition is true.\n\n(dict) --A set of actions that Amazon Lex should run if the condition is matched.\n\nname (string)[REQUIRED]The name of the branch.\n\ncondition (dict)[REQUIRED]Contains the expression to evaluate. If the condition is true, the branch's actions are taken.\n\nexpressionString (string)[REQUIRED]The expression string that is evaluated.\n\n\n\nnextStep (dict)[REQUIRED]The next step in the conversation.\n\ndialogAction (dict) --Defines the action that the bot executes at runtime when the conversation reaches this step.\n\ntype (string)[REQUIRED]The action that the bot should execute.\n\nslotToElicit (string) --If the dialog action is ElicitSlot , defines the slot to elicit from the user.\n\nsuppressNextMessage (boolean) --When true the next message for the intent is not used.\n\n\n\nintent (dict) --Override settings to configure the intent state.\n\nname (string) --The name of the intent. Only required when you're switching intents.\n\nslots (dict) --A map of all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden.,\n\n(string) --\n(dict) --The slot values that Amazon Lex uses when it sets slot values in a dialog step.\n\nshape (string) --When the shape value is List , it indicates that the values field contains a list of slot values. When the value is Scalar , it indicates that the value field contains a single value.\n\nvalue (dict) --The current value of the slot.\n\ninterpretedValue (string) --The value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.\n\n\n\nvalues (list) --A list of one or more values that the user provided for the slot. For example, for a slot that elicits pizza toppings, the values might be \"pepperoni\" and \"pineapple.\"\n\n(dict) --The slot values that Amazon Lex uses when it sets slot values in a dialog step.\n\n\n\n\n\n\n\n\n\n\n\nsessionAttributes (dict) --Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.\n\n(string) --\n(string) --\n\n\n\n\n\n\nresponse (dict) --Specifies a list of message groups that Amazon Lex uses to respond the user input.\n\nmessageGroups (list)[REQUIRED]A collection of responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime.\n\n(dict) --Provides one or more messages that Amazon Lex should send to the user.\n\nmessage (dict)[REQUIRED]The primary message that Amazon Lex should send to the user.\n\nplainTextMessage (dict) --A message in plain text format.\n\nvalue (string)[REQUIRED]The message to send to the user.\n\n\n\ncustomPayload (dict) --A message in a custom format defined by the client application.\n\nvalue (string)[REQUIRED]The string that is sent to your application.\n\n\n\nssmlMessage (dict) --A message in Speech Synthesis Markup Language (SSML).\n\nvalue (string)[REQUIRED]The SSML text that defines the prompt.\n\n\n\nimageResponseCard (dict) --A message that defines a response card that the client application can show to the user.\n\ntitle (string)[REQUIRED]The title to display on the response card. The format of the title is determined by the platform displaying the response card.\n\nsubtitle (string) --The subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.\n\nimageUrl (string) --The URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.\n\nbuttons (list) --A list of buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button.\n\n(dict) --Describes a button to use on a response card used to gather slot values from a user.\n\ntext (string)[REQUIRED]The text that appears on the button. Use this to tell the user what value is returned when they choose this button.\n\nvalue (string)[REQUIRED]The value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.\n\n\n\n\n\n\n\n\n\nvariations (list) --Message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user.\n\n(dict) --The object that provides message text and it's type.\n\nplainTextMessage (dict) --A message in plain text format.\n\nvalue (string)[REQUIRED]The message to send to the user.\n\n\n\ncustomPayload (dict) --A message in a custom format defined by the client application.\n\nvalue (string)[REQUIRED]The string that is sent to your application.\n\n\n\nssmlMessage (dict) --A message in Speech Synthesis Markup Language (SSML).\n\nvalue (string)[REQUIRED]The SSML text that defines the prompt.\n\n\n\nimageResponseCard (dict) --A message that defines a response card that the client application can show to the user.\n\ntitle (string)[REQUIRED]The title to display on the response card. The format of the title is determined by the platform displaying the response card.\n\nsubtitle (string) --The subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.\n\nimageUrl (string) --The URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.\n\nbuttons (list) --A list of buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button.\n\n(dict) --Describes a button to use on a response card used to gather slot values from a user.\n\ntext (string)[REQUIRED]The text that appears on the button. Use this to tell the user what value is returned when they choose this button.\n\nvalue (string)[REQUIRED]The value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nallowInterrupt (boolean) --Indicates whether the user can interrupt a speech response from Amazon Lex.\n\n\n\n\n\n\n\ndefaultBranch (dict)[REQUIRED]The conditional branch that should be followed when the conditions for other branches are not satisfied. A conditional branch is made up of a condition, a response and a next step.\n\nnextStep (dict) --The next step in the conversation.\n\ndialogAction (dict) --Defines the action that the bot executes at runtime when the conversation reaches this step.\n\ntype (string)[REQUIRED]The action that the bot should execute.\n\nslotToElicit (string) --If the dialog action is ElicitSlot , defines the slot to elicit from the user.\n\nsuppressNextMessage (boolean) --When true the next message for the intent is not used.\n\n\n\nintent (dict) --Override settings to configure the intent state.\n\nname (string) --The name of the intent. Only required when you're switching intents.\n\nslots (dict) --A map of all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden.,\n\n(string) --\n(dict) --The slot values that Amazon Lex uses when it sets slot values in a dialog step.\n\nshape (string) --When the shape value is List , it indicates that the values field contains a list of slot values. When the value is Scalar , it indicates that the value field contains a single value.\n\nvalue (dict) --The current value of the slot.\n\ninterpretedValue (string) --The value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the resolvedValues list.\n\n\n\nvalues (list) --A list of one or more values that the user provided for the slot. For example, for a slot that elicits pizza toppings, the values might be \"pepperoni\" and \"pineapple.\"\n\n(dict) --The slot values that Amazon Lex uses when it sets slot values in a dialog step.\n\n\n\n\n\n\n\n\n\n\n\nsessionAttributes (dict) --Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.\n\n(string) --\n(string) --\n\n\n\n\n\n\nresponse (dict) --Specifies a list of message groups that Amazon Lex uses to respond the user input.\n\nmessageGroups (list)[REQUIRED]A collection of responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime.\n\n(dict) --Provides one or more messages that Amazon Lex should send to the user.\n\nmessage (dict)[REQUIRED]The primary message that Amazon Lex should send to the user.\n\nplainTextMessage (dict) --A message in plain text format.\n\nvalue (string)[REQUIRED]The message to send to the user.\n\n\n\ncustomPayload (dict) --A message in a custom format defined by the client application.\n\nvalue (string)[REQUIRED]The string that is sent to your application.\n\n\n\nssmlMessage (dict) --A message in Speech Synthesis Markup Language (SSML).\n\nvalue (string)[REQUIRED]The SSML text that defines the prompt.\n\n\n\nimageResponseCard (dict) --A message that defines a response card that the client application can show to the user.\n\ntitle (string)[REQUIRED]The title to display on the response card. The format of the title is determined by the platform displaying the response card.\n\nsubtitle (string) --The subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.\n\nimageUrl (string) --The URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.\n\nbuttons (list) --A list of buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button.\n\n(dict) --Describes a button to use on a response card used to gather slot values from a user.\n\ntext (string)[REQUIRED]The text that appears on the button. Use this to tell the user what value is returned when they choose this button.\n\nvalue (string)[REQUIRED]The value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.\n\n\n\n\n\n\n\n\n\nvariations (list) --Message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user.\n\n(dict) --The object that provides message text and it's type.\n\nplainTextMessage (dict) --A message in plain text format.\n\nvalue (string)[REQUIRED]The message to send to the user.\n\n\n\ncustomPayload (dict) --A message in a custom format defined by the client application.\n\nvalue (string)[REQUIRED]The string that is sent to your application.\n\n\n\nssmlMessage (dict) --A message in Speech Synthesis Markup Language (SSML).\n\nvalue (string)[REQUIRED]The SSML text that defines the prompt.\n\n\n\nimageResponseCard (dict) --A message that defines a response card that the client application can show to the user.\n\ntitle (string)[REQUIRED]The title to display on the response card. The format of the title is determined by the platform displaying the response card.\n\nsubtitle (string) --The subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.\n\nimageUrl (string) --The URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.\n\nbuttons (list) --A list of buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button.\n\n(dict) --Describes a button to use on a response card used to gather slot values from a user.\n\ntext (string)[REQUIRED]The text that appears on the button. Use this to tell the user what value is returned when they choose this button.\n\nvalue (string)[REQUIRED]The value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nallowInterrupt (boolean) --Indicates whether the user can interrupt a speech response from Amazon Lex.\n\n\n\n\n\n\n\n\n\n\n\n\n",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        }
    },
    "update_resource_policy": {
        "resourceArn": {
            "Description": "The Amazon Resource Name (ARN) of the bot or bot alias that the resource policy is attached to.",
            "Type": "string",
            "Required": true
        },
        "policy": {
            "Description": "A resource policy to add to the resource. The policy is a JSON structure that contains one or more statements that define the policy. The policy must follow the IAM syntax. For more information about the contents of a JSON policy document, see IAM JSON policy reference .\nIf the policy isn't valid, Amazon Lex returns a validation exception.",
            "Type": "string",
            "Required": true
        },
        "expectedRevisionId": {
            "Description": "The identifier of the revision of the policy to update. If this revision ID doesn't match the current revision ID, Amazon Lex throws an exception.\nIf you don't specify a revision, Amazon Lex overwrites the contents of the policy with the new values.",
            "Type": "string",
            "Required": false
        }
    },
    "update_slot": {
        "slotId": {
            "Description": "The unique identifier for the slot to update.",
            "Type": "string",
            "Required": true
        },
        "slotName": {
            "Description": "The new name for the slot.",
            "Type": "string",
            "Required": true
        },
        "description": {
            "Description": "The new description for the slot.",
            "Type": "string",
            "Required": false
        },
        "slotTypeId": {
            "Description": "The unique identifier of the new slot type to associate with this slot.",
            "Type": "string",
            "Required": false
        },
        "valueElicitationSetting": {
            "Description": "A new set of prompts that Amazon Lex sends to the user to elicit a response the provides a value for the slot.",
            "Type": "dict",
            "Required": true,
            "dict variables": {}
        },
        "obfuscationSetting": {
            "Description": "New settings that determine how slot values are formatted in Amazon CloudWatch logs.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "botId": {
            "Description": "The unique identifier of the bot that contains the slot.",
            "Type": "string",
            "Required": true
        },
        "botVersion": {
            "Description": "The version of the bot that contains the slot. Must always be DRAFT .",
            "Type": "string",
            "Required": true
        },
        "localeId": {
            "Description": "The identifier of the language and locale that contains the slot. The string must match one of the supported locales. For more information, see Supported languages .",
            "Type": "string",
            "Required": true
        },
        "intentId": {
            "Description": "The identifier of the intent that contains the slot.",
            "Type": "string",
            "Required": true
        },
        "multipleValuesSetting": {
            "Description": "Determines whether the slot accepts multiple values in one response. Multiple value slots are only available in the en-US locale. If you set this value to true in any other locale, Amazon Lex throws a ValidationException .\nIf the multipleValuesSetting is not set, the default value is false .",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "subSlotSetting": {
            "Description": "Specifications for the constituent sub slots and the expression for the composite slot.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        }
    },
    "update_slot_type": {
        "slotTypeId": {
            "Description": "The unique identifier of the slot type to update.",
            "Type": "string",
            "Required": true
        },
        "slotTypeName": {
            "Description": "The new name of the slot type.",
            "Type": "string",
            "Required": true
        },
        "description": {
            "Description": "The new description of the slot type.",
            "Type": "string",
            "Required": false
        },
        "slotTypeValues": {
            "Description": "A new list of values and their optional synonyms that define the values that the slot type can take.",
            "Type": "list",
            "Required": false,
            "list variables": {}
        },
        "valueSelectionSetting": {
            "Description": "The strategy that Amazon Lex should use when deciding on a value from the list of slot type values.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "parentSlotTypeSignature": {
            "Description": "The new built-in slot type that should be used as the parent of this slot type.",
            "Type": "string",
            "Required": false
        },
        "botId": {
            "Description": "The identifier of the bot that contains the slot type.",
            "Type": "string",
            "Required": true
        },
        "botVersion": {
            "Description": "The version of the bot that contains the slot type. Must be DRAFT .",
            "Type": "string",
            "Required": true
        },
        "localeId": {
            "Description": "The identifier of the language and locale that contains the slot type. The string must match one of the supported locales. For more information, see Supported languages .",
            "Type": "string",
            "Required": true
        },
        "externalSourceSetting": {
            "Description": "Provides information about the external source of the slot type's definition.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        },
        "compositeSlotTypeSetting": {
            "Description": "Specifications for a composite slot type.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        }
    },
    "wait": {
        "botId": {
            "Description": "The identifier of the bot containing the version to return metadata for.",
            "Type": "string",
            "Required": true
        },
        "botVersion": {
            "Description": "The version of the bot to return metadata for.",
            "Type": "string",
            "Required": true
        },
        "WaiterConfig": {
            "Description": "A dictionary that provides parameters to control waiting behavior.",
            "Type": "dict",
            "Required": false,
            "dict variables": {}
        }
    }
}